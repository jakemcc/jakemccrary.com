<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: lein-test-refresh | Jake McCrary]]></title>
  <link href="https://jakemccrary.com/blog/categories/lein-test-refresh/atom.xml" rel="self"/>
  <link href="https://jakemccrary.com/"/>
  <updated>2020-05-04T21:28:48-05:00</updated>
  <id>https://jakemccrary.com/</id>
  <author>
    <name><![CDATA[Jake McCrary]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Breaking change and more in lein-test-refresh 0.24.1]]></title>
    <link href="https://jakemccrary.com/blog/2019/03/20/breaking-change-and-more-in-lein-test-refresh-0-dot-24-dot-0/"/>
    <updated>2019-03-20T21:30:00-05:00</updated>
    <id>https://jakemccrary.com/blog/2019/03/20/breaking-change-and-more-in-lein-test-refresh-0-dot-24-dot-0</id>
    <content type="html"><![CDATA[<p>Today I released <a href="https://github.com/jakemcc/lein-test-refresh">lein-test-refresh</a> <code>0.24.1</code><sup id="fnref:1"><a href="#fn:1" rel="footnote">1</a></sup>. I don&rsquo;t always announce new lein-test-refresh versions with an article but this release breaks some existing behavior so I thought it was worth it.</p>

<p>Each of these changes is the direct result of interacting with four different <code>lein-test-refresh</code> users. Some of this took place on GitHub and others through email. Thanks to all of you for taking the time to think about improvements and notice oddities and bring them to my attention.</p>

<h3>Breaking change: Monitoring keystrokes to perform actions</h3>

<p>Prior to this release, if you hit Ctrl-D then STDIN reads an EOF and <code>test-refresh</code> would quit. With version 0.24.1, <code>test-refresh</code> no longer does that. Instead, it stops monitoring for input and just keeps running tests. Since it stops monitoring for input it no longer notices when you hit Enter to cause your tests to rerun. You can still stop <code>lein test-refresh</code> by sending a SIGINT with Ctrl-C.</p>

<p>This change was made because there is some combination of environments where if <code>test-refresh</code> execs <code>/bin/bash</code> then it receives an EOF on STDIN. Before this change, that means <code>test-refresh</code> would quit unexpectedly. Now it will keep going.</p>

<p>Thanks <a href="https://github.com/cloojure">Alan Thompson</a> for bringing this to my attention and taking the time to help diagnose the problem.</p>

<h3>You can supply your own narrowing test selector</h3>

<p>Being able to tell <code>test-refresh</code> to narrow its focus by adding <code>:test-refresh/focus</code> as metadata on a test or namespace has quickly become a favorite feature of many users. Now you can configure a shorter keyword by specifying configuration in your profile. See the <a href="https://github.com/jakemcc/lein-test-refresh/blob/1b5165660d9e40d9394809a95b148ec758a6d56b/sample.project.clj#L61-L65">sample project.clj</a> for how to set this up.</p>

<p>Thanks <a href="https://github.com/metametadata">Yuri Govorushchenko</a> for the suggestion.</p>

<h3>Experimental: Run in a repl</h3>

<p>I&rsquo;ve turned down this feature in the past but a narrower request came up and I thought it seemed useful. <code>test-refresh</code> now exposes a function you can call in a repl to run <code>test-refresh</code> in that repl. This makes the repl useless for any other task. To do this, first add <code>lein-test-refresh</code> as a dependency instead of a plugin to your project.clj. Then, require the namespace and call the function passing in one or more paths to your test directories. Example below.</p>

<pre><code class="clojure">user=&gt; (require 'com.jakemccrary.test-refresh)
nil
user=&gt; (com.jakemccrary.test-refresh/run-in-repl "test")
*********************************************
*************** Running tests ***************
</code></pre>

<p><a href="https://github.com/jakemcc/lein-test-refresh/issues/80">This request</a> was done so that you can run it in Cursive&rsquo;s repl and gain the ability to click on stacktraces. Thanks <a href="https://github.com/klauswuestefeld">Klaus Wuestefeld</a> for bringing this up again with a really solid and focused use case.</p>

<h3>Better output on exceptions while reloading</h3>

<p>This was a <a href="https://github.com/jakemcc/lein-test-refresh/pull/81">pull request</a> from <a href="https://github.com/minhtuannguyen">Minh Tuan Nguyen</a>. Now figuring out where to look for the error will be a little easier.</p>

<h2>Thank you</h2>

<p>Thanks to all the users of lein-test-refresh. I&rsquo;ve found it to be very valuable to the way I work and I&rsquo;m very happy that others do as well.</p>
<div class="footnotes">
<hr/>
<ol>
<li id="fn:1">
<p>This was originally 0.24.0 but that had a bug in it. Sorry about that.<a href="#fnref:1" rev="footnote">&#8617;</a></p></li>
</ol>
</div>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[How to use Leiningen test selectors to filter by test name]]></title>
    <link href="https://jakemccrary.com/blog/2019/01/28/how-to-use-leiningen-test-selectors-to-filter-by-test-name/"/>
    <updated>2019-01-28T21:27:00-06:00</updated>
    <id>https://jakemccrary.com/blog/2019/01/28/how-to-use-leiningen-test-selectors-to-filter-by-test-name</id>
    <content type="html"><![CDATA[<!-- Estimate: 30 minutes -->


<!-- First draft: 38 minutes -->


<!-- First edit: 13 minutes -->


<!-- Second edit: 8 minutes -->


<p>Leiningen test selectors are great. They allow you to filter what tests run by applying a function to the test&rsquo;s metadata. If that function returns a truthy value then that test will run. <a href="https://github.com/jakemcc/lein-test-refresh/blob/master/CHANGES.md#040">lein-test-refresh</a> supports them and even includes a built in one for its <a href="https://github.com/jakemcc/lein-test-refresh#built-in-test-narrowing-test-selector">focus feature</a>.</p>

<p>I was recently <a href="https://github.com/jakemcc/lein-test-refresh/issues/78">asked</a> if test-refresh could support filtering tests using a regular expression against the name of a namespace or test. Lucky for me, test-refresh already supports this because of its support of test selectors.</p>

<p>Most of the examples of Leiningen test selectors show very simple functions that look for the existence of a keyword in the metadata. We can do more than that. We can write a predicate that does whatever we want with the metadata.</p>

<p>To take a look at a test&rsquo;s metadata, I generated a new project and looked at the generated default test file.</p>

<pre><code class="clojure">(ns selector.core-test
  (:require [clojure.test :refer :all]
            [selector.core :refer :all]))

(deftest a-test
  (testing "FIXME, I fail."
    (is (= 0 1))))
</code></pre>

<p>I then used my repl and to see what metadata was on the test.</p>

<pre><code class="clojure">selector.core-test&gt; (meta #'a-test)
{:test #function[selector.core-test/fn--17267],
 :line 5,
 :column 1,
 :file "/Users/jake/src/jakemcc/blog-examples/selector/test/selector/core_test.clj",
 :name a-test,
 :ns #namespace[selector.core-test]}
</code></pre>

<p>Given the metadata above, I wrote the selector below which lets us select only integration tests.</p>

<pre><code class="clojure">:test-selectors {:integration (fn [m]
                                (or (clojure.string/includes? (str (:ns m))
                                                              "integration")
                                    (clojure.string/includes? (str (:name m))
                                                              "integration")))}
</code></pre>

<p>You could write the above code is many different ways. Whatever you write, it needs to look for the existence of <code>integration</code> in either the test&rsquo;s name or namespace.</p>

<p>If you wanted to make <code>lein test</code> or <code>lein test-refresh</code> only run non-integration tests you can add a default test selector to the project.clj.</p>

<pre><code class="clojure">:test-selectors {:default (fn [m]
                            (not (or (clojure.string/includes? (str (:ns m))
                                                               "integration")
                                     (clojure.string/includes? (str (:name m))
                                                               "integration"))))
                 :integration (fn [m]
                                (or (clojure.string/includes? (str (:ns m))
                                                              "integration")
                                    (clojure.string/includes? (str (:name m))
                                                              "integration")))}
</code></pre>

<p>Enjoy! I hope this example helps you run a subset<sup id="fnref:1"><a href="#fn:1" rel="footnote">1</a></sup> of your Clojure tests through Leiningen test selectors.</p>
<div class="footnotes">
<hr/>
<ol>
<li id="fn:1">
<p>Running a subset of your tests can be helpful and test-refresh has a few features that help you do that. If you can, I&rsquo;d still recommend making all your tests fast enough to run them all the time.<a href="#fnref:1" rev="footnote">&#8617;</a></p></li>
</ol>
</div>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Notifications with tmux and lein-test-refresh]]></title>
    <link href="https://jakemccrary.com/blog/2019/01/06/notifications-with-tmux-and-lein-test-refresh/"/>
    <updated>2019-01-06T16:55:00-06:00</updated>
    <id>https://jakemccrary.com/blog/2019/01/06/notifications-with-tmux-and-lein-test-refresh</id>
    <content type="html"><![CDATA[<p>I&rsquo;ve been using Emacs in a remote <a href="https://github.com/tmux/tmux">tmux</a> session lately and I&rsquo;ve been missing <a href="https://github.com/jakemcc/lein-test-refresh#notifications">lein-test-refresh</a> notifications when my Clojure tests pass or fail. Luckily, it only took me a little bit of searching to figure out a solution for when I&rsquo;m working inside of tmux.</p>

<p>Below is a GIF of the notifications I get as my tests run and pass or fail.</p>

<p><img src="/images/tmux-test-refresh.gif" title="tmux and test-refresh notifications" alt="tmux and test-refresh notifications" /></p>

<p>With the above notifications, I can keep my focus on my code and only switch to the tmux window with <code>lein test-refresh</code> running when a test fails.</p>

<p>This was pretty easy to setup. You can trigger a message in tmux by running <code>tmux display-message &lt;MESSAGE_HERE&gt;</code>. To configure <a href="https://github.com/jakemcc/lein-test-refresh#notifications">lein-test-refresh</a> to send notifications to tmux simply include the following in your <code>:test-refresh</code> section of your <code>project.clj</code> or <code>profiles.clj</code>.</p>

<pre><code class="clojure">:test-refresh {:notify-command ["tmux" "display-message"]}
</code></pre>

<p>I hope you enjoy this. Its has made using a remote terminal with tmux and <a href="https://github.com/jakemcc/lein-test-refresh">lein-test-refresh</a> more enjoyable.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Built-in test narrowing with lein-test-refresh]]></title>
    <link href="https://jakemccrary.com/blog/2018/07/16/built-in-test-narrowing-with-lein-test-refresh/"/>
    <updated>2018-07-16T14:47:00-05:00</updated>
    <id>https://jakemccrary.com/blog/2018/07/16/built-in-test-narrowing-with-lein-test-refresh</id>
    <content type="html"><![CDATA[<p>If you follow my work you probably know that I value fast feedback cycles. Most of the open-source I maintain was developed to enable faster feedback cycles. This is why <a href="https://github.com/jakemcc/lein-test-refresh/">lein-test-refresh</a> and <a href="https://github.com/clojure-expectations/lein-autoexpect">lein-autoexpect</a> were originally created.</p>

<p>Leiningen supports <a href="https://github.com/technomancy/leiningen/blob/master/doc/TUTORIAL.md#tests">test selectors</a> and lein-test-refresh <a href="https://github.com/jakemcc/lein-test-refresh/blob/master/CHANGES.md#040">does as well</a>. This lets you start-up a testing session and only run tests or namespaces with certain metadata on them. This is a super useful feature as it lets you narrow your testing scope to one (or a handful) of tests while working on solving a specific problem.</p>

<p>lein-test-refresh now has built-in functionality that allows you to focus your test scope without restarting the Leiningen test process. If lein-test-refresh sees a <code>deftest</code> or <code>ns</code> form marked with <code>:test-refresh/focus true</code> in its metadata, then it will only run tests marked with <code>:test-refresh/focus</code>.</p>

<p>Below is an example of what this looks like.</p>

<pre><code class="clojure">(deftest ^:test-refresh/focus test-addition
  (is (= 2 (+ 1 1))))
</code></pre>

<p>This functionality has only been available for a short period of time and I&rsquo;ve already found it useful. I think you will too. Enjoy.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Using lein-test-refresh with expectations]]></title>
    <link href="https://jakemccrary.com/blog/2017/02/27/using-lein-test-refresh-with-expectations/"/>
    <updated>2017-02-27T09:19:00-06:00</updated>
    <id>https://jakemccrary.com/blog/2017/02/27/using-lein-test-refresh-with-expectations</id>
    <content type="html"><![CDATA[<p>The 2.2.0 release<sup id="fnref:1"><a href="#fn:1" rel="footnote">1</a></sup>
of
<a href="https://github.com/clojure-expectations/expectations/blob/master/CHANGELOG.md#changes-in-version-220">expectations</a> adds
a
<code>clojure.test</code>
<a href="https://clojure-expectations.github.io/clojure-test.html">compatible syntax</a>. The release
adds the <code>defexpect</code> macro which forces you to name your test but then
generates code that is compatible with <code>clojure.test</code>.</p>

<p>Why would you want this? Because <code>clojure.test</code> is the built-in
testing library for Clojure, an entire ecosystem has been built around
it. Tool support for <code>clojure.test</code> is always going to be ahead of
support for the original <code>expectations</code>. By using the new
<code>clojure.test</code> compatible syntax, <code>expectations</code> can take
advantage of all the tools built for <code>clojure.test</code>.</p>

<h3>Using lein-test-refresh with expectations</h3>

<p>If you move to the new <code>clojure.test</code> compatible syntax, you can start
using
<a href="https://github.com/jakemcc/lein-test-refresh">lein-test-refresh</a> to
automatically rerun your tests when your code
changes. <code>lein-test-refresh</code> is a fork of the original expectations autorunner, <a href="https://github.com/clojure-expectations/lein-autoexpect">lein-autoexpect</a>, but it has grown to have more features than its original inspiration. Now you can use it with <code>expectations</code><sup id="fnref:2"><a href="#fn:2" rel="footnote">2</a></sup>.</p>

<p>Below is a sample <code>project.clj</code> that uses <code>lein-test-refresh</code> with the latest expectations.</p>

<pre><code class="clojure">(defproject expectations-project "0.1.0-SNAPSHOT"
  :description "Sample project using expectations"
  :dependencies [[org.clojure/clojure "1.8.0"]]
  :plugins [[com.jakemccrary/lein-test-refresh  "0.18.1"]]
  :profiles {:dev {:dependencies [[expectations "2.2.0-beta1"]]}})
</code></pre>

<p>Here is an example test file.</p>

<pre><code class="clojure">(ns expectations-project.core-test
  (:require [expectations :refer :all]
            [expectations.clojure.test :refer [defexpect]]))

(defexpect two
  2 (+ 1 1))

(defexpect three
  3 (+ 1 1))

(defexpect group
  (expect [1 2] (conj [] 1 5))
  (expect #{1 2} (conj #{} 1 2))
  (expect {1 2} (assoc {} 1 3)))
</code></pre>

<p>And here is the result of running <code>lein test-refresh</code>.</p>

<pre><code>$ lein test-refresh
*********************************************
*************** Running tests ***************
:reloading (expectations-project.core-test)

FAIL in (group) (expectations_project/core_test.clj:11)
expected: [1 2]
  actual: [1 5] from (conj [] 1 5)

FAIL in (group) (expectations_project/core_test.clj:11)
expected: {1 2}
  actual: {1 3} from (assoc {} 1 3)

FAIL in (three) (expectations_project/core_test.clj:8)
expected: 3
  actual: 2 from (+ 1 1)

Ran 3 tests containing 5 assertions.n
3 failures, 0 errors.

Failed 3 of 5 assertions
Finished at 11:53:06.281 (run time: 0.270s)
</code></pre>

<p>After some quick edits to fix the test errors and saving the file, here is the output from the tests re-running.</p>

<pre><code>*********************************************
*************** Running tests ***************
:reloading (expectations-project.core-test)

Ran 3 tests containing 5 assertions.
0 failures, 0 errors.
:reloading ()

Ran 3 tests containing 5 assertions.
0 failures, 0 errors.

Passed all tests
Finished at 11:53:59.045 (run time: 0.013s)
</code></pre>

<p>If you&rsquo;re using <code>expectations</code> and switch to the new
<code>clojure.test</code> compatible syntax, I&rsquo;d encourage you to start
using
<a href="https://github.com/jakemcc/lein-test-refresh">lein-test-refresh</a>.</p>
<div class="footnotes">
<hr/>
<ol>
<li id="fn:1">
<p>As of 2016-02-27 <code>2.2.0</code> isn&rsquo;t out yet, but <code>2.2.0-beta1</code> has been released and has the changes.<a href="#fnref:1" rev="footnote">&#8617;</a></p></li>
<li id="fn:2">
<p>In fact, you have to use it if you use Leiningen and the new syntax and want your tests to run automatically.<a href="#fnref:2" rev="footnote">&#8617;</a></p></li>
</ol>
</div>

]]></content>
  </entry>
  
</feed>
