<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Jake McCrary]]></title>
  <link href="https://jakemccrary.com/atom.xml" rel="self"/>
  <link href="https://jakemccrary.com/"/>
  <updated>2020-02-25T21:19:12-06:00</updated>
  <id>https://jakemccrary.com/</id>
  <author>
    <name><![CDATA[Jake McCrary]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Auto-syncing a git repository]]></title>
    <link href="https://jakemccrary.com/blog/2020/02/25/auto-syncing-a-git-repository/"/>
    <updated>2020-02-25T21:09:00-06:00</updated>
    <id>https://jakemccrary.com/blog/2020/02/25/auto-syncing-a-git-repository</id>
    <content type="html"><![CDATA[<p>I&rsquo;m currently keep notes on my computer using plain text and <a href="https://orgmode.org/">Org mode</a>.</p>

<p>I keep my notes in a git repository in my home directory, <code>~/org/</code>.
I want my notes to be synced between my computers without me thinking about it.
Historically, I&rsquo;ve reached for something like Google Drive or Dropbox to do this but this time I reached for git and GitHub.</p>

<p>Below is the script that I ended up cobbling together from various sources found online.
The script pushes and pulls changes from a remote repository and works on my macOS and linux machines.</p>

<p>The loop starting on line 38 does the work.
Whenever a file-watcher notices a change or 10 minutes passes, the loop pulls changes from a remote repository, commits any local changes, and pushes to the remote repository.
The lines before this are mostly checking that needed programs exist on the host.</p>

<p>I keep this running in a background terminal and I check periodically to confirm it is still running.
I could do something fancier but this isn&rsquo;t a critical system and the overhead of checking every couple days is nearly zero.
Most of the time checking happens by accident when I accidentally maximize the terminal that runs the script.</p>

<p>I&rsquo;ve been using this script for a long time now and I&rsquo;ve found it quite useful. I hope you do too.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="c">#!/bin/bash</span>
</span><span class='line'>
</span><span class='line'><span class="nb">set</span> -e
</span><span class='line'>
</span><span class='line'><span class="nv">TARGETDIR</span><span class="o">=</span><span class="s2">&quot;$HOME/org/&quot;</span>
</span><span class='line'>
</span><span class='line'>stderr <span class="o">()</span> <span class="o">{</span>
</span><span class='line'>    <span class="nb">echo</span> <span class="s2">&quot;$1&quot;</span> &gt;<span class="p">&amp;</span>2
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'>is_command<span class="o">()</span> <span class="o">{</span>
</span><span class='line'>    <span class="nb">command</span> -v <span class="s2">&quot;$1&quot;</span> <span class="p">&amp;</span>&gt;/dev/null
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">if</span> <span class="o">[</span> <span class="s2">&quot;$(uname)&quot;</span> !<span class="o">=</span> <span class="s2">&quot;Darwin&quot;</span> <span class="o">]</span><span class="p">;</span> <span class="k">then</span>
</span><span class='line'>    <span class="nv">INW</span><span class="o">=</span><span class="s2">&quot;inotifywait&quot;</span><span class="p">;</span>
</span><span class='line'>    <span class="nv">EVENTS</span><span class="o">=</span><span class="s2">&quot;close_write,move,delete,create&quot;</span><span class="p">;</span>
</span><span class='line'>    <span class="nv">INCOMMAND</span><span class="o">=</span><span class="s2">&quot;\&quot;$INW\&quot; -qr -e \&quot;$EVENTS\&quot; --exclude \&quot;\.git\&quot; \&quot;$TARGETDIR\&quot;&quot;</span>
</span><span class='line'><span class="k">else</span> <span class="c"># if Mac, use fswatch</span>
</span><span class='line'>    <span class="nv">INW</span><span class="o">=</span><span class="s2">&quot;fswatch&quot;</span><span class="p">;</span>
</span><span class='line'>    <span class="c"># default events specified via a mask, see</span>
</span><span class='line'>    <span class="c"># https://emcrisostomo.github.io/fswatch/doc/1.14.0/fswatch.html/Invoking-fswatch.html#Numeric-Event-Flags</span>
</span><span class='line'>    <span class="c"># default of 414 = MovedTo + MovedFrom + Renamed + Removed + Updated + Created</span>
</span><span class='line'>    <span class="c">#                = 256 + 128+ 16 + 8 + 4 + 2</span>
</span><span class='line'>    <span class="nv">EVENTS</span><span class="o">=</span><span class="s2">&quot;--event=414&quot;</span>
</span><span class='line'>    <span class="nv">INCOMMAND</span><span class="o">=</span><span class="s2">&quot;\&quot;$INW\&quot; --recursive \&quot;$EVENTS\&quot; --exclude \&quot;\.git\&quot; --one-event \&quot;$TARGETDIR\&quot;&quot;</span>
</span><span class='line'><span class="k">fi</span>
</span><span class='line'>
</span><span class='line'><span class="k">for</span> cmd in <span class="s2">&quot;git&quot;</span> <span class="s2">&quot;$INW&quot;</span> <span class="s2">&quot;timeout&quot;</span><span class="p">;</span> <span class="k">do</span>
</span><span class='line'>    <span class="c"># in OSX: `timeout` =&gt; brew install coreutils</span>
</span><span class='line'>    <span class="c"># in OSX: `fswatch` =&gt; brew install fswatch</span>
</span><span class='line'>    is_command <span class="s2">&quot;$cmd&quot;</span> <span class="o">||</span> <span class="o">{</span> stderr <span class="s2">&quot;Error: Required command &#39;$cmd&#39; not found&quot;</span><span class="p">;</span> <span class="nb">exit </span>1<span class="p">;</span> <span class="o">}</span>
</span><span class='line'><span class="k">done</span>
</span><span class='line'>
</span><span class='line'><span class="nb">cd</span> <span class="s2">&quot;$TARGETDIR&quot;</span>
</span><span class='line'><span class="nb">echo</span> <span class="s2">&quot;$INCOMMAND&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="k">while</span> <span class="nb">true</span><span class="p">;</span> <span class="k">do</span>
</span><span class='line'>    <span class="nb">eval</span> <span class="s2">&quot;timeout 600 $INCOMMAND&quot;</span> <span class="o">||</span> <span class="nb">true</span>
</span><span class='line'><span class="nb">    </span>git pull
</span><span class='line'>    sleep 5
</span><span class='line'>    <span class="nv">STATUS</span><span class="o">=</span><span class="k">$(</span>git status -s<span class="k">)</span>
</span><span class='line'>    <span class="k">if</span> <span class="o">[</span> -n <span class="s2">&quot;$STATUS&quot;</span> <span class="o">]</span><span class="p">;</span> <span class="k">then</span>
</span><span class='line'>        <span class="nb">echo</span> <span class="s2">&quot;$STATUS&quot;</span>
</span><span class='line'>        <span class="nb">echo</span> <span class="s2">&quot;commit!&quot;</span>
</span><span class='line'>        git add .
</span><span class='line'>        git commit -m <span class="s2">&quot;autocommit&quot;</span>
</span><span class='line'>        git push origin
</span><span class='line'>    <span class="k">fi</span>
</span><span class='line'><span class="k">done</span>
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Reading in 2019]]></title>
    <link href="https://jakemccrary.com/blog/2020/01/11/reading-in-2019/"/>
    <updated>2020-01-11T12:32:00-06:00</updated>
    <id>https://jakemccrary.com/blog/2020/01/11/reading-in-2019</id>
    <content type="html"><![CDATA[<p>At the beginning of every year I reflect on the previous year of reading.
I take a look at my records, fix errors, and think about reading goals for the upcoming year.</p>

<p>Here are links to my previous end-of-year reflections: <a href="https://jakemccrary.com/blog/2014/01/01/using-incanter-to-review-my-2013-reading/">2013</a>, <a href="https://jakemccrary.com/blog/2015/01/08/reading-in-2014/">2014</a>, <a href="https://jakemccrary.com/blog/2016/03/13/reading-in-2015/">2015</a>, <a href="https://jakemccrary.com/blog/2017/01/04/reading-in-2016/">2016</a>, <a href="https://jakemccrary.com/blog/2018/03/03/reading-in-2017/">2017</a>, and <a href="https://jakemccrary.com/blog/2019/01/21/reading-in-2018/">2018</a>.</p>

<p>I&rsquo;ve continued to keep track of my reading using <a href="http://goodreads.com">Goodreads</a>.
My <a href="https://www.goodreads.com/user/show/3431614-jake-mccrary">profile</a> has nearly the full list of the books I&rsquo;ve read since 2010.
<a href="https://www.goodreads.com/review/list/3431614-jake-mccrary?shelf=read_2019">This</a> is my 2019.</p>

<h2>2019 Goal</h2>

<blockquote><p>I have a stack of software and process books and I&rsquo;d like to read through at least some of them (others are more reference books). I&rsquo;m also going to bring over the 2018 goal of reading at least one book on writing. In a more general sense, I&rsquo;m hoping to put some practices together that help me gain more from the books I&rsquo;m reading. I&rsquo;m still thinking through what that means. - Me last year</p></blockquote>

<p>That was my goal for 2019.
In list form it looks like this:</p>

<ol>
<li>Read some software or process books</li>
<li>Read at least one book on writing</li>
<li>Try to develop practices for getting more from books I&rsquo;ve read</li>
</ol>


<p>I read eight books related to the first goal and two (or three if I count an iffy one) related to the second.
That is enough where I feel pretty good about claiming I accomplished the first two goals.</p>

<p>I mostly failed on the third goal.
I was more aggressive about highlighting notes in my Kindle and I did occasionally look back at them.
Beyond that I didn&rsquo;t do anything.</p>

<h2>Highlights</h2>

<p>Here are my five star books from 2019.
The titles are affiliate links to Amazon, so if you click one of those and make a purchase I get a small kickback<sup id="fnref:1"><a href="#fn:1" rel="footnote">1</a></sup>.</p>

<ul>
<li><a href="https://amzn.to/2QFelCv">Accelerate: Building and Scaling High-Performing Technology Organizations by Nicole Forsgren, Jez Humble, and Gene Kim</a> (<a href="https://www.goodreads.com/review/show/2411886698">my review</a>)</li>
<li><a href="https://amzn.to/39BjDHx">Elements of Clojure by Zachary Tellman</a> (<a href="https://www.goodreads.com/review/show/2684688658">my review</a>)</li>
<li><a href="https://amzn.to/2FdqV6n">A Tour of C++ by Bjarne Stroustrup</a> (<a href="https://www.goodreads.com/review/show/2822201641">my review</a>)</li>
<li><a href="https://amzn.to/2N5mLSL">Developer Hegemony: The Future of Labor</a> (<a href="https://www.goodreads.com/review/show/2795008954">my review</a>)</li>
<li><a href="https://amzn.to/2MPwOed">Digital Minimalism: Choosing a Focused Life in a Noisy World by Cal Newport</a></li>
<li><a href="https://amzn.to/2QGW1Ja">Effective Java by Joshua Bloch</a> (<a href="https://www.goodreads.com/review/show/2701581699">my review</a>)</li>
<li><a href="https://amzn.to/2rOgd3g">21 Lessons for the 21st Century by Yuval Noah Harari</a> (<a href="https://www.goodreads.com/review/show/2562286276">my review</a>)</li>
<li><a href="https://amzn.to/2toADQZ">Draft No. 4: On the Writing Process by John McPhee</a> (<a href="https://www.goodreads.com/review/show/2300752363">my review</a>)</li>
<li><a href="https://amzn.to/2MPuAeO">The Push: A Climber&rsquo;s Journey of Endurance, Risk and Going Beyond Limits by Tommy Caldwell</a> (<a href="https://www.goodreads.com/review/show/2200390288">my review</a>)</li>
<li><a href="https://amzn.to/2rONP0V">The Nickel Boys by Colson Whitehead</a></li>
<li><a href="https://amzn.to/37sUGMK">The Great Believers by Rebecca Makkai</a> (<a href="https://www.goodreads.com/review/show/3020415147">my review</a>)</li>
<li><a href="https://amzn.to/2tr2eRi">The Bonfire of the Vanities by Tom Wolfe</a> (<a href="https://www.goodreads.com/review/show/2847590304">my review</a>)</li>
<li><a href="https://amzn.to/2tljYOf">The Paper Menagerie and Other Stories by Ken Liu</a> (<a href="https://www.goodreads.com/review/show/1827462108">my review</a>)</li>
<li><a href="https://amzn.to/36kyAvO">Exhalation: Stories by Ted Chiang</a> (<a href="https://www.goodreads.com/review/show/2804306157">my review</a>)</li>
<li><a href="https://amzn.to/36lAZGn">Golden Son (Red Rising, #2) by Pierce Brown</a></li>
<li><a href="https://amzn.to/2ZLAdjz">Morning Star (Red Rising Saga, #3) by Pierce Brown</a></li>
<li><a href="https://amzn.to/36fNKlU">Iron Gold (Red Rising Saga, #4) by Pierce Brown</a> (<a href="https://www.goodreads.com/review/show/2760320870">my review</a>)</li>
<li><a href="https://amzn.to/36mab95">Dark Age (Red Rising Saga #5) by Pierce Brown</a></li>
<li><a href="https://amzn.to/2MPkjQ1">Animal Farm by George Orwell</a> (<a href="https://www.goodreads.com/review/show/2811868686">my review</a>)</li>
</ul>


<h4>Accelerate: Building and Scaling High-Performing Technology Organizations by Nicole Forsgren, Jez Humble, and Gene Kim</h4>

<p>This is a stellar book on practices of technology organizations that help build high performing companies.
If you work at a company that produces software in any capacity, I&rsquo;d highly recommend this book.
This is a book that I&rsquo;ve recommended to any coworker looking, and some not looking, for book recommendations.</p>

<h4>Elements of Clojure by Zachary Tellman</h4>

<p>This book has Clojure in the title but it is applicable to more than that language.
The book was published a section at a time and as a result I&rsquo;ve read parts of it many times.
The content clearly shows that Zach has put a lot of thought into the topic.</p>

<h4>A Tour of C++ by Bjarne Stroustrup</h4>

<p>I&rsquo;ve written C++ off and on since I started programming nearly 20 years ago.
Over those years, I&rsquo;ve seen C++ transform as new versions were released.
Earlier in 2019, I was starting to write C++ again and this book was recommended by a coworker.
I had last written C++ back in 2013 and this book was a perfect way to refresh my stuck in early 2013 knowledge.
There is no fluff in this book and it is full of useful information.</p>

<h4>Developer Hegemony: The Future of Labor</h4>

<p>This is a tough read.
It isn&rsquo;t tough because of difficult writing.
It is tough because it makes you depressed until you power through and reach the end.</p>

<p>This book delivers a very cynical look at corporations.
It provides guidelines for getting ahead and climbing the corporate ladder.</p>

<p>Then the book promotes an alternative approach, that of doing your own thing and going independent.
It makes a good case of it.</p>

<p>Beware of this one, it might make you question what you are doing with your career and life.</p>

<h4>Digital Minimalism: Choosing a Focused Life in a Noisy World by Cal Newport</h4>

<p>There is a common theme of awareness throughout many of the books I read and this book hits that theme.
This book can help you become a more thoughtful user of technology.
There are many useful recommendations in this book.
One of them is the suggestion that you can use social media and other technology differently than how the creators want you to use it.
In 2019 I wrote about how I use <a href="https://jakemccrary.com/blog/2019/04/30/how-i-use-social-media/">social media</a> which shows how I apply this idea.</p>

<h4>Effective Java by Joshua Bloch</h4>

<p>I&rsquo;ve read earlier editions in the past and decided to read the latest edition when it seemed like I&rsquo;d be writing Java again.
This book is still good and a must read if you work with Java.</p>

<h4>21 Lessons for the 21st Century by Yuval Noah Harari</h4>

<p>This book covers a lot of ground.</p>

<p>Here is a quote from my friend <a href="https://twitter.com/deobald">Steven Deobald</a> about this book.</p>

<blockquote><p>Through stories and anecdotes woven into his almost unbelievably extensive research as a historian, &ldquo;21 Lessons&rdquo; is perhaps as entertaining and insightful as any other book I&rsquo;ve read. It is accessible to anyone and the ideas presented regarding the fate of our species are stitched together beautifully. The arc of the 21 chapters has a progressive, almost orchestral, quality to it. Each chapter builds on all those which precede it and although some chapters have surprisingly variable writing styles, none feels like Harari is attempting to showboat or to force his medium into the overly artistic.</p></blockquote>

<h4>Draft No. 4: On the Writing Process by John McPhee</h4>

<p>This was a pleasure to read.
I like reading books about writing and this is a good one that talks about McPhee&rsquo;s approach towards creative non-fiction.</p>

<h4>The Push: A Climber&rsquo;s Journey of Endurance, Risk and Going Beyond Limits by Tommy Caldwell</h4>

<p>What can I say?
I&rsquo;m a sucker for books on climbing and learning more about the icons of the sport I love.
If you&rsquo;ve watched the movie <a href="https://www.imdb.com/title/tt7286916/">The Dawn Wall</a> then some of this will be familiar to you.</p>

<h4>The Nickel Boys by Colson Whitehead</h4>

<p>This is a great book.
Go read the <a href="https://www.goodreads.com/book/show/42270835-the-nickel-boys">Goodreads</a> page and pick it up.</p>

<h4>The Great Believers by Rebecca Makkai</h4>

<p>A friend of mine gave me a copy of this book and I&rsquo;m glad she did.
It tells the story of the AIDs epidemic in Chicago.
This is a great piece of writing.
I&rsquo;m not surprised at all that it has won many awards.</p>

<h4>The Bonfire of the Vanities by Tom Wolfe</h4>

<p>This book is great.
The satire just drips off the pages.
There are passages in this book where you can just <em>feel</em> the anxiety of the characters.</p>

<p>Every character is despicable and it is wonderful.</p>

<h4>The Paper Menagerie and Other Stories by Ken Liu</h4>

<p>This was my second time reading this book.
It is an excellent collection of short stories.</p>

<p>The first time I read this book, in <a href="https://jakemccrary.com/blog/2017/01/04/reading-in-2016/">2016</a>, I read the stories in order.
This time I took advantage of the Kindle&rsquo;s estimate of how long a chapter would take and I jumped around, picking out stories that fit how long I wanted to read.
Both ways of reading this collection were excellent.</p>

<h4>Exhalation: Stories by Ted Chiang</h4>

<p>I absolutely loved Ted Chiang&rsquo;s <em>Stories of Your Life and Others</em> and was excited when this collection of stories was published.
I had high hopes for this collection and I was not disappointed.</p>

<p>Some of the stories I had read prior to them being included in this collection but that didn&rsquo;t matter.
I enjoyed reading the new stories and revisiting the previously published ones.</p>

<blockquote><p>We don’t normally think of it as such, but writing is a technology, which means that a literate person is someone whose thought processes are technologically mediated. We became cognitive cyborgs as soon as we became fluent readers, and the consequences of that were profound.</p></blockquote>

<p>That is a quote from a story in this collection.
It felt right to include it in an article about reading.</p>

<h4>Golden Son, Morning Star, Iron Gold, and Dark Age by Pierce Brown</h4>

<p>The four titles above are books two through five in Pierce Brown&rsquo;s <em>Red Rising</em> saga.
I also read the first book in the series, Red Rising, in 2019 but it only earned a four star rating from me.
I obviously enjoyed this series and devoured it.</p>

<p>The books tell the story of a world full of inequality.
The world created is full of interesting characters and dilemmas.</p>

<h4>Animal Farm by George Orwell</h4>

<p>This was either my second or third time reading Animal Farm.
It is still good.
Reading it in 2019 and mapping in book behavior to the modern political climate was interesting.</p>

<h3>Non-Five Star highlights</h3>

<ul>
<li><a href="https://amzn.to/2QFFkz5">Irresistible: The Rise of Addictive Technology and the Business of Keeping Us Hooked by Adam Alter</a> (<a href="https://www.goodreads.com/review/show/1966643946">my review</a>)</li>
<li><a href="https://amzn.to/2FDh9e1">Permanent Record by Edward Snowden</a> (<a href="https://www.goodreads.com/review/show/2983575511">my review</a>)</li>
<li><a href="https://amzn.to/2N9YYRC">Atonement by Ian McEwan</a> (<a href="https://www.goodreads.com/review/show/1697924044">my review</a>)</li>
<li><a href="https://amzn.to/2sRX9Sp">I Hear You by Michael S. Sorensen</a> (<a href="https://www.goodreads.com/review/show/2923747300">my review</a>)</li>
<li><a href="https://amzn.to/2t64fCF">Recursion by Blake Crouch</a> (<a href="https://www.goodreads.com/review/show/2923743967">my review</a>)</li>
<li><a href="https://amzn.to/2NedZBE">Version Control by Dexter Palmer</a> (<a href="https://www.goodreads.com/review/show/1827462266">my review</a>)</li>
</ul>


<h4>Irresistible: The Rise of Addictive Technology and the Business of Keeping Us Hooked by Adam Alter</h4>

<p>Yet another book that is at least somewhat about awareness.
This book talks about behavioral addiction but not just addictive technology.</p>

<p>Is it the single book out of the handful of books I&rsquo;ve read in this space that I&rsquo;d recommend?
No, but it is a good addition to my collection on the topic.</p>

<h4>Permanent Record by Edward Snowden</h4>

<p>I consider myself fairly knowledgeable about Snowden and what he did but I still learned more through this book.
One part I particularly enjoyed was Snowden reflecting on what has changed since his actions.</p>

<p>Another part I particularly enjoyed was Snowden&rsquo;s telling of the early Internet.
This was an Internet where identities online weren&rsquo;t necessarily tied to a real one.
I&rsquo;m approximately the same age as Snowden and had similar experiences with being a young person during the early Internet days.
It was interesting to be reminded of that time while reading this book.</p>

<p>I <a href="https://www.goodreads.com/notes/49833241-permanent-record/3431614-jake-mccrary?ref=bsop">highlighted</a> a lot of passages and there are probably more I should have highlighted.</p>

<h4>Atonement by Ian McEwan</h4>

<p>This book was so close to being five stars.
I started reading this book because I mistook the title for that of a science fiction book I&rsquo;ve been intending to read.
I&rsquo;m glad I did.</p>

<p>It took me a little while to get into the book but once I did I was hooked.</p>

<p><a href="https://www.goodreads.com/review/show/1697596771?book_show_action=false">Here</a> is a review from one of my friends that captures some of what I felt about this book.</p>

<h4>I Hear You by Michael S. Sorensen</h4>

<p>It provides some guidance towards being a more validating person.
The book is short and to the point.
I&rsquo;ve managed to take some of its advice and I think it has been useful.</p>

<h4>Recursion by Blake Crouch</h4>

<p>This was really good.
It is action packed and an interesting concept.</p>

<h4>Version Control by Dexter Palmer</h4>

<p>I really enjoy this book.
It tells the story of a relationship with bits of science fiction.
I really enjoyed my friend <a href="https://www.goodreads.com/review/show/2240581079?book_show_action=false">Dan&rsquo;s</a> review.</p>

<h2>Stats</h2>

<p>The page count numbers for 2019 books are a bit screwed up so I&rsquo;m only doing a books per month graph this year.</p>

<p><img src="https://jakemccrary.com/images/reading-by-month-2019.svg" title="Number of books in each month" alt="Book and pages count by month" /></p>

<p>Unsurprisingly, electronic books continue to be the dominate format.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>|           | 2019 | 2018 | 2017 | 2016 | 2015 |
</span><span class='line'>|-----------+------+------+------+------+------|
</span><span class='line'>| ebook     |   43 |   37 |   37 |   56 |   47 |
</span><span class='line'>| hardcover |    1 |    1 |    7 |    0 |    1 |
</span><span class='line'>| paperback |    7 |    5 |    5 |    3 |    3 |</span></code></pre></td></tr></table></div></figure>


<p>This year I read a noticeably higher amount of non-fiction books than in 2018.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>|             | 2019 | 2018 |
</span><span class='line'>|-------------+------+------|
</span><span class='line'>| fiction     |   28 |   29 |
</span><span class='line'>| non-fiction |   23 |   14 |</span></code></pre></td></tr></table></div></figure>


<h2>2020 Goals</h2>

<p>I was encouraged by how many non-fiction books I read this year and how many of them ended up earning a five star rating.
I&rsquo;d like to continue that trend of reading high-quality non-fiction books.</p>

<p>I&rsquo;ve also been reading a lot of books but I haven&rsquo;t always been the best at trying to consciously apply the lessons from those books.
I&rsquo;m going to try to improve that this year.</p>

<p>Those are pretty fuzzy goals but I&rsquo;m alright with that.</p>
<div class="footnotes">
<hr/>
<ol>
<li id="fn:1">
<p>I&rsquo;m not really sure why I bother doing this. I&rsquo;d write these posts without this incentive and I think my lifetime earnings are maybe in the double digits.<a href="#fnref:1" rev="footnote">&#8617;</a></p></li>
</ol>
</div>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Building an Atreus keyboard]]></title>
    <link href="https://jakemccrary.com/blog/2019/10/12/building-an-atreus-keyboard/"/>
    <updated>2019-10-12T15:43:00-05:00</updated>
    <id>https://jakemccrary.com/blog/2019/10/12/building-an-atreus-keyboard</id>
    <content type="html"><![CDATA[<p>I recently built an <a href="https://atreus.technomancy.us">Atreus keyboard</a>.
This keyboard is an extremely small keyboard with only 42 keys.
Below is the photo of my result.</p>

<p><img src="https://jakemccrary.com/images/atreus/atreus-done.jpg" alt="My completed Atreus keyboard" /></p>

<p>As you can see, it has a split layout and the keys are aligned vertically and staggered.
Thanks to using Ergodox keyboards since 2014, I&rsquo;m very used to this key layout and find it superior to traditional keyboards.</p>

<p>The keyboard is very small.
To give you an idea of how small it is, here is a photo of it next to one of my Ergodox keyboards and with a bit of my fingers in the shot.</p>

<p><img src="https://jakemccrary.com/images/atreus/atreus-with-ergodox.jpg" alt="Atreus size comparison" /></p>

<p>Building the keyboard was pretty straight forward.
The included instructions are thorough and include plenty of photos.
All of the components are through-hole so the soldering is not difficult.
This would be a good first keyboard project.</p>

<p>I already had USB cable, key switches, key caps, and a micro-controller so I purchased the partial kit from Phil.
It came with everything else, except for something to coat the wood, that you need to build the keyboard.
I wanted to connect the keyboard to USB C ports, so I used a <a href="https://amzn.to/2IJqItO">micro to USB C cable</a>.</p>

<p>I enjoyed the color of the laser cut wood and appreciated the burn marks.
I didn&rsquo;t want to lose the color or burns so I coated the wood with a water based clear polyurethane with a satin finish.
This was probably the most difficult part of the build, and it was pretty easy, simply because I lack experience finishing wood.</p>

<p>When reading other build logs I noticed that someone else put a zip tie on their USB cable to help prevent it from tugging on the micro-controller.
I have no idea how helpful this is but it seemed like a good thing to do so I also did it.
To do this you basically just wrap the cable with a zip tie and cram it against the case so that the zip tie prevents tugging on the micro-controller.
You can see it in the picture below.</p>

<p><img src="https://jakemccrary.com/images/atreus/atreus-inside-zip-tie.jpg" alt="My completed Atreus keyboard" /></p>

<p>I&rsquo;ve only been typing on the keyboard for basically this blog post but I&rsquo;ve already found myself adapting to it pretty quickly.
I don&rsquo;t intend for it to replace my Ergodox for normal usage but I think it will be a great portable keyboard.</p>

<p>Overall it was a fun project and I&rsquo;m glad I did it.
I look forward to customizing the firmware to make the key layout fit my usage.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Building a Onewheel stand]]></title>
    <link href="https://jakemccrary.com/blog/2019/08/23/building-a-onewheel-stand/"/>
    <updated>2019-08-23T20:34:00-05:00</updated>
    <id>https://jakemccrary.com/blog/2019/08/23/building-a-onewheel-stand</id>
    <content type="html"><![CDATA[<p>I&rsquo;ve owned a <a href="https://onewheel.com/products/xr">Onewheel XR</a> for about a year now. It is a one-wheeled electric skateboard-like device that is super fun for zipping around Chicago.</p>

<p>When I first got it, I purchased a <a href="https://amzn.to/31Z39Ez">small guitar stand</a>. It worked but it was always a bit finicky and I was never satisfied with it. I had to sit the Onewheel on it just right to have it stay on it without causing the legs of the stand to spread too wide.</p>

<p>This resulted in me buying a <a href="https://amzn.to/2NrrGOI">second guitar stand</a> and trying that out. This one was even worse.</p>

<p>I grew frustrated with these non-purpose built stands and started looking into purchasing a Onewheel stand. There are plenty of beautiful stands out there, both officially from <a href="https://onewheel.com/collections/onewheel-xr-accessories/products/onewheel-deep-shack-rack">Future Motion</a> and from third party vendors like <a href="https://float-supply.com/product-category/stands/">The Float Life</a>.</p>

<p>Then I remembered that my old coworker, Tom Marsh, built his own and put the <a href="https://www.thingiverse.com/thing:3682716">plans online</a>. This inspired me to go the DIY route.</p>

<p>I thought that a stand made out of pipe would look pretty good and be easy to construct. It also gave me a good excuse to ride my Onewheel to Home Depot.</p>

<p>I explored the plumbing section of Home Depot and bought a variety of pipe and pipe fittings and took them back home to experiment with putting them together.</p>

<p>I ended up building the stand below.</p>

<p><img src="https://jakemccrary.com/images/onewheel-pipe-stand.jpg" title="Onewheel pipe stand" alt="onewheel pipe stand" /></p>

<p><img src="https://jakemccrary.com/images/onewheel-in-pipe-stand.png" title="Onewheel in pipe stand" alt="onewheel in pipe stand" /></p>

<p>I think the above stand looks great and it was easy to build.</p>

<p>Here is the part list:</p>

<ul>
<li>2 &frac12; inch x 8 inch nipple</li>
<li>1 &frac12; inch x 6 inch nipple</li>
<li>2 &frac12; inch x 3 inch nipple</li>
<li>2 &frac12; inch 90 degree elbow</li>
<li>2 &frac12; inch 3-way side outlet</li>
<li>2 &frac12; inch cap</li>
</ul>


<p>I washed off the black coating using Goo Gone and then assembled the stand. This ups the risk of rust but I think that might actually look cool so I&rsquo;m not too worried about it. You could optionally coat the pipes for some protection.</p>

<p>Once you have the parts the assembly is very straight forward. The only additional work I might do is to put some rubber feet on the bottom to prevent scratches to my floor.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Switching my Ergodox to QMK firmware]]></title>
    <link href="https://jakemccrary.com/blog/2019/08/15/switching-my-ergodox-to-qmk-firmware/"/>
    <updated>2019-08-15T19:07:00-05:00</updated>
    <id>https://jakemccrary.com/blog/2019/08/15/switching-my-ergodox-to-qmk-firmware</id>
    <content type="html"><![CDATA[<p>Last fall I started to work in an office again. I&rsquo;ve used a hand-built Ergodox for years now and really prefer working on it. This meant I needed another ergodox for the office. Luckily, now you don&rsquo;t have to build your own. I bought an <a href="https://ergodox-ez.com">Ergodox EZ</a><sup id="fnref:1"><a href="#fn:1" rel="footnote">1</a></sup>.</p>

<p>The Ergodox EZ uses the <a href="https://github.com/qmk/qmk_firmware">QMK</a> firmware. This has a lot of fancier options than the firmware I had been using on my hand-built ergodox.</p>

<p>This mostly didn&rsquo;t matter and I just configured the Ergodox EZ to match my original Ergodox&rsquo;s layout. Then I started a new job and found myself programming in Scala using IntelliJ IDEA.</p>

<p>Shockingly, after not using IntelliJ for years, I still remembered many of the keyboard shortcuts. This was great! Unfortunately, in my years since last using IntelliJ, I created some conflicting keyboard shortcuts for managing my window layout. These were mostly shortcuts that involved holding Command + Alt and pushing an arrow key. Luckily, the QMK firmware supports a <em>Meh</em> key.</p>

<p>What is the <em>Meh</em> key? It is a key that presses Control + Alt + Shift all at the same time.</p>

<p>This is great for setting up shortcuts that don&rsquo;t conflict with ones found in most normal programs. This let me <a href="https://github.com/jakemcc/cljs-phoenix/commit/fa2186589d99a4763c7bf79e1f795cb910063a4e">change my window manger</a> shortcuts to use the <em>Meh</em> key and I was then conflict free.</p>

<p>I can&rsquo;t handle having different shortcuts across different machines with the same OS, so I needed to needed to update my original Ergodox to use the QMK firmware so I could also have a <em>Meh</em> key at home. Luckily, the QMK firmware also works on it and, maybe even more luckily, the Ergodox EZ firmware just works with my original Ergodox.</p>

<p>This actually means I can simply take the compiled Ergodox EZ firmware and flash it straight to my Ergodox. Any time I&rsquo;ve done this the keyboard keeps working.</p>

<p>Unfortunately, the LEDs in my original Ergodox are mostly hidden by non-translucent keys. These LEDs indicate when I&rsquo;m not main layer and I find them really useful. I only have a single translucent keycap and would prefer only that LED to be used.</p>

<p>Here are the steps I took to make that change.</p>

<ol>
<li>Use the <a href="https://config.qmk.fm/#/ergodox_ez/LAYOUT_ergodox">graphical QMK Configurator</a> to visually configure my keyboard layout. In the <strong>Keymap Name</strong> field, put <code>jakemcc</code>.</li>
<li>Click the <strong>Compile</strong> button in the above configurator.</li>
<li>Download the full source.</li>
<li>Unzip the source and edit <code>qmk_firmware/keyboards/ergodox_ez/keymaps/jakemcc/keymap.c</code> to include snippet of code below this list.</li>
<li>In <code>qmk_firmware</code> run <code>make ergodox_ez:jakemcc</code>.</li>
<li>Find <code>ergodox_ez_jakemcc.hex</code> and flash my original Ergodox.</li>
</ol>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="kt">uint32_t</span> <span class="nf">layer_state_set_user</span><span class="p">(</span><span class="kt">uint32_t</span> <span class="n">state</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">if</span> <span class="p">(</span><span class="n">biton32</span><span class="p">(</span><span class="n">state</span><span class="p">)</span> <span class="o">==</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">ergodox_right_led_1_off</span><span class="p">();</span>
</span><span class='line'>  <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">ergodox_right_led_1_on</span><span class="p">();</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="k">return</span> <span class="n">state</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>This snippet gets added to the bottom of the <code>keymap.c</code>. It only turns on led 1, which is the one under my translucent key, whenever my keyboard isn&rsquo;t on layer 0.</p>

<p>Now, I can use the fancy <em>Meh</em> key to be conflict free and easily tell when I&rsquo;m not on my main layer. This is wonderful.</p>
<div class="footnotes">
<hr/>
<ol>
<li id="fn:1">
<p>I bought one with Cherry MX Clear switches. I&rsquo;ve since switched them to Cherry MX Browns. The clears were too firm for me. I did not get Cherry MX Blues because I didn&rsquo;t want my fellow coworkers to be annoyed by the glorious clickty-clack of those switches.<a href="#fnref:1" rev="footnote">&#8617;</a></p></li>
</ol>
</div>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[How I use social media]]></title>
    <link href="https://jakemccrary.com/blog/2019/04/30/how-i-use-social-media/"/>
    <updated>2019-04-30T17:50:00-05:00</updated>
    <id>https://jakemccrary.com/blog/2019/04/30/how-i-use-social-media</id>
    <content type="html"><![CDATA[<p>Over the years, I&rsquo;ve read many articles about the negative aspects of social media. You&rsquo;ve probably read articles extolling the benefits of cutting social media out of your life. These articles are abundant and easy to find through a search for <a href="https://www.google.com/search?q=stop+social+media">&ldquo;stop social media&rdquo;</a> or <a href="https://www.google.com/search?q=quit+social+media">&ldquo;quit social media&rdquo;</a>.</p>

<p>Social media hasn&rsquo;t played a significant role in my life for a couple of years. I first started being more mindful of how I consumed social media in 2013. Back then, I temporarily switched to using a <a href="https://en.wikipedia.org/wiki/Feature_phone">feature phone</a> (a non-smart phone) for a month and a half. This really reset my relationship with consuming media on a phone. Since my phone was my primary entry point into Twitter and Facebook, my usage of both plummeted.</p>

<p>Since then, I&rsquo;ve continued to take a careful look at how I use social media and have made tweaks to get maximum enjoyment with minimal downsides. This has involved changing how I use the desktop web applications for both Twitter and Facebook<sup id="fnref:1"><a href="#fn:1" rel="footnote">1</a></sup>.</p>

<p>The following books have helped shape my thinking towards digital distractions. They&rsquo;ve put into words some of the practices I stumbled into. They&rsquo;ve affected how I use smart phones and how I approach social media.</p>

<ul>
<li><a href="https://amzn.to/2UJu1V7">Deep Work</a> by Cal Newport</li>
<li><a href="https://amzn.to/2WfLYMv">Digital Minimalism</a> by Cal Newport</li>
<li><a href="https://amzn.to/2XX6imC">Essentialism</a> by Greg Mckeown</li>
<li><a href="https://amzn.to/2WgdBVR">The Distracted Mind</a> by Adam Gazzaley &amp; Larry D. Rosen</li>
</ul>


<p>One of the ideas in both <em>Digital Minimalism</em> and <em>Essentialism</em> is that you can pick and choose what you add to your life. This extends to individual features of products you use. This is something I arrived at prior to reading these books and it was nice hearing others putting this idea into words.</p>

<p>Below is how I&rsquo;ve chosen to use various social media platforms.</p>

<h2>Twitter</h2>

<p>I only consume Twitter on my computer and I read it through <a href="https://tweetdeck.twitter.com/">Tweetdeck</a>.</p>

<p>I don&rsquo;t check my entire feed. Instead, I have Tweetdeck setup to display a few curated lists of accounts along with mentions and direct messages. One list is composed of close friends, another highlights some people in the software development space, and another contains some Twitter art projects.</p>

<p>Because I focus on a limited number of accounts, I don&rsquo;t have an infinite list to scroll through. This focus keeps Twitter useful to me and allows me to check it every few days and still stay up to date on topics I care about.</p>

<p>I rarely tweet but when I do it is usually to promote my own or another person&rsquo;s writing. I also occasionally tweet as an <a href="https://twitter.com/ErowidBobRoss">art bot</a>.</p>

<h2>Facebook</h2>

<p>I only consume Facebook on my computer and mostly stopped using the website in 2016. The 2016 US presidential election made me realize I didn&rsquo;t find the Facebook news feed useful. It did not add positive value to my life.</p>

<p>That is when I found the <a href="https://chrome.google.com/webstore/detail/news-feed-eradicator-for/fjcldmjmjhkklehbacihaiopjklihlgg?hl=en">News Feed Eradicator</a> Chrome extension. This extension gets rid of the news feed. It is great.</p>

<p>Without the news feed, I no longer open the site and mindlessly scroll through the firehose of updates. I no longer know what is going on in the curated lives of my friends that still use Facebook. That is ok. Now when I run into them in real life, I can catch up and learn about their kids and their lives. I can have an honest reaction to learning that someone got married instead of sort of already knowing it. Someone can tell me about a trip they took and can show me photos I&rsquo;ve never seen before.</p>

<p>I haven&rsquo;t completely deleted my Facebook account because it does add value to my life through a couple of groups and Facebook messenger. Only using these features has reduced the frequency I visit Facebook to once every few days. That is more than enough to keep up with what is going in in the Chicago climbing community and events going on at local climbing gyms.</p>

<p>I rarely post to Facebook but when I do it is often to promote something I&rsquo;ve written.</p>

<h2>Goodreads</h2>

<p>I&rsquo;m not really sure if Goodreads counts as a social media site. I use it to keep track books I want to read and books I&rsquo;ve already read. It isn&rsquo;t something that consumes any amount of my time mindlessly.</p>

<h2>LinkedIn</h2>

<p>I&rsquo;m not sure if you can consider my usage of LinkedIn to be actual usage. It mostly results in email in my inbox that almost immediately gets archived. It does keep me somewhat informed about what job opportunities are out there though recruiter outreach.</p>

<p>I very rarely post anything to LinkedIn.</p>

<h2>Instagram</h2>

<p>I&rsquo;ll completely admit that this is the social media platform that I waste time on. It is the only social media app on my phone and that increases how frequently I use it.</p>

<p>I signed up for Instagram in order to follow tattoo artists. This helped me learn what tattoo styles I enjoyed the most. This was a huge success and now I have a much better appreciation and eye for this art.</p>

<p>Eventually, my usage of Instagram expanded to follow some friends, local Chicago artists, and professional rock climbers. Following each of these groups is slightly beneficial but I&rsquo;m not sure if it is an overall positive impact compared to the temptation to fill downtime with Instagram scrolling.</p>

<p>I&rsquo;m approaching the point of deleting Instagram from my phone and experiencing that.</p>

<p>I post occasionally to Instagram both using the story feature and normal posts. These are usually photos of some street art or stickers put up in Chicago. It is very infrequent.</p>

<h1>End</h1>

<p>So that is how I consume social media. It mostly happens on my computer and I use a subset of features a platform offers. I&rsquo;ve reached a point where I feel like I&rsquo;m getting a lot of the pros without too many of the cons.</p>

<p>It is an area in which I&rsquo;ll keep experimenting. I&rsquo;d encourage you to as well. Try a different usage pattern for an extended period of time and then reflect on your changed behavior. Keep the changes that have made a positive impact.</p>
<div class="footnotes">
<hr/>
<ol>
<li id="fn:1">
<p>Ignoring LinkedIn and Goodreads, I think Facebook and Twitter were the only social media platforms I used back then.<a href="#fnref:1" rev="footnote">&#8617;</a></p></li>
</ol>
</div>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Breaking change and more in lein-test-refresh 0.24.1]]></title>
    <link href="https://jakemccrary.com/blog/2019/03/20/breaking-change-and-more-in-lein-test-refresh-0-dot-24-dot-0/"/>
    <updated>2019-03-20T21:30:00-05:00</updated>
    <id>https://jakemccrary.com/blog/2019/03/20/breaking-change-and-more-in-lein-test-refresh-0-dot-24-dot-0</id>
    <content type="html"><![CDATA[<p>Today I released <a href="https://github.com/jakemcc/lein-test-refresh">lein-test-refresh</a> <code>0.24.1</code><sup id="fnref:1"><a href="#fn:1" rel="footnote">1</a></sup>. I don&rsquo;t always announce new lein-test-refresh versions with an article but this release breaks some existing behavior so I thought it was worth it.</p>

<p>Each of these changes is the direct result of interacting with four different <code>lein-test-refresh</code> users. Some of this took place on GitHub and others through email. Thanks to all of you for taking the time to think about improvements and notice oddities and bring them to my attention.</p>

<h3>Breaking change: Monitoring keystrokes to perform actions</h3>

<p>Prior to this release, if you hit Ctrl-D then STDIN reads an EOF and <code>test-refresh</code> would quit. With version 0.24.1, <code>test-refresh</code> no longer does that. Instead, it stops monitoring for input and just keeps running tests. Since it stops monitoring for input it no longer notices when you hit Enter to cause your tests to rerun. You can still stop <code>lein test-refresh</code> by sending a SIGINT with Ctrl-C.</p>

<p>This change was made because there is some combination of environments where if <code>test-refresh</code> execs <code>/bin/bash</code> then it receives an EOF on STDIN. Before this change, that means <code>test-refresh</code> would quit unexpectedly. Now it will keep going.</p>

<p>Thanks <a href="https://github.com/cloojure">Alan Thompson</a> for bringing this to my attention and taking the time to help diagnose the problem.</p>

<h3>You can supply your own narrowing test selector</h3>

<p>Being able to tell <code>test-refresh</code> to narrow its focus by adding <code>:test-refresh/focus</code> as metadata on a test or namespace has quickly become a favorite feature of many users. Now you can configure a shorter keyword by specifying configuration in your profile. See the <a href="https://github.com/jakemcc/lein-test-refresh/blob/1b5165660d9e40d9394809a95b148ec758a6d56b/sample.project.clj#L61-L65">sample project.clj</a> for how to set this up.</p>

<p>Thanks <a href="https://github.com/metametadata">Yuri Govorushchenko</a> for the suggestion.</p>

<h3>Experimental: Run in a repl</h3>

<p>I&rsquo;ve turned down this feature in the past but a narrower request came up and I thought it seemed useful. <code>test-refresh</code> now exposes a function you can call in a repl to run <code>test-refresh</code> in that repl. This makes the repl useless for any other task. To do this, first add <code>lein-test-refresh</code> as a dependency instead of a plugin to your project.clj. Then, require the namespace and call the function passing in one or more paths to your test directories. Example below.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='clojure'><span class='line'><span class="nv">user=&gt;</span> <span class="p">(</span><span class="nf">require</span> <span class="ss">&#39;com.jakemccrary.test-refresh</span><span class="p">)</span>
</span><span class='line'><span class="nv">nil</span>
</span><span class='line'><span class="nv">user=&gt;</span> <span class="p">(</span><span class="nf">com.jakemccrary.test-refresh/run-in-repl</span> <span class="s">&quot;test&quot;</span><span class="p">)</span>
</span><span class='line'><span class="nv">*********************************************</span>
</span><span class='line'><span class="nv">***************</span> <span class="nv">Running</span> <span class="nv">tests</span> <span class="nv">***************</span>
</span></code></pre></td></tr></table></div></figure>


<p><a href="https://github.com/jakemcc/lein-test-refresh/issues/80">This request</a> was done so that you can run it in Cursive&rsquo;s repl and gain the ability to click on stacktraces. Thanks <a href="https://github.com/klauswuestefeld">Klaus Wuestefeld</a> for bringing this up again with a really solid and focused use case.</p>

<h3>Better output on exceptions while reloading</h3>

<p>This was a <a href="https://github.com/jakemcc/lein-test-refresh/pull/81">pull request</a> from <a href="https://github.com/minhtuannguyen">Minh Tuan Nguyen</a>. Now figuring out where to look for the error will be a little easier.</p>

<h2>Thank you</h2>

<p>Thanks to all the users of lein-test-refresh. I&rsquo;ve found it to be very valuable to the way I work and I&rsquo;m very happy that others do as well.</p>
<div class="footnotes">
<hr/>
<ol>
<li id="fn:1">
<p>This was originally 0.24.0 but that had a bug in it. Sorry about that.<a href="#fnref:1" rev="footnote">&#8617;</a></p></li>
</ol>
</div>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Testing asynchronous JavaScript with Jasmine]]></title>
    <link href="https://jakemccrary.com/blog/2019/02/13/testing-asynchronous-javascript-with-jasmine/"/>
    <updated>2019-02-13T17:46:00-06:00</updated>
    <id>https://jakemccrary.com/blog/2019/02/13/testing-asynchronous-javascript-with-jasmine</id>
    <content type="html"><![CDATA[<p>I was recently adding a feature to an internal web UI that caught all unhandled JavaScript errors and reported them to the backend service. The implementation went smoothly with most of the effort spent figuring out how to test the code that was reporting the errors.</p>

<p>If the error reporting failed, I didn&rsquo;t want to trigger reporting another error or completely lose that error. I decided to log a reporting error to the console. I wanted to write a test showing that errors reporting errors were handled so that a future me, or another developer, didn&rsquo;t accidentally remove this special error handling and enable a never ending cycle of of reporting failed reporting attempts.</p>

<p>It took me a while to figure out how to do this. I searched the web and found various articles about using <a href="https://jasmine.github.io/">Jasmine</a> to do async tests. They were helpful but I also wanted to mock out a function, <code>console.error</code>, and assert that it was called. None of the examples I found were explicit about doing something like this. I forget how many different approaches I tried, but it took a while to figure out the below solution.</p>

<p>Here is the code I wanted to test.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">function</span> <span class="nx">reportEvent</span><span class="p">(</span><span class="nx">event</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">return</span> <span class="nx">fetch</span><span class="p">(</span><span class="s1">&#39;/report-event&#39;</span><span class="p">,</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">method</span><span class="o">:</span> <span class="s1">&#39;POST&#39;</span><span class="p">,</span>
</span><span class='line'>    <span class="nx">headers</span><span class="o">:</span> <span class="p">{</span><span class="s1">&#39;Content-Type&#39;</span><span class="o">:</span> <span class="s1">&#39;application/json&#39;</span><span class="p">},</span>
</span><span class='line'>    <span class="nx">body</span><span class="o">:</span> <span class="nx">JSON</span><span class="p">.</span><span class="nx">stringify</span><span class="p">({</span><span class="nx">name</span><span class="o">:</span> <span class="s1">&#39;ui name&#39;</span><span class="p">,</span> <span class="p">...</span><span class="nx">event</span><span class="p">})</span>
</span><span class='line'>  <span class="p">}).</span><span class="k">catch</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span> <span class="p">{</span> <span class="nx">console</span><span class="p">.</span><span class="nx">error</span><span class="p">(</span><span class="s1">&#39;Problem reporting event:&#39;</span><span class="p">,</span> <span class="nx">e</span><span class="p">)});</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>It takes an incoming <code>event</code> object and merges it with a default value and posts that to the backing service. <code>fetch</code> returns a Promise and the code handles errors by calling <code>catch</code> on it and logging.</p>

<p>Below is what I eventually came up with for testing the error handling feature of <code>reportEvent</code>.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">describe</span><span class="p">(</span><span class="s1">&#39;reporting events&#39;</span><span class="p">,</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">it</span><span class="p">(</span><span class="s1">&#39;logs errors&#39;</span><span class="p">,</span> <span class="p">(</span><span class="nx">done</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">spyOn</span><span class="p">(</span><span class="nx">console</span><span class="p">,</span> <span class="s1">&#39;error&#39;</span><span class="p">).</span><span class="nx">and</span><span class="p">.</span><span class="nx">callFake</span><span class="p">(()</span> <span class="o">=&gt;</span> <span class="p">{</span>
</span><span class='line'>      <span class="nx">expect</span><span class="p">(</span><span class="nx">console</span><span class="p">.</span><span class="nx">error</span><span class="p">).</span><span class="nx">toHaveBeenCalled</span><span class="p">();</span>
</span><span class='line'>      <span class="nx">done</span><span class="p">();</span>
</span><span class='line'>    <span class="p">});</span>
</span><span class='line'>    <span class="nx">spyOn</span><span class="p">(</span><span class="nb">window</span><span class="p">,</span> <span class="s1">&#39;fetch&#39;</span><span class="p">).</span><span class="nx">and</span><span class="p">.</span><span class="nx">returnValue</span><span class="p">(</span><span class="nx">Promise</span><span class="p">.</span><span class="nx">reject</span><span class="p">(</span><span class="s1">&#39;error!&#39;</span><span class="p">));</span>
</span><span class='line'>    <span class="nx">reportEvent</span><span class="p">({</span><span class="nx">level</span><span class="o">:</span> <span class="s1">&#39;WARN&#39;</span><span class="p">,</span> <span class="nx">msg</span><span class="o">:</span> <span class="s1">&#39;ERROR!&#39;</span><span class="p">});</span>
</span><span class='line'>  <span class="p">});</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<p>This uses <code>spyOn</code> to mock out <code>fetch</code> and <code>console.error</code>. The <code>fetch</code> call is told to return a rejected Promise. The <code>console.error</code> spy is a bit more interesting.</p>

<p>The <code>console.error</code> spy is told to call a fake function. That function asserts that the <code>console.error</code> spy has been called. More importantly, it also calls a <code>done</code> function. That <code>done</code> function is a callback passed to your test by Jasmine. Calling <code>done</code> signals that your async work is completed.</p>

<p>If <code>done</code> is never called then Jasmine will fail the test after some amount of time. By calling <code>done</code> in our <code>console.error</code> fake, we&rsquo;re able to signal to Jasmine that we&rsquo;ve handled the rejected promise.</p>

<p>You don&rsquo;t actually need the <code>expect(console.error).toHaveBeenCalled();</code> as <code>done</code> won&rsquo;t be called unless <code>console.error</code> has been called. If you don&rsquo;t have it though then Jasmine will complain there are no assertions in the test.</p>

<p>So there we have it, an example of using some of Jasmine&rsquo;s asynchronous test features with spies. I wish I had found an article like this when I started this task. Hopefully it saves you, and future me, some time.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[How to use Leiningen test selectors to filter by test name]]></title>
    <link href="https://jakemccrary.com/blog/2019/01/28/how-to-use-leiningen-test-selectors-to-filter-by-test-name/"/>
    <updated>2019-01-28T21:27:00-06:00</updated>
    <id>https://jakemccrary.com/blog/2019/01/28/how-to-use-leiningen-test-selectors-to-filter-by-test-name</id>
    <content type="html"><![CDATA[<!-- Estimate: 30 minutes -->


<!-- First draft: 38 minutes -->


<!-- First edit: 13 minutes -->


<!-- Second edit: 8 minutes -->


<p>Leiningen test selectors are great. They allow you to filter what tests run by applying a function to the test&rsquo;s metadata. If that function returns a truthy value then that test will run. <a href="https://github.com/jakemcc/lein-test-refresh/blob/master/CHANGES.md#040">lein-test-refresh</a> supports them and even includes a built in one for its <a href="https://github.com/jakemcc/lein-test-refresh#built-in-test-narrowing-test-selector">focus feature</a>.</p>

<p>I was recently <a href="https://github.com/jakemcc/lein-test-refresh/issues/78">asked</a> if test-refresh could support filtering tests using a regular expression against the name of a namespace or test. Lucky for me, test-refresh already supports this because of its support of test selectors.</p>

<p>Most of the examples of Leiningen test selectors show very simple functions that look for the existence of a keyword in the metadata. We can do more than that. We can write a predicate that does whatever we want with the metadata.</p>

<p>To take a look at a test&rsquo;s metadata, I generated a new project and looked at the generated default test file.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='clojure'><span class='line'><span class="p">(</span><span class="kd">ns </span><span class="nv">selector.core-test</span>
</span><span class='line'>  <span class="p">(</span><span class="ss">:require</span> <span class="p">[</span><span class="nv">clojure.test</span> <span class="ss">:refer</span> <span class="ss">:all</span><span class="p">]</span>
</span><span class='line'>            <span class="p">[</span><span class="nv">selector.core</span> <span class="ss">:refer</span> <span class="ss">:all</span><span class="p">]))</span>
</span><span class='line'>
</span><span class='line'><span class="p">(</span><span class="nf">deftest</span> <span class="nv">a-test</span>
</span><span class='line'>  <span class="p">(</span><span class="nf">testing</span> <span class="s">&quot;FIXME, I fail.&quot;</span>
</span><span class='line'>    <span class="p">(</span><span class="nf">is</span> <span class="p">(</span><span class="nb">= </span><span class="mi">0</span> <span class="mi">1</span><span class="p">))))</span>
</span></code></pre></td></tr></table></div></figure>


<p>I then used my repl and to see what metadata was on the test.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='clojure'><span class='line'><span class="nv">selector.core-test&gt;</span> <span class="p">(</span><span class="nb">meta </span><span class="o">#</span><span class="ss">&#39;a-test</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span><span class="ss">:test</span> <span class="o">#</span><span class="nv">function</span><span class="p">[</span><span class="nv">selector.core-test/fn--17267</span><span class="p">]</span>,
</span><span class='line'> <span class="ss">:line</span> <span class="mi">5</span>,
</span><span class='line'> <span class="ss">:column</span> <span class="mi">1</span>,
</span><span class='line'> <span class="ss">:file</span> <span class="s">&quot;/Users/jake/src/jakemcc/blog-examples/selector/test/selector/core_test.clj&quot;</span>,
</span><span class='line'> <span class="ss">:name</span> <span class="nv">a-test</span>,
</span><span class='line'> <span class="ss">:ns</span> <span class="o">#</span><span class="nv">namespace</span><span class="p">[</span><span class="nv">selector.core-test</span><span class="p">]}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Given the metadata above, I wrote the selector below which lets us select only integration tests.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='clojure'><span class='line'><span class="ss">:test-selectors</span> <span class="p">{</span><span class="ss">:integration</span> <span class="p">(</span><span class="k">fn </span><span class="p">[</span><span class="nv">m</span><span class="p">]</span>
</span><span class='line'>                                <span class="p">(</span><span class="nb">or </span><span class="p">(</span><span class="nf">clojure.string/includes?</span> <span class="p">(</span><span class="nb">str </span><span class="p">(</span><span class="ss">:ns</span> <span class="nv">m</span><span class="p">))</span>
</span><span class='line'>                                                              <span class="s">&quot;integration&quot;</span><span class="p">)</span>
</span><span class='line'>                                    <span class="p">(</span><span class="nf">clojure.string/includes?</span> <span class="p">(</span><span class="nb">str </span><span class="p">(</span><span class="ss">:name</span> <span class="nv">m</span><span class="p">))</span>
</span><span class='line'>                                                              <span class="s">&quot;integration&quot;</span><span class="p">)))}</span>
</span></code></pre></td></tr></table></div></figure>


<p>You could write the above code is many different ways. Whatever you write, it needs to look for the existence of <code>integration</code> in either the test&rsquo;s name or namespace.</p>

<p>If you wanted to make <code>lein test</code> or <code>lein test-refresh</code> only run non-integration tests you can add a default test selector to the project.clj.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='clojure'><span class='line'><span class="ss">:test-selectors</span> <span class="p">{</span><span class="ss">:default</span> <span class="p">(</span><span class="k">fn </span><span class="p">[</span><span class="nv">m</span><span class="p">]</span>
</span><span class='line'>                            <span class="p">(</span><span class="nb">not </span><span class="p">(</span><span class="nb">or </span><span class="p">(</span><span class="nf">clojure.string/includes?</span> <span class="p">(</span><span class="nb">str </span><span class="p">(</span><span class="ss">:ns</span> <span class="nv">m</span><span class="p">))</span>
</span><span class='line'>                                                               <span class="s">&quot;integration&quot;</span><span class="p">)</span>
</span><span class='line'>                                     <span class="p">(</span><span class="nf">clojure.string/includes?</span> <span class="p">(</span><span class="nb">str </span><span class="p">(</span><span class="ss">:name</span> <span class="nv">m</span><span class="p">))</span>
</span><span class='line'>                                                               <span class="s">&quot;integration&quot;</span><span class="p">))))</span>
</span><span class='line'>                 <span class="ss">:integration</span> <span class="p">(</span><span class="k">fn </span><span class="p">[</span><span class="nv">m</span><span class="p">]</span>
</span><span class='line'>                                <span class="p">(</span><span class="nb">or </span><span class="p">(</span><span class="nf">clojure.string/includes?</span> <span class="p">(</span><span class="nb">str </span><span class="p">(</span><span class="ss">:ns</span> <span class="nv">m</span><span class="p">))</span>
</span><span class='line'>                                                              <span class="s">&quot;integration&quot;</span><span class="p">)</span>
</span><span class='line'>                                    <span class="p">(</span><span class="nf">clojure.string/includes?</span> <span class="p">(</span><span class="nb">str </span><span class="p">(</span><span class="ss">:name</span> <span class="nv">m</span><span class="p">))</span>
</span><span class='line'>                                                              <span class="s">&quot;integration&quot;</span><span class="p">)))}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Enjoy! I hope this example helps you run a subset<sup id="fnref:1"><a href="#fn:1" rel="footnote">1</a></sup> of your Clojure tests through Leiningen test selectors.</p>
<div class="footnotes">
<hr/>
<ol>
<li id="fn:1">
<p>Running a subset of your tests can be helpful and test-refresh has a few features that help you do that. If you can, I&rsquo;d still recommend making all your tests fast enough to run them all the time.<a href="#fnref:1" rev="footnote">&#8617;</a></p></li>
</ol>
</div>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[How to display a message to all tmux clients]]></title>
    <link href="https://jakemccrary.com/blog/2019/01/27/how-to-display-a-message-to-all-tmux-clients/"/>
    <updated>2019-01-27T17:03:00-06:00</updated>
    <id>https://jakemccrary.com/blog/2019/01/27/how-to-display-a-message-to-all-tmux-clients</id>
    <content type="html"><![CDATA[<!-- Estimated time: 30 minutes -->


<!-- First Draft: 26 minutes -->


<!-- First edits: 14 minutes -->


<p>Lately, I&rsquo;ve been using <a href="https://github.com/tmux/tmux">tmux</a> a lot. This resulted in me figuring out how to get <a href="https://github.com/jakemcc/lein-test-refresh#notifications">lein-test-refresh</a> to send <a href="https://jakemccrary.com/blog/2019/01/06/notifications-with-tmux-and-lein-test-refresh/">notifications using tmux</a>.</p>

<p>The setup linked above works great for when I&rsquo;m doing work all by myself. It showed a problem when using ssh and tmux to pair with another developer. Instead of both developers receiving a notification, only one did. One is better than none but not ideal.</p>

<p>Below is a GIF showing the problem. Each window simulates a different developer.</p>

<p><img src="https://jakemccrary.com/images/tmux-pair-fail.gif" alt="tmux only showing one developer a notification" /></p>

<p>This wasn&rsquo;t too hard to fix. A little digging through the tmux manpage shows that <code>tmux display-message</code> takes an optional flag telling it which client receives the message. If we can get a list of all the clients then iterating over them and sending a message to each is straightforward.</p>

<p><code>tmux list-clients</code> give us this list. Below is the output.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ tmux list-clients
</span><span class='line'>/dev/ttys002: 0 [78x41 xterm-256color] (utf8)
</span><span class='line'>/dev/ttys006: 0 [78x42 xterm-256color] (utf8)</span></code></pre></td></tr></table></div></figure>


<p>What we care about are the parts that look like <code>/dev/ttys002</code>. At first I used <code>cut</code> to grab these values but then I dug a bit deeper into the <code>tmux</code> manpage.</p>

<p>It turns out that you can specify a format to <code>tmux list-clients</code>. Running <code>tmux list-clients -F "#{client_name}"</code> gives us the output we care about.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ tmux list-clients -F "#{client_name}"
</span><span class='line'>/dev/ttys002
</span><span class='line'>/dev/ttys006</span></code></pre></td></tr></table></div></figure>


<p>We can combine that with <code>xargs</code> to send a message to multiple clients.</p>

<p><img src="https://jakemccrary.com/images/tmux-xargs-example.gif" alt="tmux xargs example" /></p>

<p>That command is a bit much to put into <code>lein-test-refresh</code>&rsquo;s configuration so I shoved it in a script called <code>notify</code> and configured <code>lein-test-refresh</code> to use it. Script and GIF of that below. Now both you and your pair can get notifications.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="c">#!/bin/bash</span>
</span><span class='line'>
</span><span class='line'><span class="nv">USAGE</span><span class="o">=</span><span class="s2">&quot;Usage: notify &lt;message&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="s2">example: notify &#39;Tests passed!&#39;&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="k">if</span> <span class="o">[</span> -z <span class="s2">&quot;$1&quot;</span> <span class="o">]</span><span class="p">;</span> <span class="k">then</span>
</span><span class='line'>    <span class="nb">echo</span> <span class="s2">&quot;$USAGE&quot;</span>
</span><span class='line'>    <span class="nb">exit </span>1
</span><span class='line'><span class="k">fi</span>
</span><span class='line'>
</span><span class='line'><span class="nv">message</span><span class="o">=</span><span class="s2">&quot;$1&quot;</span>
</span><span class='line'>
</span><span class='line'>tmux list-clients -F <span class="s2">&quot;#{client_name}&quot;</span> <span class="se">\</span>
</span><span class='line'>    <span class="p">|</span> xargs -n1 -I<span class="o">{}</span> tmux display-message -c <span class="o">{}</span> <span class="s2">&quot;$message&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p><img src="https://jakemccrary.com/images/tmux-notify-script.gif" alt="Example using notify script" /></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Reading in 2018]]></title>
    <link href="https://jakemccrary.com/blog/2019/01/21/reading-in-2018/"/>
    <updated>2019-01-21T14:29:00-06:00</updated>
    <id>https://jakemccrary.com/blog/2019/01/21/reading-in-2018</id>
    <content type="html"><![CDATA[<p>At the beginning of every year I like to take the time to reflect on my previous year&rsquo;s reading. It gives me a time to correct my data and think about where I want my reading to go in the upcoming year.</p>

<p>Here are links to my previous end-of-year reflections: <a href="https://jakemccrary.com/blog/2014/01/01/using-incanter-to-review-my-2013-reading/">2013</a>, <a href="https://jakemccrary.com/blog/2015/01/08/reading-in-2014/">2014</a>, <a href="https://jakemccrary.com/blog/2016/03/13/reading-in-2015/">2015</a>, <a href="https://jakemccrary.com/blog/2017/01/04/reading-in-2016/">2016</a>, and <a href="https://jakemccrary.com/blog/2018/03/03/reading-in-2017/">2017</a>.</p>

<p>I&rsquo;ve continued to keep track of my reading using <a href="http://goodreads.com">Goodreads</a>. My <a href="https://www.goodreads.com/user/show/3431614-jake-mccrary">profile</a> continues to have the full list of the books I&rsquo;ve read since 2010. <a href="https://www.goodreads.com/review/list/3431614-jake-mccrary?read_at=2018">Here</a> is my entire 2018 record.</p>

<p>I slacked off a bit when writing reviews for all of my read books in Goodreads. I often didn&rsquo;t write a review until some time had passed after completing the book and, as a result, I think I did a worse job reviewing books. Some books don&rsquo;t even have a written review. I&rsquo;m not a fan of this and will push myself some in 2019 to do a better job.</p>

<h2>2018 Goal</h2>

<blockquote><p>There are a few more books on writing that I&rsquo;ve wanted to read for a while. I&rsquo;m planning on reading at least one of them this year. I&rsquo;m also want to read more Octavia Butler. - Me (in the previous reading post)</p></blockquote>

<p>That was my goal for 2018. It breaks down into two goals:</p>

<ol>
<li>Read at least one book on writing.</li>
<li>Read more Octavia Butler.</li>
</ol>


<p>I succeeded on the Octavia Butler goal and completely failed with the other.</p>

<h2>2018 Numbers</h2>

<p>I read 43 books for a total of 16,213 pages. This is a bit less than last year but still a fair amount.</p>

<h2>Highlights</h2>

<p>Below is a list of my five star books from 2018. The book titles link to Amazon and are affiliate links. The other links are to my Goodreads review. Unfortunately, this year I didn&rsquo;t do a great job of always writing a review so some of them are missing or very short.</p>

<p>I generally highlight a lot of passages while reading and then rarely go back to look at them. I&rsquo;ve included links to my highlights. Are they worthwhile without the context of the book? I have no idea. I&rsquo;ve reread them and got something out of them but many are also so far removed from my memory that they are almost useless.</p>

<ul>
<li><a href="https://amzn.to/2TYyeo2">Being Mortal: Medicine and What Matters in the End by Atul Gawande</a> (<a href="https://www.goodreads.com/review/show/1380346555">my review</a>, <a href="https://www.goodreads.com/notes/23290548-being-mortal/3431614-jake-mccrary">my highlights</a>)</li>
<li><a href="https://amzn.to/2TaFJZb">Sapiens: A Brief History of Humankind by Yuval Noah Harari</a> (<a href="https://www.goodreads.com/review/show/1679140092">my review</a>, <a href="https://www.goodreads.com/notes/20873740-sapiens/3431614-jake-mccrary">my highlights</a>)</li>
<li><a href="https://amzn.to/2FP8jvk">Essentialism: The Disciplined Pursuit of Less by Greg McKeown</a> (<a href="https://www.goodreads.com/review/show/1178908716">my review</a>, <a href="https://www.goodreads.com/notes/19776547-essentialism/3431614-jake-mccrary">my highlights</a>)</li>
<li><a href="https://amzn.to/2Docah1">Crucial Conversations Tools for Talking When Stakes Are High by Kerry Patterson,  Joseph Grenny, Ron McMillan, Al Switzler</a> (<a href="https://www.goodreads.com/notes/13041257-crucial-conversations-tools-for-talking-when-stakes-are-high/3431614-jake-mccrary">my highlights</a>)</li>
<li><a href="https://amzn.to/2sAWpNB">Rediscovering JavaScript: Master ES6, ES7, and ES8 by Venkat Subramaniam</a> (<a href="https://www.goodreads.com/review/show/2450809712">my review</a>)</li>
<li><a href="https://amzn.to/2U2QDjy">CivilWarLand in Bad Decline by George Saunders</a> (<a href="https://www.goodreads.com/review/show/104227855">my review</a>)</li>
<li><a href="https://amzn.to/2Do2fIt">The Obelisk Gate (The Broken Earth #2) by N.K. Jemisin</a></li>
<li><a href="https://amzn.to/2FLwbje">The Stone Sky (The Broken Earth, #3) by N.K. Jemisin</a> (<a href="https://www.goodreads.com/review/show/2467372092">my review</a>)</li>
<li><a href="https://amzn.to/2FNdgo8">The Hate U Give by Angie Thomas</a> (<a href="https://www.goodreads.com/review/show/2221117127">my review</a>)</li>
<li><a href="https://amzn.to/2T4PUy9">Six of Crows (Six of Crows, #1) by Leigh Bardugo</a> (<a href="https://www.goodreads.com/review/show/2309941150">my review</a>)</li>
<li><a href="https://amzn.to/2RZOzeG">Crooked Kingdom (Six of Crows #2) by Leigh Bardugo</a></li>
</ul>


<h4>Being Mortal: Medicine and What Matters in the End by Atul Gawande</h4>

<p>This book deals with the end of our lives. It was great. There is a lot of good insight here. Like a lot of the non-fiction books I read, I really should go back and take notes on what I highlighted.</p>

<p>We&rsquo;re all going to deal with death and sickness. This book can help.</p>

<h4>Sapiens: A Brief History of Humankind by Yuval Noah Harari</h4>

<p>My entire Goodreads review is two sentences.</p>

<blockquote><p>This is an incredible book. You should read this. - Me</p></blockquote>

<p>I still agree with this. My friend, Steve Deobald, <a href="https://www.goodreads.com/review/show/2347504001?book_show_action=false">described</a> this book as &ldquo;the most lucid book he&rsquo;s ever read.&rdquo; There is a reason this book has a 4.45 rating on Goodreads. Go read the blurb about it there and then buy and read this book<sup id="fnref:1"><a href="#fn:1" rel="footnote">1</a></sup>.</p>

<h4>Essentialism: The Disciplined Pursuit of Less by Greg McKeown</h4>

<blockquote><p>If you don’t prioritize your life, someone else will. - Greg McKeown</p></blockquote>

<p>A really great book encouraging you to focus on what matters and, as a result, make a bigger impact and be happier. It is better to make a mile of progress on one thing instead of making inches of progress in a bunch.</p>

<p>Tim Ferris recently <a href="https://tim.blog/2019/01/09/greg-mckeown-essentialism/">published a podcast</a> with Greg McKeown which I&rsquo;d also recommend. I&rsquo;ve enjoyed listening to the podcast after a bit of time away from the book. This has helped reinforce ideas from the book. If you&rsquo;re hesitant to read the book, take the time to listen and pay attention to this long podcast.</p>

<p>I highlighted over 100 sections of this book. I plan on revisiting these notes and this book periodically.</p>

<h4>Crucial Conversations Tools for Talking When Stakes Are High by Kerry Patterson, Joseph Grenny, Ron McMillan, Al Switzler</h4>

<p>A crucial conversation is one where the stakes are high, opinions vary, and emotions run strong. This book provides guidance for handling those conversations better.</p>

<p>I enjoyed this book and thought I picked up some useful tips from it. I think this is another where doing follow up work would help solidify some of the concepts.</p>

<h4>Rediscovering JavaScript: Master ES6, ES7, and ES8 by Venkat Subramaniam</h4>

<p>Do you write JavaScript?</p>

<p>Did you write JavaScript in the past but then move on to languages like ClojureScript and miss all the changes that happened to JavaScript?</p>

<p>Both of those sentences apply to me. This book has been great at catching up on modern JavaScript. I find myself referencing it while writing JavaScript and it has been very helpful. It is to the point and I find myself referencing it periodically.</p>

<h4>CivilWarLand in Bad Decline by George Saunders</h4>

<p>I really like this book. It is a wonderful collection of short stories. This was my second time reading it and I still enjoyed it.</p>

<h4>The Obelisk Gate (The Broken Earth #2) and The Stone Sky (The Broken Earth, #3) by N.K. Jemisin</h4>

<p>N.K. Jemisin has won a Hugo three years in a row. Those three years line up with each release of a book in The Broken Earth series. They are really good.</p>

<p>This series is great. The world is interesting and the story compelling. I highly recommend it.</p>

<h4>The Hate U Give by Angie Thomas</h4>

<p>Reading lets you experience life from a different perspective. This book is good. It was quickly made into a movie which is also pretty good.</p>

<p>I read this as part of my book club and it was universally enjoyed.</p>

<h4>Six of Crows (Six of Crows, #1) and Crooked Kingdom (Six of Crows #2) by Leigh Bardugo</h4>

<p>I just really enjoyed this series. I enjoyed the fantasy world it was set in and have read most of Leigh Bardugo&rsquo;s other books that are set in this same world.</p>

<p>The series is a young adult series. It isn&rsquo;t complex. The reading isn&rsquo;t difficult. It isn&rsquo;t going to change your life and you&rsquo;re not going to be blown away by the writing. It almost feels weird to include this series in the same list as CivilWarLand and The Broken Earth series. Even still, I found myself sucked into the story and didn&rsquo;t mind spending the short amount of time it took to read the books.</p>

<h3>Non-Five Star highlights</h3>

<h4>Life 3.0: Being Human in the Age of Artificial Intelligence by Max Tegmark</h4>

<p><a href="https://amzn.to/2AU6B8E">amazon</a>, <a href="https://www.goodreads.com/notes/35881748-life-3-0/3431614-jake-mccrary">my highlights</a></p>

<p>I thought this was a really interesting book.</p>

<h4>When: The Scientific Secrets of Perfect Timing by Daniel H. Pink</h4>

<p><a href="https://amzn.to/2RV2v9W">amazon</a>, <a href="https://www.goodreads.com/review/show/2278408888">my review</a>, <a href="https://www.goodreads.com/notes/35786699-when/3431614-jake-mccrary">my highlights</a></p>

<p>I really enjoyed this. Pink references other works to build a narrative about how timing matters. When should you take a nap? Is it better to go do the doctors in the morning or afternoon? How do are cognitive abilities generally change throughout the day? How should you try to end your vacations?</p>

<p>I did take some notes on the book while reading it and I have referenced them. It was a good book. I should have taken more notes.</p>

<h4>Bloodchild and Other Stories by Octavia E. Butler</h4>

<p><a href="https://amzn.to/2MreMxO">amazon</a>, <a href="https://www.goodreads.com/review/show/2293497979">my review</a>, <a href="https://www.goodreads.com/notes/40274755-bloodchild-and-other-stories/3431614-jake-mccrary">my highlights</a></p>

<p>This is a great collection of short stories and non-fiction articles written by Octavia Butler. I really love her writing. I&rsquo;ve read a few of her works and still enjoy <a href="https://www.goodreads.com/book/show/60926.Lilith_s_Brood">Lilith&rsquo;s Brood</a> the most.</p>

<p>Below is a quote from her about science fiction that really resonated with me. It really hits home on one of the reasons I love reading science fiction.</p>

<blockquote><p>But still I’m asked, what good is science fiction to Black people? What good is any form of literature to Black people? What good is science fiction’s thinking about the present, the future, and the past? What good is its tendency to warn or to consider alternative ways of thinking and doing? What good is its examination of the possible effects of science and technology, or social organization and political direction? At its best, science fiction stimulates imagination and creativity. It gets reader and writer off the beaten track, off the narrow, narrow footpath of what “everyone” is saying, doing, thinking—whoever “everyone” happens to be this year. And what good is all this to Black people? - Octavia Butler</p></blockquote>

<h4>Eeeee Eee Eeee by Tao Lin</h4>

<p><a href="https://amzn.to/2AUSrnJ">amazon</a>, <a href="https://www.goodreads.com/review/show/1788752328">my review</a></p>

<p>This book is real bizarre. For some reason I liked it.</p>

<h4>Factfulness: Ten Reasons We&rsquo;re Wrong About the World&ndash;and Why Things Are Better Than You Think by Hans Rosling</h4>

<p><a href="https://amzn.to/2FQBmP8">amazon</a>, <a href="https://www.goodreads.com/review/show/2402596250">my review</a>, <a href="https://www.goodreads.com/notes/36185940-factfulness/3431614-jake-mccrary">my highlights</a></p>

<p>This book is great. It is very approachable and dispels some wrong common knowledge.</p>

<h2>Stats</h2>

<p>I struggled generating stats this year. I kept having data issues with Goodreads. There is data that is in Goodreads that is failing to export both through their export feature and API. I&rsquo;m somewhat wondering what I would need to do to track reading in a different way.</p>

<p>Below is the reading stats per month. The numbers are based on when the book is completed. December is partially so low because the other books all carried over to January.</p>

<p><img src="https://jakemccrary.com/images/2018-books-and-pages.svg" title="Book and pages count by month" alt="Book and pages count by month" /></p>

<p>Electronic books continue to make up the majority of the books I&rsquo;m reading.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>|           | 2018 | 2017 | 2016 | 2015 |
</span><span class='line'>|-----------+------+------+------+------|
</span><span class='line'>| ebook     |   37 |   37 |   56 |   47 |
</span><span class='line'>| hardcover |    1 |    7 |    0 |    1 |
</span><span class='line'>| paperback |    5 |    5 |    3 |    3 |</span></code></pre></td></tr></table></div></figure>


<p>There are two physical books not included in my read books that I started and still need to finish. They are a both books focused on fitness (climbing injuries and proper movement) and aren&rsquo;t books I&rsquo;m actively reading.</p>

<p>Nearly a third of my reading was non-fiction. For the second year in a row, only two of those were software related.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>|             | Number of books |
</span><span class='line'>|-------------+-----------------|
</span><span class='line'>| fiction     |              29 |
</span><span class='line'>| non-fiction |              14 |</span></code></pre></td></tr></table></div></figure>


<h2>2019 Goals</h2>

<p>I have a stack of software and process books and I&rsquo;d like to read through at least some of them (others are more reference books). I&rsquo;m also going to bring over the 2018 goal of reading at least one book on writing.</p>

<p>In a more general sense, I&rsquo;m hoping to put some practices together that help me gain more from the books I&rsquo;m reading. I&rsquo;m still thinking through what that means.</p>
<div class="footnotes">
<hr/>
<ol>
<li id="fn:1">
<p>In the beginning of 2019 I also read Harari&rsquo;s &ldquo;21 lessons for the 21st Century.&rdquo; Spoiler alert: this book will end up in my 2019 reading summary post.<a href="#fnref:1" rev="footnote">&#8617;</a></p></li>
</ol>
</div>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Notifications with tmux and lein-test-refresh]]></title>
    <link href="https://jakemccrary.com/blog/2019/01/06/notifications-with-tmux-and-lein-test-refresh/"/>
    <updated>2019-01-06T16:55:00-06:00</updated>
    <id>https://jakemccrary.com/blog/2019/01/06/notifications-with-tmux-and-lein-test-refresh</id>
    <content type="html"><![CDATA[<p>I&rsquo;ve been using Emacs in a remote <a href="https://github.com/tmux/tmux">tmux</a> session lately and I&rsquo;ve been missing <a href="https://github.com/jakemcc/lein-test-refresh#notifications">lein-test-refresh</a> notifications when my Clojure tests pass or fail. Luckily, it only took me a little bit of searching to figure out a solution for when I&rsquo;m working inside of tmux.</p>

<p>Below is a GIF of the notifications I get as my tests run and pass or fail.</p>

<p><img src="https://jakemccrary.com/images/tmux-test-refresh.gif" title="tmux and test-refresh notifications" alt="tmux and test-refresh notifications" /></p>

<p>With the above notifications, I can keep my focus on my code and only switch to the tmux window with <code>lein test-refresh</code> running when a test fails.</p>

<p>This was pretty easy to setup. You can trigger a message in tmux by running <code>tmux display-message &lt;MESSAGE_HERE&gt;</code>. To configure <a href="https://github.com/jakemcc/lein-test-refresh#notifications">lein-test-refresh</a> to send notifications to tmux simply include the following in your <code>:test-refresh</code> section of your <code>project.clj</code> or <code>profiles.clj</code>.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='clojure'><span class='line'><span class="ss">:test-refresh</span> <span class="p">{</span><span class="ss">:notify-command</span> <span class="p">[</span><span class="s">&quot;tmux&quot;</span> <span class="s">&quot;display-message&quot;</span><span class="p">]}</span>
</span></code></pre></td></tr></table></div></figure>


<p>I hope you enjoy this. Its has made using a remote terminal with tmux and <a href="https://github.com/jakemcc/lein-test-refresh">lein-test-refresh</a> more enjoyable.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[A more helpful makefile]]></title>
    <link href="https://jakemccrary.com/blog/2018/12/27/a-more-helpful-makefile/"/>
    <updated>2018-12-27T21:21:00-06:00</updated>
    <id>https://jakemccrary.com/blog/2018/12/27/a-more-helpful-makefile</id>
    <content type="html"><![CDATA[<p>In an <a href="https://jakemccrary.com/blog/2016/11/30/unify-your-project-interfaces/">older article</a> of mine I extolled the virtues of having unified interfaces for interacting with your projects. I recently started working at Coinbase and the group I&rsquo;m working with is mostly using makefiles as that common interface. We still have some more work to do to unify the makefile targets of the various projects but I&rsquo;ve picked up one tip that makes switching between projects easier.</p>

<p>That tip is to have the default target of your makefile be one that prints out a helpful message. This looks like the following.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>.PHONY: help
</span><span class='line'>help:
</span><span class='line'>  @grep -E '^[0-9a-zA-Z_-]+:.*?## .*$$' $(MAKEFILE_LIST) | \
</span><span class='line'>   sort | \
</span><span class='line'>   awk 'BEGIN {FS = ":.*?## "}; {printf "\033[36m%-30s\033[0m %s\n", $$1, $$2}'</span></code></pre></td></tr></table></div></figure>


<p>There is a lot going on there but it basically looks through your makefile targets and finds the ones that have a comment starting with <code>##</code> after the target dependencies. Those targets are printed to the console along with the comment.</p>

<p>As an example, the makefile for my website looks similar to the below file.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>.PHONY: help
</span><span class='line'>help:
</span><span class='line'>  @grep -E '^[0-9a-zA-Z_-]+:.*?## .*$$' $(MAKEFILE_LIST) | \
</span><span class='line'>   sort | \
</span><span class='line'>   awk 'BEGIN {FS = ":.*?## "}; {printf "\033[36m%-30s\033[0m %s\n", $$1, $$2}'
</span><span class='line'>
</span><span class='line'>.PHONY: watch
</span><span class='line'>watch: ## Watch for changes and serve preview of site with drafts
</span><span class='line'>  bundle exec rake clean
</span><span class='line'>  bundle exec rake preview
</span><span class='line'>
</span><span class='line'>.PHONY: develop
</span><span class='line'>develop: ## Serve a preview of the site without drafts and refresh changes
</span><span class='line'>  bundle exec rake clean
</span><span class='line'>  bundle exec rake develop
</span><span class='line'>
</span><span class='line'>.PHONY: new_adventure
</span><span class='line'>new_adventure: ## Start a new adventure post
</span><span class='line'>  bundle exec rake new_adventure
</span><span class='line'>
</span><span class='line'>.PHONY: new_post
</span><span class='line'>new_post: ## Start a new post
</span><span class='line'>  bundle exec rake new_post 
</span><span class='line'>
</span><span class='line'>.PHONY: deploy
</span><span class='line'>deploy: ## deploy
</span><span class='line'>  ./deploy.sh</span></code></pre></td></tr></table></div></figure>


<p>When this file, when I run <code>make</code> in this websites source, I get the following output.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>0 [last: 0s] 21:11:50 ~/src/jakemcc/blog (master)
</span><span class='line'>$ make
</span><span class='line'>deploy                         deploy
</span><span class='line'>develop                        Serve a preview of the site without drafts and refresh changes
</span><span class='line'>new_adventure                  Start a new adventure post
</span><span class='line'>new_post                       Start a new post
</span><span class='line'>watch                          Watch for changes and serve preview of site with drafts</span></code></pre></td></tr></table></div></figure>


<p>This is super useful when you&rsquo;re starting doing work in a new project. With this feature you can get a quick list of useful targets and a description. It allows you to quickly see what can be done in a project.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Built-in test narrowing with lein-test-refresh]]></title>
    <link href="https://jakemccrary.com/blog/2018/07/16/built-in-test-narrowing-with-lein-test-refresh/"/>
    <updated>2018-07-16T14:47:00-05:00</updated>
    <id>https://jakemccrary.com/blog/2018/07/16/built-in-test-narrowing-with-lein-test-refresh</id>
    <content type="html"><![CDATA[<p>If you follow my work you probably know that I value fast feedback cycles. Most of the open-source I maintain was developed to enable faster feedback cycles. This is why <a href="https://github.com/jakemcc/lein-test-refresh/">lein-test-refresh</a> and <a href="https://github.com/clojure-expectations/lein-autoexpect">lein-autoexpect</a> were originally created.</p>

<p>Leiningen supports <a href="https://github.com/technomancy/leiningen/blob/master/doc/TUTORIAL.md#tests">test selectors</a> and lein-test-refresh <a href="https://github.com/jakemcc/lein-test-refresh/blob/master/CHANGES.md#040">does as well</a>. This lets you start-up a testing session and only run tests or namespaces with certain metadata on them. This is a super useful feature as it lets you narrow your testing scope to one (or a handful) of tests while working on solving a specific problem.</p>

<p>lein-test-refresh now has built-in functionality that allows you to focus your test scope without restarting the Leiningen test process. If lein-test-refresh sees a <code>deftest</code> or <code>ns</code> form marked with <code>:test-refresh/focus true</code> in its metadata, then it will only run tests marked with <code>:test-refresh/focus</code>.</p>

<p>Below is an example of what this looks like.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='clojure'><span class='line'><span class="p">(</span><span class="nf">deftest</span> <span class="o">^</span><span class="ss">:test-refresh/focus</span> <span class="nv">test-addition</span>
</span><span class='line'>  <span class="p">(</span><span class="nf">is</span> <span class="p">(</span><span class="nb">= </span><span class="mi">2</span> <span class="p">(</span><span class="nb">+ </span><span class="mi">1</span> <span class="mi">1</span><span class="p">))))</span>
</span></code></pre></td></tr></table></div></figure>


<p>This functionality has only been available for a short period of time and I&rsquo;ve already found it useful. I think you will too. Enjoy.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Tracking changes to a Reagent atom]]></title>
    <link href="https://jakemccrary.com/blog/2018/06/15/tracking-changes-to-a-reagent-atom/"/>
    <updated>2018-06-15T09:05:00-05:00</updated>
    <id>https://jakemccrary.com/blog/2018/06/15/tracking-changes-to-a-reagent-atom</id>
    <content type="html"><![CDATA[<p>I was recently having some difficulty debugging a problem in a
ClojureScript single page application. The SPA was implemented using
<a href="https://reagent-project.github.io/">reagent</a><sup id="fnref:1"><a href="#fn:1" rel="footnote">1</a></sup>.</p>

<p>This interface stores most of its state in a global
<code>reagent.core/atom</code> called <code>db</code>. To debug the problem, I thought it
would be useful to track how the global state changed as I interacted
with the interface. How do we do that?</p>

<p>For the rest of this article, pretend that <code>(require '[reagent.core
:as reagent])</code> has been executed.</p>

<p>First, let&rsquo;s define <code>db-history</code> in the same namespace as the global
<code>reagent/atom</code>, <code>db</code>. This is where we&rsquo;ll collect the changes to <code>db</code>.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='clojure'><span class='line'><span class="p">(</span><span class="kd">ns </span><span class="nv">ui.data</span>
</span><span class='line'>  <span class="p">(</span><span class="ss">:require</span> <span class="p">[</span><span class="nv">reagent.core</span> <span class="ss">:as</span> <span class="nv">reagent</span><span class="p">]))</span>
</span><span class='line'>
</span><span class='line'><span class="p">(</span><span class="kd">defonce </span><span class="nv">db</span> <span class="p">(</span><span class="nf">reagent/atom</span> <span class="p">{</span><span class="ss">:app/current-page</span> <span class="ss">:offer-list</span><span class="p">}))</span>
</span><span class='line'>
</span><span class='line'><span class="p">(</span><span class="kd">defonce </span><span class="nv">db-history</span> <span class="p">(</span><span class="nf">atom</span> <span class="p">[]))</span>
</span></code></pre></td></tr></table></div></figure>


<p>Next, let&rsquo;s write a function called <code>aggregate-state</code>. This function
grabs the current value in <code>db</code> and <code>conj</code>s it onto <code>db-history</code>. It
also limits the history to the most recent 101 states.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='clojure'><span class='line'><span class="p">(</span><span class="kd">defn </span><span class="nv">aggregate-state</span> <span class="p">[]</span>
</span><span class='line'>  <span class="p">(</span><span class="k">let </span><span class="p">[</span><span class="nv">d</span> <span class="o">@</span><span class="nv">db</span><span class="p">]</span>
</span><span class='line'>    <span class="p">(</span><span class="nf">swap!</span> <span class="nv">db-history</span> <span class="p">(</span><span class="k">fn </span><span class="p">[</span><span class="nv">hist</span><span class="p">]</span>
</span><span class='line'>                        <span class="p">(</span><span class="nb">-&gt; </span><span class="p">(</span><span class="nb">take </span><span class="mi">100</span> <span class="nv">hist</span><span class="p">)</span>
</span><span class='line'>                            <span class="nv">vec</span>
</span><span class='line'>                            <span class="p">(</span><span class="nb">conj </span><span class="nv">d</span><span class="p">))))))</span>
</span></code></pre></td></tr></table></div></figure>


<p>Now we need to invoke <code>aggregate-state</code> whenever <code>db</code> changes. We can
do this using <code>reagent/track</code>. <code>reagent/track</code> takes a function and
optional arguments and invokes that function whenever a <code>reagent/atom</code>
that function depends on changes.</p>

<p><code>reagent/track!</code> is similar except it immediately invokes the function
instead of waiting for the first change. We can use it to cause
<code>aggregate-state</code> to get called whenever <code>db</code> changes.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='clojure'><span class='line'><span class="p">(</span><span class="kd">defonce </span><span class="nv">db-history-logger</span> <span class="p">(</span><span class="nf">reagent/track!</span> <span class="nv">aggregate-state</span><span class="p">))</span>
</span></code></pre></td></tr></table></div></figure>


<p>Now history of the global state is being tracked. But we need a way to
access it. Below is what I ended up writing. When you call
<code>ui.data.history()</code> in Chrome&rsquo;s JavaScript console, it returns an
object you can click on to explore. If you pass in strings as
arguments to <code>history</code> then it only selects some of the data from the
global <code>db</code> and history.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='clojure'><span class='line'><span class="p">(</span><span class="kd">defn </span><span class="o">^</span><span class="ss">:export</span> <span class="nv">history</span> <span class="p">[</span><span class="o">&amp;</span> <span class="nv">args</span><span class="p">]</span>
</span><span class='line'>  <span class="p">(</span><span class="k">let </span><span class="p">[</span><span class="nv">d</span> <span class="o">@</span><span class="nv">db</span>
</span><span class='line'>        <span class="nv">k</span> <span class="p">(</span><span class="k">if </span><span class="p">(</span><span class="nb">seq </span><span class="nv">args</span><span class="p">)</span>
</span><span class='line'>            <span class="p">(</span><span class="nb">map keyword </span><span class="nv">args</span><span class="p">)</span>
</span><span class='line'>            <span class="p">(</span><span class="nb">keys </span><span class="nv">d</span><span class="p">))]</span>
</span><span class='line'>    <span class="p">(</span><span class="nf">clj-&gt;js</span> <span class="p">{</span><span class="ss">:history</span> <span class="p">(</span><span class="nf">mapv</span> <span class="p">(</span><span class="k">fn </span><span class="p">[</span><span class="nv">x</span><span class="p">]</span> <span class="p">(</span><span class="nb">select-keys </span><span class="nv">x</span> <span class="nv">k</span><span class="p">))</span> <span class="o">@</span><span class="nv">db-history</span><span class="p">)</span>
</span><span class='line'>              <span class="ss">:current</span> <span class="p">(</span><span class="nb">select-keys </span><span class="nv">d</span> <span class="nv">k</span><span class="p">)})))</span>
</span></code></pre></td></tr></table></div></figure>


<p>It only took about fifteen lines of code to gain a view of our
application&rsquo;s state changes over time. This view helped me solve my
problem. Hopefully it will help you too.</p>
<div class="footnotes">
<hr/>
<ol>
<li id="fn:1">
<p>This particular project is nearly four years old and has had many hands on it over the years. Working in it reminds me of how useful re-frame is on larger applications like this one.<a href="#fnref:1" rev="footnote">&#8617;</a></p></li>
</ol>
</div>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Preventing duplicate long-running invocations in Clojure]]></title>
    <link href="https://jakemccrary.com/blog/2018/06/14/clojure-prevent-multiple-simultaneous-invocations/"/>
    <updated>2018-06-14T09:47:00-05:00</updated>
    <id>https://jakemccrary.com/blog/2018/06/14/clojure-prevent-multiple-simultaneous-invocations</id>
    <content type="html"><![CDATA[<p>A couple months ago I was looking into a problem and noticed that
there was a situation where an expensive operation could be running
simultaneously multiple times. This was wasteful.</p>

<p>This operation happened on a timer and could also be triggered by a power
user through the UI. A power user could accidentally (or purposefully)
mash on a UI button and cause the instance they&rsquo;re interacting with
to grind to a halt<sup id="fnref:1"><a href="#fn:1" rel="footnote">1</a></sup>.</p>

<p>It was pretty easy to prevent. All I needed to introduce was an
<code>atom</code> and lean on <code>compare-and-set!</code>. <code>compare-and-set!</code> is a pretty
neat function (and concept found in many languages). Here is the docstring:</p>

<blockquote><p>Atomically sets the value of atom to newval if and only if the
current value of the atom is identical to oldval. Returns true if
set happened, else false</p></blockquote>

<p>Basically, <code>compare-and-set!</code> changes the value of an atom only if it
starts from a specified value and returns a boolean letting you know
if it did.</p>

<p>To prevent an operation from running multiple times, introduce an atom
and wrap calling the operation in a conditional using
<code>compare-and-set!</code>.  After doing the work, be sure to <code>reset!</code> your
atom back to the starting value.</p>

<p>Below is the code.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='clojure'><span class='line'><span class="p">(</span><span class="kd">defonce </span><span class="nv">running?</span> <span class="p">(</span><span class="nf">atom</span> <span class="nv">false</span><span class="p">))</span>
</span><span class='line'>
</span><span class='line'><span class="p">(</span><span class="kd">defn- </span><span class="nv">expensive-operation!</span><span class="o">&#39;</span> <span class="p">[]</span>
</span><span class='line'>  <span class="c1">;; do work</span>
</span><span class='line'>  <span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="p">(</span><span class="kd">defn </span><span class="nv">expensive-operation!</span> <span class="p">[]</span>
</span><span class='line'>  <span class="p">(</span><span class="nb">when </span><span class="p">(</span><span class="nf">compare-and-set!</span> <span class="nv">running?</span> <span class="nv">false</span> <span class="nv">true</span><span class="p">)</span>
</span><span class='line'>    <span class="p">(</span><span class="nf">try</span>
</span><span class='line'>      <span class="p">(</span><span class="nf">expensive-operation!</span><span class="o">&#39;</span><span class="p">)</span>
</span><span class='line'>      <span class="p">(</span><span class="nf">finally</span>
</span><span class='line'>        <span class="p">(</span><span class="nf">reset!</span> <span class="nv">running?</span> <span class="nv">false</span><span class="p">)))))</span>
</span></code></pre></td></tr></table></div></figure>

<div class="footnotes">
<hr/>
<ol>
<li id="fn:1">
<p>OK, not really grind to a halt, but consume unnecessary resources.<a href="#fnref:1" rev="footnote">&#8617;</a></p></li>
</ol>
</div>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Reading in 2017]]></title>
    <link href="https://jakemccrary.com/blog/2018/03/03/reading-in-2017/"/>
    <updated>2018-03-03T11:17:00-06:00</updated>
    <id>https://jakemccrary.com/blog/2018/03/03/reading-in-2017</id>
    <content type="html"><![CDATA[<p>I typically like to reflect on my previous years reading closer to the beginning of the next year. We are just entering March, so I&rsquo;ve missed doing that.</p>

<p>Here are links to my previous end-of-year reflections: <a href="https://jakemccrary.com/blog/2014/01/01/using-incanter-to-review-my-2013-reading/">2013</a>, <a href="https://jakemccrary.com/blog/2015/01/08/reading-in-2014/">2014</a>, <a href="https://jakemccrary.com/blog/2016/03/13/reading-in-2015/">2015</a>, <a href="https://jakemccrary.com/blog/2017/01/04/reading-in-2016/">2016</a>.</p>

<p>I&rsquo;ve continued to keep track of my reading using <a href="http://goodreads.com">Goodreads</a>. My <a href="https://www.goodreads.com/user/show/3431614-jake-mccrary">profile</a> continues to have the full list of the books I&rsquo;ve read since 2010. <a href="https://www.goodreads.com/review/list/3431614-jake-mccrary?read_at=2017">Here</a> is my entire 2017 record.</p>

<h2>2017 Goal</h2>

<p>My goal entering 2017 was to revisit some past favorites. I started this goal without setting a number, so I&rsquo;ll just have to trust how I feel about it.</p>

<p>In 2017, I reread Frank Herbert&rsquo;s Dune and John William&rsquo;s Stoner. I also read new-to-me books by the authors David Foster Wallace, Haruki Murakami, George Saunders, and Neal Stephenson. I&rsquo;ve also reread a George Saunders book in the first part of 2018.</p>

<p>I mostly achieved 2017&rsquo;s goal. If I had reread another book, I&rsquo;d consider it 100% completed, but I&rsquo;m going to count reading some favorite authors towards the goal.</p>

<h2>2017 Numbers</h2>

<p>I read a total of 49 books for a total of 17,853 pages. I also read every issue of Amazon&rsquo;s <em>Day One</em> weekly periodical<sup id="fnref:1"><a href="#fn:1" rel="footnote">1</a></sup>.</p>

<p>The number of five-star books I read this last year was low compared to previous years.</p>

<h2>Recommendations</h2>

<p>I only gave out seven five-star ratings. Two of the seven were books I reread.  Title links are affiliate links to Amazon and the review links are to my review on Goodreads.</p>

<ul>
<li><a href="http://amzn.to/2CVygnP">Stories of Your Life and Others - Ted Chiang</a> (<a href="https://www.goodreads.com/review/show/1868465450">my review</a>)</li>
<li><a href="http://amzn.to/2CX3RFE">A Supposedly Fun Thing I&rsquo;ll Never Do Again: Essays and Arguments - David Foster Wallace</a> (<a href="https://www.goodreads.com/review/show/1071157288">my review</a>)</li>
<li><a href="http://amzn.to/2F9ghjv">Dune - Frank Herbert</a> (<a href="https://www.goodreads.com/review/show/2200354838">my review</a>)</li>
<li><a href="http://amzn.to/2oE3X0w">Lilith&rsquo;s Brood - Octavia Butler</a> (<a href="https://www.goodreads.com/review/show/2136588256">my review</a>)</li>
<li><a href="http://amzn.to/2GWZCfB">Stoner - John Williams</a> (<a href="https://www.goodreads.com/review/show/1896951901">my review</a>)</li>
<li><a href="http://amzn.to/2FgNgln">The Sense of Style: The Thinking Person&rsquo;s Guide to Writing in the 21st Century - Steven Pinker</a> (<a href="https://www.goodreads.com/review/show/1216210735">my review</a>)</li>
<li><a href="http://amzn.to/2H3cHEm">Shoe Dog - Phil Knight</a> (<a href="https://www.goodreads.com/review/show/1866261263">my review</a>)</li>
</ul>


<p>Below are more details on some of the above five-star books and some shoutouts for some non-five star books. Looking back over my books, I&rsquo;d recommend any four-star or higher book without hesitation but am not going to put them all here.</p>

<h4><em>Lilith&rsquo;s Brood</em> by Octavia Butler</h4>

<p><em>Lilith&rsquo;s Brood</em> was one of the last books I read in 2017. It is a three book series published as a single book. It is amazing. This series achieves precisely what I want in a great science fiction book. I highly recommend this book. Reading this book reminded me why I love reading.</p>

<p>A quote from a non-fiction essay by Octavia Butler describes why good science fiction is fantastic.</p>

<blockquote><p>But still I’m asked, what good is science fiction to Black people? What good is any form of literature to Black people? What good is science fiction’s thinking about the present, the future, and the past? What good is its tendency to warn or to consider alternative ways of thinking and doing? What good is its examination of the possible effects of science and technology, or social organization and political direction? At its best, science fiction stimulates imagination and creativity. It gets reader and writer off the beaten track, off the narrow, narrow footpath of what “everyone” is saying, doing, thinking—whoever “everyone” happens to be this year. And what good is all this to Black people? - <strong>Octavia Butler</strong></p></blockquote>

<h4><em>The Sense of Style</em> by Steven Pinker</h4>

<p>Yes, I read a book on writing and think this is one of the top books I read last year. I initially read a Kindle edition from my local library and then immediately bought the hardcover so I can reference it while writing.</p>

<p>The writing is great. The book is humorous. I&rsquo;d highly recommend to anyone that writes. I should reread this.</p>

<h4><em>Dune</em> by Frank Herbert</h4>

<p><em>Dune</em> is a classic for a reason. It was still great my second time through it. If you haven&rsquo;t read Dune, you are missing out.</p>

<p>If you read it on a Kindle, I have a <a href="http://gum.co/dune-dictionary">custom Kindle dictionary</a> that makes reading it more pleasurable.</p>

<h4><em>Stoner</em> by John Williams</h4>

<p>It is still unclear to me why I like this book so much, but I do. The writing is crisp. The story is depressing.</p>

<h4><em>Stories of Your Life and Others</em> by Ted Chiang</h4>

<p>Over the years I&rsquo;ve started to enjoy reading short story collections. Every story in this collection was great. I devoured this book and then everything else I could find by Ted Chiang.</p>

<h4><em>Capital in the Twenty-First Century</em> by Thomas Piketty</h4>

<p>This is a massive book. It probably deserved five-stars. It presents a ton of information to the reader. It is boring. It also made me think about the role of taxes in society and changed my thoughts about them.</p>

<p>If you&rsquo;ve been putting this off, you can probably skip to the last section and still get a lot from this book.</p>

<p><a href="https://www.goodreads.com/review/show/926621222?book_show_action=true">Here</a> is a review that does a spot on job of describing the book. Here is an <a href="http://amzn.to/2oKfDPx">Amazon</a> link and <a href="https://www.goodreads.com/review/show/2041297829">my own review</a>.</p>

<h4>Bobiverse Series by Dennis Taylor</h4>

<p><a href="https://www.goodreads.com/series/192752-bobiverse">This</a> is a fun light-hearted science fiction series. It still manages to explore some deep topics. Read the description and if it sounds interesting to you, pick it up.</p>

<h2>Stats</h2>

<p>Similar to last year, April and September were times when I wasn&rsquo;t reading a ton.</p>

<p><img src="https://jakemccrary.com/images/reading-by-month-2017.jpg" title="Chart of reading per month" alt="Chart of reading per month" /></p>

<p>This year physical books made a comeback. I checked out more physical books from the library this year than in the past.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>|           | 2017 | 2016 | 2015 |
</span><span class='line'>|-----------+------+------+------|
</span><span class='line'>| ebook     |   37 |   56 |   47 |
</span><span class='line'>| hardcover |    7 |    0 |    1 |
</span><span class='line'>| paperback |    5 |    3 |    3 |</span></code></pre></td></tr></table></div></figure>


<p>My average rating went down a bit.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>| Year | Avg Rating |
</span><span class='line'>|------+------------|
</span><span class='line'>| 2011 |       3.84 |
</span><span class='line'>| 2012 |       3.66 |
</span><span class='line'>| 2013 |       3.55 |
</span><span class='line'>| 2014 |       3.49 |
</span><span class='line'>| 2015 |       3.86 |
</span><span class='line'>| 2016 |       3.85 |
</span><span class='line'>| 2017 |       3.77 |</span></code></pre></td></tr></table></div></figure>


<p>I read a lot of non-fiction books this year. Only two of them were directly related to software.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>|             | Number of books |
</span><span class='line'>|-------------+-----------------|
</span><span class='line'>| fiction     |              30 |
</span><span class='line'>| non-fiction |              19 |
</span></code></pre></td></tr></table></div></figure>


<h2>2018 Goals</h2>

<p>There are a few more books on writing that I&rsquo;ve wanted to read for a while. I&rsquo;m planning on reading at least one of them this year. I&rsquo;m also want to read more Octavia Butler.</p>
<div class="footnotes">
<hr/>
<ol>
<li id="fn:1">
<p>Unfortunately, this periodical has ended after years of publishing once a week. I&rsquo;m bummed. I really enjoyed receiving a short story and poem once a week.<a href="#fnref:1" rev="footnote">&#8617;</a></p></li>
</ol>
</div>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Creating serverless applications with ClojureScript and Firebase]]></title>
    <link href="https://jakemccrary.com/blog/2018/02/20/creating-serverless-applications-with-clojurescript-and-firebase/"/>
    <updated>2018-02-20T11:30:00-06:00</updated>
    <id>https://jakemccrary.com/blog/2018/02/20/creating-serverless-applications-with-clojurescript-and-firebase</id>
    <content type="html"><![CDATA[<p>Earlier this year, I traveled to India and gave a presentation at
<a href="http://inclojure.org">IN/Clojure</a>. I talked about building serverless
ClojureScript applications that use <a href="https://firebase.com">Firebase</a>
to persist and sync data between clients.</p>

<p>I was pretty pleased with how the talk went. The people who talked to
me after seemed to enjoy the presentation and were inspired to try out
some of the techniques and tools I mentioned.</p>

<p>Here is the talk. I hope you enjoy it. It was fun to give.</p>

<iframe width="560" height="315" src="https://www.youtube.com/embed/rMqo3lgxe7o" frameborder="0" allow="encrypted-media" allowfullscreen></iframe>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Using Clojure macros for nicer error handling]]></title>
    <link href="https://jakemccrary.com/blog/2018/02/18/using-clojure-macros-for-nicer-error-handling/"/>
    <updated>2018-02-18T11:24:00-06:00</updated>
    <id>https://jakemccrary.com/blog/2018/02/18/using-clojure-macros-for-nicer-error-handling</id>
    <content type="html"><![CDATA[<p>In July 2017, I found myself editing some Clojure code that looked approximately like this.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='clojure'><span class='line'><span class="p">(</span><span class="kd">defn </span><span class="nv">validate-required-fields</span> <span class="p">[</span><span class="nv">params</span><span class="p">]</span>
</span><span class='line'>  <span class="p">(</span><span class="nb">when-not </span><span class="p">(</span><span class="nb">contains? </span><span class="nv">params</span> <span class="ss">:source</span><span class="p">)</span>
</span><span class='line'>    <span class="s">&quot;Missing source field&quot;</span><span class="p">))</span>
</span><span class='line'>
</span><span class='line'><span class="p">(</span><span class="kd">defn </span><span class="nv">validate-invariants</span> <span class="p">[</span><span class="nv">params</span><span class="p">]</span>
</span><span class='line'>  <span class="p">(</span><span class="nb">when </span><span class="p">(</span><span class="nb">&gt;= </span><span class="p">(</span><span class="ss">:lower</span> <span class="nv">params</span><span class="p">)</span> <span class="p">(</span><span class="ss">:higher</span> <span class="nv">params</span><span class="p">))</span>
</span><span class='line'>    <span class="s">&quot;lower field must be smaller than higher&quot;</span><span class="p">))</span>
</span><span class='line'>
</span><span class='line'><span class="c1">;; route handler taken out of other routes</span>
</span><span class='line'><span class="p">(</span><span class="nf">GET</span> <span class="s">&quot;/event-redirect/:event_type&quot;</span> <span class="nv">request</span> <span class="p">[]</span>
</span><span class='line'>  <span class="p">(</span><span class="k">let </span><span class="p">[</span><span class="nv">params</span> <span class="p">(</span><span class="ss">:params</span> <span class="nv">request</span><span class="p">)]</span>
</span><span class='line'>    <span class="p">(</span><span class="nb">if-let </span><span class="p">[</span><span class="nv">field-error</span> <span class="p">(</span><span class="nf">validate-required-fields</span> <span class="nv">params</span><span class="p">)]</span>
</span><span class='line'>      <span class="p">{</span><span class="ss">:status</span> <span class="mi">400</span> <span class="ss">:body</span> <span class="nv">field-error</span><span class="p">}</span>
</span><span class='line'>      <span class="p">(</span><span class="nb">if-let </span><span class="p">[</span><span class="nv">invariant-error</span> <span class="p">(</span><span class="nf">validate-invariants</span> <span class="nv">params</span><span class="p">)]</span>
</span><span class='line'>        <span class="p">{</span><span class="ss">:status</span> <span class="mi">400</span> <span class="ss">:body</span> <span class="nv">invariant-error</span><span class="p">}</span>
</span><span class='line'>        <span class="p">(</span><span class="nf">publish-and-redirect</span> <span class="nv">params</span><span class="p">)))))</span>
</span></code></pre></td></tr></table></div></figure>


<p>This route handler validates its inputs, and if they fail validation,
then it returns an error response. I found this pretty ugly. This
small chunk of code has numerous <code>if</code> branches and quite a bit of
nesting. All of this makes it hard to read and hurts understanding.</p>

<p>While adding a new feature to it, I remembered some code I wrote with
<a href="https://github.com/snoe">Case</a> back in late 2015. Back then we were
working on Lumanu and wrote a Clojure macro that we called
<code>halt-on-error-&gt;&gt;</code>. This macro worked similarly to <code>-&gt;&gt;</code>, except it
allowed any step in the processing pipeline to halt execution and
trigger an error handler. We were working on a web crawler at the
time, and this macro significantly improved the readability of our
data processing pipeline. There was a lot of error handling code
throughout the web crawler, and this macro helped keep it readable.</p>

<p>I realized that using a similar macro would make this code easier to
follow. I recreated <code>halt-on-error-&gt;&gt;</code> to allow any form to cause it
to return early. The above code could then be written like below.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='clojure'><span class='line'><span class="p">(</span><span class="kd">defn </span><span class="nv">validate-required-fields</span> <span class="p">[</span><span class="nv">params</span><span class="p">]</span>
</span><span class='line'>  <span class="p">(</span><span class="k">if </span><span class="p">(</span><span class="nb">contains? </span><span class="nv">params</span> <span class="ss">:source</span><span class="p">)</span>
</span><span class='line'>    <span class="nv">params</span>
</span><span class='line'>    <span class="p">(</span><span class="nf">exec/halt</span> <span class="p">{</span><span class="ss">:status</span> <span class="mi">400</span> <span class="ss">:body</span> <span class="s">&quot;Missing source field&quot;</span><span class="p">})))</span>
</span><span class='line'>
</span><span class='line'><span class="p">(</span><span class="kd">defn </span><span class="nv">validate-invariants</span> <span class="p">[</span><span class="nv">params</span><span class="p">]</span>
</span><span class='line'>  <span class="p">(</span><span class="k">if </span><span class="p">(</span><span class="nb">&lt; </span><span class="p">(</span><span class="ss">:lower</span> <span class="nv">params</span><span class="p">)</span> <span class="p">(</span><span class="ss">:higher</span> <span class="nv">params</span><span class="p">))</span>
</span><span class='line'>    <span class="nv">params</span>
</span><span class='line'>    <span class="p">(</span><span class="nf">exec/halt</span> <span class="p">{</span><span class="ss">:status</span> <span class="mi">400</span> <span class="ss">:body</span> <span class="s">&quot;lower field must be smaller than higher&quot;</span><span class="p">})))</span>
</span><span class='line'>
</span><span class='line'><span class="p">(</span><span class="nf">GET</span> <span class="s">&quot;/event-redirect/:event_type&quot;</span> <span class="nv">request</span> <span class="p">[]</span>
</span><span class='line'>  <span class="p">(</span><span class="nf">exec/halt-on-error-&gt;&gt;</span> <span class="nv">request</span>
</span><span class='line'>                         <span class="ss">:params</span>
</span><span class='line'>                         <span class="nv">validate-required-fields</span>
</span><span class='line'>                         <span class="nv">validate-invariants</span>
</span><span class='line'>                         <span class="nv">publish-and-redirect</span><span class="p">))</span>
</span></code></pre></td></tr></table></div></figure>


<p>Once you understand <code>halt-on-error-&gt;&gt;</code>, this chunk of
code is much easier to read.</p>

<p>Let&rsquo;s implement <code>halt-on-error-&gt;&gt;</code>.</p>

<h2>Implementing <code>halt-on-error-&gt;&gt;</code></h2>

<p>Here are some tests for that specify how <code>halt-on-error-&gt;&gt;</code> should work.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
</pre></td><td class='code'><pre><code class='clojure'><span class='line'><span class="p">(</span><span class="kd">ns </span><span class="nv">halt.execution-test</span>
</span><span class='line'>  <span class="p">(</span><span class="ss">:require</span>  <span class="p">[</span><span class="nv">halt.execution</span> <span class="ss">:as</span> <span class="nv">exec</span><span class="p">]</span>
</span><span class='line'>             <span class="p">[</span><span class="nv">clojure.test</span> <span class="ss">:refer</span> <span class="ss">:all</span><span class="p">]))</span>
</span><span class='line'>
</span><span class='line'><span class="p">(</span><span class="k">def </span><span class="nv">produce-error</span> <span class="p">(</span><span class="nb">constantly </span><span class="p">(</span><span class="nf">exec/halt</span> <span class="p">{</span><span class="ss">:x</span> <span class="s">&quot;foobar&quot;</span><span class="p">})))</span>
</span><span class='line'>
</span><span class='line'><span class="p">(</span><span class="kd">defn </span><span class="nv">success-fn</span>
</span><span class='line'>  <span class="s">&quot;Weird function that appends suffix to s&quot;</span>
</span><span class='line'>  <span class="p">[</span><span class="nv">suffix</span> <span class="nv">s</span><span class="p">]</span>
</span><span class='line'>  <span class="p">(</span><span class="nb">str </span><span class="nv">s</span> <span class="nv">suffix</span><span class="p">))</span>
</span><span class='line'>
</span><span class='line'><span class="p">(</span><span class="nf">deftest</span> <span class="nv">single-step</span>
</span><span class='line'>  <span class="p">(</span><span class="nf">is</span> <span class="p">(</span><span class="nb">= </span><span class="s">&quot;first&quot;</span> <span class="p">(</span><span class="nf">exec/halt-on-error-&gt;&gt;</span> <span class="p">(</span><span class="nf">success-fn</span> <span class="s">&quot;first&quot;</span> <span class="s">&quot;&quot;</span><span class="p">)))))</span>
</span><span class='line'>
</span><span class='line'><span class="p">(</span><span class="nf">deftest</span> <span class="nv">two-steps-with-no-error</span>
</span><span class='line'>  <span class="p">(</span><span class="nf">is</span> <span class="p">(</span><span class="nb">= </span><span class="s">&quot;firstsecond&quot;</span> <span class="p">(</span><span class="nf">exec/halt-on-error-&gt;&gt;</span> <span class="p">(</span><span class="nf">success-fn</span> <span class="s">&quot;first&quot;</span> <span class="s">&quot;&quot;</span><span class="p">)</span>
</span><span class='line'>                                              <span class="p">(</span><span class="nf">success-fn</span> <span class="s">&quot;second&quot;</span><span class="p">)))))</span>
</span><span class='line'>
</span><span class='line'><span class="p">(</span><span class="nf">deftest</span> <span class="nv">error-as-first-step</span>
</span><span class='line'>  <span class="p">(</span><span class="nf">is</span> <span class="p">(</span><span class="nb">= </span><span class="p">{</span><span class="ss">:x</span> <span class="s">&quot;foobar&quot;</span><span class="p">}</span> <span class="p">(</span><span class="nf">exec/halt-on-error-&gt;&gt;</span> <span class="p">(</span><span class="nf">produce-error</span><span class="p">))))</span>
</span><span class='line'>  <span class="p">(</span><span class="nf">is</span> <span class="p">(</span><span class="nb">= </span><span class="p">{</span><span class="ss">:x</span> <span class="s">&quot;foobar&quot;</span><span class="p">}</span> <span class="p">(</span><span class="nf">exec/halt-on-error-&gt;&gt;</span> <span class="p">(</span><span class="nf">produce-error</span><span class="p">)</span>
</span><span class='line'>                                              <span class="p">(</span><span class="nf">success-fn</span> <span class="s">&quot;first&quot;</span><span class="p">)))))</span>
</span><span class='line'>
</span><span class='line'><span class="p">(</span><span class="nf">deftest</span> <span class="nv">error-after-first-step</span>
</span><span class='line'>  <span class="p">(</span><span class="nf">is</span> <span class="p">(</span><span class="nb">= </span><span class="p">{</span><span class="ss">:x</span> <span class="s">&quot;foobar&quot;</span><span class="p">}</span> <span class="p">(</span><span class="nf">exec/halt-on-error-&gt;&gt;</span> <span class="p">(</span><span class="nf">success-fn</span> <span class="s">&quot;first&quot;</span> <span class="s">&quot;&quot;</span><span class="p">)</span>
</span><span class='line'>                                              <span class="p">(</span><span class="nf">produce-error</span><span class="p">)</span>
</span><span class='line'>                                              <span class="p">(</span><span class="nf">success-fn</span> <span class="s">&quot;second&quot;</span><span class="p">)))))</span>
</span><span class='line'>
</span><span class='line'><span class="p">(</span><span class="nf">deftest</span> <span class="nv">works-with-anonymous-functions</span>
</span><span class='line'>  <span class="p">(</span><span class="nf">is</span> <span class="p">(</span><span class="nb">= </span><span class="mi">1</span> <span class="p">(</span><span class="nf">exec/halt-on-error-&gt;&gt;</span> <span class="p">(</span><span class="nf">success-fn</span> <span class="s">&quot;first&quot;</span> <span class="s">&quot;&quot;</span><span class="p">)</span>
</span><span class='line'>                                  <span class="p">((</span><span class="k">fn </span><span class="p">[</span><span class="nv">x</span><span class="p">]</span> <span class="p">(</span><span class="nf">exec/halt</span> <span class="mi">1</span><span class="p">)))))))</span>
</span></code></pre></td></tr></table></div></figure>


<p>Below is an implementation of <code>halt-on-error-&gt;&gt;</code>.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='clojure'><span class='line'><span class="p">(</span><span class="kd">ns </span><span class="nv">halt.execution</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="p">(</span><span class="kd">defrecord </span><span class="nv">Stopper</span> <span class="p">[</span><span class="nv">x</span><span class="p">])</span>
</span><span class='line'>
</span><span class='line'><span class="p">(</span><span class="kd">defn </span><span class="nv">halt</span> <span class="p">[</span><span class="nv">data</span><span class="p">]</span>
</span><span class='line'>  <span class="p">(</span><span class="nf">Stopper.</span> <span class="nv">data</span><span class="p">))</span>
</span><span class='line'>
</span><span class='line'><span class="p">(</span><span class="kd">defmacro </span><span class="nv">halt-on-error-&gt;&gt;</span> <span class="p">[</span><span class="nv">form</span> <span class="o">&amp;</span> <span class="nv">forms</span><span class="p">]</span>
</span><span class='line'>  <span class="p">(</span><span class="k">let </span><span class="p">[</span><span class="nv">g</span> <span class="p">(</span><span class="nf">gensym</span><span class="p">)</span>
</span><span class='line'>        <span class="nv">pstep</span> <span class="p">(</span><span class="k">fn </span><span class="p">[</span><span class="nv">step</span><span class="p">]</span> <span class="o">`</span><span class="p">(</span><span class="k">if </span><span class="p">(</span><span class="nb">instance? </span><span class="nv">Stopper</span> <span class="o">~</span><span class="nv">g</span><span class="p">)</span> <span class="o">~</span><span class="nv">g</span> <span class="p">(</span><span class="nf">-&gt;&gt;</span> <span class="o">~</span><span class="nv">g</span> <span class="o">~</span><span class="nv">step</span><span class="p">)))]</span>
</span><span class='line'>    <span class="o">`</span><span class="p">(</span><span class="k">let </span><span class="p">[</span><span class="o">~</span><span class="nv">g</span> <span class="o">~</span><span class="nv">form</span>
</span><span class='line'>           <span class="o">~@</span><span class="p">(</span><span class="nb">interleave </span><span class="p">(</span><span class="nb">repeat </span><span class="nv">g</span><span class="p">)</span> <span class="p">(</span><span class="nb">map </span><span class="nv">pstep</span> <span class="nv">forms</span><span class="p">))]</span>
</span><span class='line'>       <span class="p">(</span><span class="k">if </span><span class="p">(</span><span class="nb">instance? </span><span class="nv">Stopper</span> <span class="o">~</span><span class="nv">g</span><span class="p">)</span>
</span><span class='line'>         <span class="p">(</span><span class="nf">.x</span> <span class="o">~</span><span class="nv">g</span><span class="p">)</span>
</span><span class='line'>         <span class="o">~</span><span class="nv">g</span><span class="p">))))</span>
</span></code></pre></td></tr></table></div></figure>


<p>So what is this macro doing? First, it uses <code>gensym</code> to get a symbol
with a unique name and stores this in <code>g</code>. It then defines a helper
function called <code>pstep</code> for use in the code generation part of the
macro.</p>

<p>This macro generates a <code>let</code> block that repeatedly executes a form and
assigns the return value back to <code>g</code>. <code>g</code> is then checked to confirm
execution should continue before it is threaded into the next form. If
<code>g</code> is ever an instance of a <code>Stopper</code>, execution halts and the value
wrapped in the <code>Stopper</code> is returned.</p>

<p>Looking at an expanded version of a macro can be easier to understand
than a written explanation. Below is a macroexpanded version of one of
the tests.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='clojure'><span class='line'><span class="c1">;; What is being expanded</span>
</span><span class='line'><span class="p">(</span><span class="nb">macroexpand-1 </span><span class="o">&#39;</span><span class="p">(</span><span class="nf">exec/halt-on-error-&gt;&gt;</span> <span class="p">(</span><span class="nf">success-fn</span> <span class="s">&quot;first&quot;</span> <span class="s">&quot;&quot;</span><span class="p">)</span>
</span><span class='line'>                                       <span class="p">(</span><span class="nf">produce-error</span><span class="p">)</span>
</span><span class='line'>                                       <span class="p">(</span><span class="nf">success-fn</span> <span class="s">&quot;second&quot;</span><span class="p">)))</span>
</span><span class='line'>
</span><span class='line'><span class="c1">;; The expansion</span>
</span><span class='line'><span class="p">(</span><span class="k">let </span><span class="p">[</span><span class="nv">G__15365</span> <span class="p">(</span><span class="nf">success-fn</span> <span class="s">&quot;first&quot;</span> <span class="s">&quot;&quot;</span><span class="p">)</span>
</span><span class='line'>      <span class="nv">G__15365</span> <span class="p">(</span><span class="k">if </span><span class="p">(</span><span class="nb">instance? </span><span class="nv">halt.execution.Stopper</span> <span class="nv">G__15365</span><span class="p">)</span>
</span><span class='line'>                 <span class="nv">G__15365</span>
</span><span class='line'>                 <span class="p">(</span><span class="nf">-&gt;&gt;</span> <span class="nv">G__15365</span> <span class="p">(</span><span class="nf">produce-error</span><span class="p">)))</span>
</span><span class='line'>      <span class="nv">G__15365</span> <span class="p">(</span><span class="k">if </span><span class="p">(</span><span class="nb">instance? </span><span class="nv">halt.execution.Stopper</span> <span class="nv">G__15365</span><span class="p">)</span>
</span><span class='line'>                 <span class="nv">G__15365</span>
</span><span class='line'>                 <span class="p">(</span><span class="nf">-&gt;&gt;</span> <span class="nv">G__15365</span> <span class="p">(</span><span class="nf">success-fn</span> <span class="s">&quot;second&quot;</span><span class="p">)))]</span>
</span><span class='line'>  <span class="p">(</span><span class="k">if </span><span class="p">(</span><span class="nb">instance? </span><span class="nv">halt.execution.Stopper</span> <span class="nv">G__15365</span><span class="p">)</span>
</span><span class='line'>    <span class="p">(</span><span class="nf">.x</span> <span class="nv">G__15365</span><span class="p">)</span>
</span><span class='line'>    <span class="nv">G__15365</span><span class="p">))</span>
</span></code></pre></td></tr></table></div></figure>


<p>Looking at that expansion, you can see how we are using a <code>let</code> block
to repeatedly assign to the same symbol and we check that return value
before executing the next stop.</p>

<p>This isn&rsquo;t a new pattern. There are
<a href="https://github.com/kumarshantanu/promenade">libraries</a> that implement
similar ideas. At IN/Clojure 2018, Varun Sharma gave a
<a href="https://www.slideshare.net/VarunSharma143/elegant-errorhandling-for-a-more-civilized-age">talk</a>
about how this cleaned up their code. You can even get bogged down and
throw around words like monad when talking about it.</p>

<p>I&rsquo;d encourage you to look at your code and see if you have areas where
error handling code is detracting from the readability. This might be
an area where this, or something similar to it, would help.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Parsing multiple date formats with clj-time]]></title>
    <link href="https://jakemccrary.com/blog/2017/11/26/parsing-multiple-date-formats/"/>
    <updated>2017-11-26T09:52:00-06:00</updated>
    <id>https://jakemccrary.com/blog/2017/11/26/parsing-multiple-date-formats</id>
    <content type="html"><![CDATA[<p>I recently needed to optimize the speed of some Clojure code. After investigating, I identified that a huge number of exceptions were being thrown and handling these was slowing down the process.</p>

<p>The code throwing the exceptions was parsing strings into Joda-Time DateTime objects using the <a href="https://github.com/clj-time/clj-time">clj-time</a> library.</p>

<p>The code was calling <a href="https://github.com/clj-time/clj-time/blob/cce58248937bc05452ebfc8b65134961227a554e/src/clj_time/coerce.clj#L33-L38">clj-time.coerce/from-string</a> which calls <a href="https://github.com/clj-time/clj-time/blob/cce58248937bc05452ebfc8b65134961227a554e/src/clj_time/format.clj#L156-L165">clj-time.format/parse</a>. <code>format/parse</code> iterates through up to approximately 50 formatters in an attempt to parse whatever string you pass it. If one of these formatters doesn’t parse the string, it throws an exception which <code>format/parse</code> catches and ignores before attempting the next formatter.</p>

<p>This was pretty wasteful. This was especially wasteful in the code I was working in since it only needed to handle two different date formats.</p>

<p>Luckily, Joda-Time has a way to build a formatter that handles multiple formats and clj-time provides access to it. Below is code that creates a formatter that handles two different formats.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='clojure'><span class='line'><span class="p">(</span><span class="kd">ns </span><span class="nv">multiple-dates.core</span>
</span><span class='line'>  <span class="p">(</span><span class="ss">:require</span> <span class="p">[</span><span class="nv">clj-time.core</span> <span class="ss">:as</span> <span class="nv">time</span><span class="p">]</span>
</span><span class='line'>            <span class="p">[</span><span class="nv">clj-time.format</span> <span class="ss">:as</span> <span class="nv">time-format</span><span class="p">]))</span>
</span><span class='line'>
</span><span class='line'><span class="p">(</span><span class="k">def </span><span class="nv">multi-format</span>
</span><span class='line'>  <span class="p">(</span><span class="nf">time-format/formatter</span> <span class="nv">time/utc</span>
</span><span class='line'>                         <span class="s">&quot;YYYY-MM-dd&quot;</span>
</span><span class='line'>                         <span class="s">&quot;YYYY-MM-dd&#39;T&#39;HH:mm:ss.SSSZ&quot;</span><span class="p">))</span>
</span><span class='line'>
</span><span class='line'><span class="p">(</span><span class="kd">defn </span><span class="nb">parse </span><span class="p">[</span><span class="nv">s</span><span class="p">]</span>
</span><span class='line'>  <span class="p">(</span><span class="nf">time-format/parse</span> <span class="nv">multi-format</span> <span class="nv">s</span><span class="p">))</span>
</span></code></pre></td></tr></table></div></figure>


<p>And below are some examples of using it in the repl.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='clojure'><span class='line'><span class="nv">multiple-dates.core&gt;</span> <span class="p">(</span><span class="nb">parse </span><span class="s">&quot;2017-09-04&quot;</span><span class="p">)</span>
</span><span class='line'><span class="o">#</span><span class="nv">object</span><span class="p">[</span><span class="nv">org.joda.time.DateTime</span> <span class="mi">0</span><span class="nv">x5d5e4cd7</span> <span class="s">&quot;2017-09-04T00:00:00.000Z&quot;</span><span class="p">]</span>
</span><span class='line'>
</span><span class='line'><span class="nv">multiple-dates.core&gt;</span> <span class="p">(</span><span class="nb">parse </span><span class="s">&quot;2017-09-04T12:11:02.123Z&quot;</span><span class="p">)</span>
</span><span class='line'><span class="o">#</span><span class="nv">object</span><span class="p">[</span><span class="nv">org.joda.time.DateTime</span> <span class="mi">0</span><span class="nv">x174f3a5c</span> <span class="s">&quot;2017-09-04T12:11:02.123Z&quot;</span><span class="p">]</span>
</span><span class='line'>
</span><span class='line'><span class="nv">multiple-dates.core&gt;</span> <span class="p">(</span><span class="nb">parse </span><span class="s">&quot;2017-09-04-12:11:02.123Z&quot;</span><span class="p">)</span>
</span><span class='line'><span class="nv">IllegalArgumentException</span> <span class="nv">Invalid</span> <span class="nv">format</span><span class="err">:</span> <span class="s">&quot;2017-09-04-12:11:02.123Z&quot;</span> <span class="nv">is</span> <span class="nv">malformed</span> <span class="nv">at</span> <span class="s">&quot;-12:11:02.123Z&quot;</span>  <span class="nv">org.joda.time.format.DateTimeFormatter.parseDateTime</span> <span class="p">(</span><span class="nf">DateTimeFormatter.java</span><span class="ss">:945</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>Looking back at that code, it seems pretty straightforward. I’ll admit that it took me and my pair a while to figure out how to do this using <code>clj-time</code>. I ended up looking at Joda-Time&rsquo;s documentation and implemented this using Java interop before I cracked how to use <code>clj-time.format/formatter</code> to do the same thing.</p>
]]></content>
  </entry>
  
</feed>
