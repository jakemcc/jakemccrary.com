---
layout: post
title: "Improve your tests by picking better constants"
date: 2021-02-28 18:35:44 -0600
comments: true
published: false
description: The constants you put in your test code can improve its readability. You should put thought into them.
keywords: 'csv, keywords, here'
categories: 
---

The constants you use in your unit tests can make your tests better.
Like test names and variables, they can improve the readability of your code and make it easier to understand test failures.

Let's get into an example.

Pretend your codebase has a relatively simple key-value pair concept for managing configuration.
It also allows you to load configs from a few known files and, depending on what mode it is in, lets keys from from file override keys from another.
You main entry point to interacting with this config system is the `config-value` function.
It takes a map that represents these files and the values contained in them, a string to lookup, and a keyword representing the mode.

You stumble across some tests code written like this first example.
This code has a shared variable, `config`, that holds a representation of the config data and some tests that make assertions.

```clojure
(def config {"scratch.conf" {"a" "1"}

             "development.conf" {"a" "2"
                                 "b" "2"}

             "application.conf" {"a" "3"
                                 "b" "3"
                                 "c" "3"}})

(deftest handles-overrides-in-dev-mode
  (is (= "1" (config-value config "a" :dev)))
  (is (= "2" (config-value config "b" :dev)))
  (is (= "3" (config-value config "c" :dev))))

(deftest handles-overrides-in-prod-mode
  (is (= "3" (config-value config "a" :prod)))
  (is (= "3" (config-value config "b" :prod)))
  (is (= "3" (config-value config "c" :prod))))
```

The above piece of code isn't as clear as it could be.
When reading the tests, you need to keep referencing what values are in `config`.

You read the code `(= "2" (config-value config "b" :dev))` and you aren't given any help with regards to what `"2"` or `"b`" mean.
You have to keep looking up the code sample to map the used values back to where they came from.

This isn't great.
This adds cognitive overhead that doesn't need to be there.

Let's rewrite it by swapping in some different values.


```clojure
(def config {"scratch.conf" {"dev+app+scratch" "from scratch"}

             "development.conf" {"dev+app+scratch" "from development"
                                 "dev+app" "from development"}

             "application.conf" {"dev+app+scratch" "from application"
                                 "dev+app" "from application"
                                 "app" "from application"}})

(deftest handles-overrides-in-dev-mode
  (is (= "from scratch" (config-value config "dev+app+scratch" :dev)))
  (is (= "from development" (config-value config "dev+app" :dev)))
  (is (= "from application" (config-value config "app" :dev))))

(deftest handles-overrides-in-prod-mode
  (is (= "from application" (config-value config "a" :prod)))
  (is (= "from application" (config-value config "b" :prod)))
  (is (= "from application" (config-value config "c" :prod))))
```

I'm not going to claim this is the most amazing piece of code but it is better than before.
You can read `(= "from development" (config-value config "dev+app" :dev))` in it and have an idea that you are looking up a key that is found in the `dev` and `app` config and the expected value tells you where it came from (`"from development"`).

Because of the changes in the constants in this test suite the reader has a better chance of reasoning about a piece of code without needing to maintain knowledge of what they've read earlier in the file.
They no longer need to remember "Oh yeah, `"2"` comes from the development.conf section."
The refactored expected value does that for the reader.

These even helps when tests fails.
Which of the following would you rather see?

```
FAIL in (handles-overrides-in-dev-mode) (example.clj:22)
expected: "2"
  actual: "3"
    diff: - "2"
          + "3"
```

```
FAIL in (handles-overrides-in-dev-mode) (example.clj:41)
expected: "from development"
  actual: "from application"
    diff: - "from development"
          + "from application"
```

I'd rather see the second one.
I can read it and have _some_ idea what might be broken instead of just wondering what `"2"` and `"3"` mean.

The constants we choose to use in test code can make or break the readability.
They help future you or other maintainer understand the test better.
They help you understand failures faster.
You should put some thought into the constants that are used in your tests.
