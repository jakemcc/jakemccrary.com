<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: command-line | Jake McCrary]]></title>
  <link href="https://jakemccrary.com/blog/categories/command-line/atom.xml" rel="self"/>
  <link href="https://jakemccrary.com/"/>
  <updated>2022-03-13T16:53:05-05:00</updated>
  <id>https://jakemccrary.com/</id>
  <author>
    <name><![CDATA[Jake McCrary]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Utilities I like: selecta]]></title>
    <link href="https://jakemccrary.com/blog/2020/08/31/utilities-i-like-selecta/"/>
    <updated>2020-08-31T22:24:00-05:00</updated>
    <id>https://jakemccrary.com/blog/2020/08/31/utilities-i-like-selecta</id>
    <content type="html"><![CDATA[<p><a href="https://github.com/garybernhardt/selecta">Selecta</a> is a command-line utility that gives you the power to fuzzy select items from a list of text.
What does that mean?
It means you pipe <code>selecta</code> a list of text on stdin, it helps you make a choice from items in that list, and then <code>selecta</code> prints that choice to stdout.</p>

<p>Here is an example of me using it to help me narrow in on what file I&rsquo;d like to pass to <code>wc</code>.</p>

<p><video autoplay loop muted playsinline>
  <source src="https://jakemccrary.com/images/selecta-search.webm" type="video/webm">
  <source src="https://jakemccrary.com/images/selecta-search.mp4" type="video/mp4">
</video></p>

<p>In this example, I search for markdown files using <code>ripgrep</code> (<code>rg</code>), type part of a filename, hit enter to select the match, and then see the <code>wc</code> stats of that file.
This isn&rsquo;t the greatest example of using <code>selecta</code> but it adequately shows what it does.</p>

<p>Some number of years ago, I wrote a script called <code>connect-db</code>.
This script used <code>selecta</code>, along with <code>grep</code>, <code>sed</code>, and <code>cut</code>, to provide a very pleasant command-line experience for connecting to known databases.
My coworkers and I used this script frequently.</p>

<p>By combining <code>selecta</code> with other stdin/stdout friendly command-line tools you can build really enjoyable, time-saving tools.
<a href="https://github.com/garybernhardt/selecta">Selecta</a> is a useful utility to add to your toolkit.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[How to be automatically notified when long running processes finish]]></title>
    <link href="https://jakemccrary.com/blog/2020/05/04/how-to-be-alerted-when-a-long-running-process-finishes/"/>
    <updated>2020-05-04T20:35:00-05:00</updated>
    <id>https://jakemccrary.com/blog/2020/05/04/how-to-be-alerted-when-a-long-running-process-finishes</id>
    <content type="html"><![CDATA[<p>Let me set the stage.
I kick off the compilation of a large Scala codebase.
This will take minutes to finish, so I switch to Slack and catch up on what coworkers have posted.
Someone posted an interesting link and I follow it to an article.
Fifteen minutes later, I notice the compilation finished twelve minutes ago.
I silently grumble at myself, disappointed that I didn&rsquo;t start the next step twelve minutes ago.</p>

<p>Has some variation of the above happened to you?</p>

<p>It doesn&rsquo;t happen to me anymore because now my computer tells me when any long running process finishes.
This might sound annoying but it is great.
I no longer feel guilty<sup id="fnref:1"><a href="#fn:1" rel="footnote">1</a></sup> for dropping into Slack and can immediately get back to the task at hand as soon the process finishes.</p>

<p>I&rsquo;ve done this by enhancing on my setup for showing the <a href="/blog/2020/04/21/using-bash-preexec-for-monitoring-the-runtime-of-your-last-command/">runtime of the previous command in my prompt</a>.
You don&rsquo;t have to read that article for the rest of this one to make sense, but you should because it shows you how to add a very useful feature to your prompt.</p>

<p>Below is the code that causes my computer to tell me when it finishes running commands that takes longer than 30 seconds.
It is found in my <code>~/.bashrc</code>.
An explanation follows the code snippet.</p>

<pre><code class="bash"># Using https://github.com/rcaloras/bash-preexec
preexec() {
  _last_command=$1
  if [ "UNSET" == "${_timer}" ]; then
    _timer=$SECONDS
  else 
    _timer=${_timer:-$SECONDS}
  fi 
}

_maybe_speak() {
    local elapsed_seconds=$1
    if (( elapsed_seconds &gt; 30 )); then
        local c
        c=$(echo "${_last_command}" | cut -d' ' -f1)
        ( say "finished ${c}" &amp; )
    fi
}

precmd() {
  if [ "UNSET" == "${_timer}" ]; then
     timer_show="0s"
  else 
    elapsed_seconds=$((SECONDS - _timer))
    _maybe_speak ${elapsed_seconds}
    timer_show="$(format-duration seconds $elapsed_seconds)"
  fi
  _timer="UNSET"
}

# put at the bottom of my .bashrc
[[ -f "$HOME/.bash-preexec.sh" ]] &amp;&amp; source "$HOME/.bash-preexec.sh"
</code></pre>

<p><a href="https://github.com/rcaloras/bash-preexec">Bash-Preexec</a> triggers the <code>preexec</code>, immediately before a command is execute, and <code>precmd</code> functions, immediately before the shell prompt reappears.
Those two functions are enough to figure out how much time has elapsed while a command ran.
You setup Bash-Preexec by downloading <a href="https://github.com/rcaloras/bash-preexec/blob/master/bash-preexec.sh">bash-preexec.sh</a> and sourcing it in your <code>~/.bashrc</code>.</p>

<p><code>preexec</code> is passed the command being ran and it captures it in <code>_last_command</code>.
It also captures the current number of seconds the shell has been running as <code>_timer</code>.</p>

<p><code>precmd</code> uses the value in <code>_timer</code> to calculate the elapsed time in seconds and then calls the function <code>_maybe_speak</code> with this as an argument.
It also does the work required for showing the elapsed time in my prompt.</p>

<p>If the elapsed time is greater than 30 seconds then <code>_maybe_speak</code> uses <code>cut</code> to discard the arguments of captured command, leaving me with the command itself.
It then uses <code>say</code> to produce an audible alert of what command just finished.
I discard the arguments because otherwise the <code>say</code> command can go on for a long time.</p>

<p><code>say</code> is a tool that ships with macOS.
I haven&rsquo;t gotten around to it yet but I&rsquo;ll need to use something else on my Linux machines.</p>

<p>You may have noticed that I run <code>say</code> in the background and in a subshell.
Running it in the background lets me continue interacting with my shell while <code>say</code> finishes executing and running it in a subshell prevents text from appearing in my shell when the background job finishes.</p>

<p>With this setup, I can kick off a slow compile or test run and not feel so bad about dropping into Slack or reading Reddit. It is wonderful and I&rsquo;d recommend it (though, I&rsquo;d more strongly recommend not having commands that take a while to run).</p>
<div class="footnotes">
<hr/>
<ol>
<li id="fn:1">
<p>I still feel a little guilty as doing so will break any momentum/flow I had going on, but that flow was already broken by the slowness of the command.<a href="#fnref:1" rev="footnote">&#8617;</a></p></li>
</ol>
</div>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Using Bash-Preexec for monitoring the runtime of your last command]]></title>
    <link href="https://jakemccrary.com/blog/2020/04/21/using-bash-preexec-for-monitoring-the-runtime-of-your-last-command/"/>
    <updated>2020-04-21T18:22:00-05:00</updated>
    <id>https://jakemccrary.com/blog/2020/04/21/using-bash-preexec-for-monitoring-the-runtime-of-your-last-command</id>
    <content type="html"><![CDATA[<p>My article on <a href="/blog/2015/05/03/put-the-last-commands-run-time-in-your-bash-prompt/">putting the runtime of your last command into your bash prompt</a> is one of my most surfaced-by-google articles.
Why is this a great to your prompt?
To quote my previous article:</p>

<blockquote><p>I’m fairly certain the following scenario has happened to every terminal user. You run a command and, while it is running, realize you should have prefixed it with <code>time</code>. You momentarily struggle with the thought of killing the command and rerunning it with <code>time</code>. You decide not to and the command finishes without you knowing how long it took. You debate running it again.</p>

<p>For the last year I’ve lived in a world without this problem. Upon completion, a command’s approximate run time is displayed in my prompt. It is awesome.</p></blockquote>

<p>I&rsquo;ve been living without the above problem since sometime in 2014 and not having that problem is still awesome.</p>

<p>I have made some changes since 2014.</p>

<p>One change was switching to using <a href="https://github.com/rcaloras/bash-preexec">Bash-Preexec</a> instead of directly using <code>trap</code> and <code>$PROMPT_COMMAND</code> for calling functions to start and stop tracking runtime.
Bash-Preexec lets you trigger a function (or multiple) right after a command has been read and right before each prompt.</p>

<p>The usage is pretty straight forward.
In the most basic case, you source <code>bash-preexec.sh</code> and then provide functions named <code>preexec</code>, which is invoked right before a command is executed, and/or <code>precmd</code>, which is invoked just before each prompt.
<code>bash-preexec.sh</code> can be downloaded from <a href="https://github.com/rcaloras/bash-preexec/">its repo</a>.
The changes required to move to Bash-Preexec pretty <a href="https://github.com/jakemcc/dotfiles/commit/46fc3dc9d4d7d0d73152c77b7383645af42b3d5d">pretty minimal</a>.</p>

<p>The other change was introducing the script, <a href="https://github.com/jakemcc/dotfiles/blob/9c8c0315f35b55df6cef7e21261e3dcbbfac86e1/home/.bin/format-duration#L3-L4">format-duration</a> by <a href="https://twitter.com/gfredericks_">Gary Fredericks</a>, to humanely format the time.
This script converts seconds into a more readable string (example: 310 to <code>5m10s</code>)</p>

<p>Here is a screenshot of everything in action (with a reduced prompt, my normal one includes git and other info).</p>

<p><img src="/images/runtime-humane-example.png" width="320" height="150" title="&ldquo;Command line prompt showing runtimes of previous commands&rdquo; &ldquo;Command line prompt showing runtimes of previous commands&rdquo;" ></p>

<p>Below is a simplified snippet from my <code>.bashrc</code> that provides runtimes using both of these additions.</p>

<pre><code class="bash">preexec() {
  if [ "UNSET" == "${timer}" ]; then
    timer=$SECONDS
  else 
    timer=${timer:-$SECONDS}
  fi 
}

precmd() {
  if [ "UNSET" == "${timer}" ]; then
     timer_show="0s"
  else 
    the_seconds=$((SECONDS - timer))
    # use format-duration to make time more human readable
    timer_show="$(format-duration seconds $the_seconds)" 
  fi
  timer="UNSET"
}

# Add $last_show to the prompt.
PS1='[last: ${timer_show}s][\w]$ '

# a bunch more lines until the end of my .bashrc
# where I include .bash-preexec.sh
[[ -f "$HOME/.bash-preexec.sh" ]] &amp;&amp; source "$HOME/.bash-preexec.sh"
</code></pre>

<p>No more wondering about the runtime of commands is great.
Introducing <code>format-duration</code> made reading the time easier while Bash-Preexec made reading the implementation easier.
I highly recommend setting up something similar for your shell.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[A more helpful makefile]]></title>
    <link href="https://jakemccrary.com/blog/2018/12/27/a-more-helpful-makefile/"/>
    <updated>2018-12-27T21:21:00-06:00</updated>
    <id>https://jakemccrary.com/blog/2018/12/27/a-more-helpful-makefile</id>
    <content type="html"><![CDATA[<p>In an <a href="/blog/2016/11/30/unify-your-project-interfaces/">older article</a> of mine I extolled the virtues of having unified interfaces for interacting with your projects. I recently started working at Coinbase and the group I&rsquo;m working with is mostly using makefiles as that common interface. We still have some more work to do to unify the makefile targets of the various projects but I&rsquo;ve picked up one tip that makes switching between projects easier.</p>

<p>That tip is to have the default target of your makefile be one that prints out a helpful message. This looks like the following.</p>

<pre><code>.PHONY: help
help:
    @grep -E '^[0-9a-zA-Z_-]+:.*?## .*$$' $(MAKEFILE_LIST) | \
     sort | \
     awk 'BEGIN {FS = ":.*?## "}; {printf "\033[36m%-30s\033[0m %s\n", $$1, $$2}'
</code></pre>

<p>There is a lot going on there but it basically looks through your makefile targets and finds the ones that have a comment starting with <code>##</code> after the target dependencies. Those targets are printed to the console along with the comment.</p>

<p>As an example, the makefile for my website looks similar to the below file.</p>

<pre><code>.PHONY: help
help:
    @grep -E '^[0-9a-zA-Z_-]+:.*?## .*$$' $(MAKEFILE_LIST) | \
     sort | \
     awk 'BEGIN {FS = ":.*?## "}; {printf "\033[36m%-30s\033[0m %s\n", $$1, $$2}'

.PHONY: watch
watch: ## Watch for changes and serve preview of site with drafts
    bundle exec rake clean
    bundle exec rake preview

.PHONY: develop
develop: ## Serve a preview of the site without drafts and refresh changes
    bundle exec rake clean
    bundle exec rake develop

.PHONY: new_adventure
new_adventure: ## Start a new adventure post
    bundle exec rake new_adventure

.PHONY: new_post
new_post: ## Start a new post
    bundle exec rake new_post 

.PHONY: deploy
deploy: ## deploy
    ./deploy.sh
</code></pre>

<p>When this file, when I run <code>make</code> in this websites source, I get the following output.</p>

<pre><code>0 [last: 0s] 21:11:50 ~/src/jakemcc/blog (master)
$ make
deploy                         deploy
develop                        Serve a preview of the site without drafts and refresh changes
new_adventure                  Start a new adventure post
new_post                       Start a new post
watch                          Watch for changes and serve preview of site with drafts
</code></pre>

<p>This is super useful when you&rsquo;re starting doing work in a new project. With this feature you can get a quick list of useful targets and a description. It allows you to quickly see what can be done in a project.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Unify your project interfaces]]></title>
    <link href="https://jakemccrary.com/blog/2016/11/30/unify-your-project-interfaces/"/>
    <updated>2016-11-30T17:51:00-06:00</updated>
    <id>https://jakemccrary.com/blog/2016/11/30/unify-your-project-interfaces</id>
    <content type="html"><![CDATA[<p>Jeff Ramnani wrote an <a href="https://jefframnani.com/project-build-protocol/">article</a> about unifying your command line interactions across programming projects. I recommend that you read it. The basic gist is that we often find ourselves working on multiple projects at a time. Frequently these projects are in different languages and use different build tools. Remembering the necessary incantations to interact with the various projects is difficult and we&rsquo;re lazy. We can do better by standardizing an interface to our projects.</p>

<p>This interface can take many forms. One option is to have a <code>bin</code> or <code>scripts</code> directory in each project and then consistently name the scripts you put in there (examples: <code>run</code>, <code>test</code>, and <code>build</code>). Another option is to use Makefiles with consistently named targets. Either way, your projects now have a standard way of interacting with them. This frees you from having to remember all the various commands and makes onboarding new developers easier.</p>

<p>I&rsquo;ve been using a similar approach to Jeff Ramnani for years and highly recommend it. I&rsquo;m a fan of the Makefile approach but either approach works. The unified targets I use across projects are the following:</p>

<ul>
<li><code>up</code> - Brings the system up</li>
<li><code>status</code> - Is the system up and running?</li>
<li><code>logs</code> - Show me the logs</li>
<li><code>local-db</code> - Connect to my local database</li>
<li><code>build</code> - Build the project</li>
<li><code>test</code> - Run the tests</li>
</ul>


<p>If you haven&rsquo;t created a common interface for your projects I recommend that you do it. It definitely makes moving between projects easier.</p>
]]></content>
  </entry>
  
</feed>
