<?xml version="1.0" encoding="UTF-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title><![CDATA[Jake McCrary's articles on make]]></title>
  <link href="https://jakemccrary.com/atom.xml" rel="self"/>
  <link href="https://jakemccrary.com/"/>
  <updated>2025-02-17T20:03:49+00:00</updated>
  <id>https://jakemccrary.com/</id>
  <author>
    <name><![CDATA[Jake McCrary]]></name>
  </author>
  <entry>
    <id>https://jakemccrary.com/blog/2018/12/27/a-more-helpful-makefile/index.html</id>
    <link href="https://jakemccrary.com/blog/2018/12/27/a-more-helpful-makefile/index.html"/>
    <title><![CDATA[A more helpful makefile]]></title>
    <updated>2018-12-27T23:59:59+00:00</updated>
    <content type="html"><![CDATA[<p>In an <a href='/blog/2016/11/30/unify-your-project-interfaces/'>older article</a> of mine I extolled the virtues of having unified interfaces for interacting with your projects. I recently started working at Coinbase and the group I'm working with is mostly using makefiles as that common interface. We still have some more work to do to unify the makefile targets of the various projects but I've picked up one tip that makes switching between projects easier.</p><p>That tip is to have the default target of your makefile be one that prints out a helpful message. This looks like the following.</p><pre><code>.PHONY: help
help:
	@grep -E '&#94;&#91;0-9a-zA-Z&#95;-&#93;+:.&#42;?## .&#42;$$' $&#40;MAKEFILE&#95;LIST&#41; | \
	 sort | \
	 awk 'BEGIN {FS = &quot;:.&#42;?## &quot;}; {printf &quot;\033&#91;36m%-30s\033&#91;0m %s\n&quot;, $$1, $$2}'
</code></pre><p>There is a lot going on there but it basically looks through your makefile targets and finds the ones that have a comment starting with <code>##</code> after the target dependencies. Those targets are printed to the console along with the comment.</p><p>As an example, the makefile for my website looks similar to the below file.</p><pre><code>.PHONY: help
help:
	@grep -E '&#94;&#91;0-9a-zA-Z&#95;-&#93;+:.&#42;?## .&#42;$$' $&#40;MAKEFILE&#95;LIST&#41; | \
	 sort | \
	 awk 'BEGIN {FS = &quot;:.&#42;?## &quot;}; {printf &quot;\033&#91;36m%-30s\033&#91;0m %s\n&quot;, $$1, $$2}'

.PHONY: watch
watch: ## Watch for changes and serve preview of site with drafts
	bundle exec rake clean
	bundle exec rake preview

.PHONY: develop
develop: ## Serve a preview of the site without drafts and refresh changes
	bundle exec rake clean
	bundle exec rake develop

.PHONY: new&#95;adventure
new&#95;adventure: ## Start a new adventure post
	bundle exec rake new&#95;adventure

.PHONY: new&#95;post
new&#95;post: ## Start a new post
	bundle exec rake new&#95;post 

.PHONY: deploy
deploy: ## deploy
	./deploy.sh
</code></pre><p>When this file, when I run <code>make</code> in this websites source, I get the following output.</p><pre><code>0 &#91;last: 0s&#93; 21:11:50 &#126;/src/jakemcc/blog &#40;master&#41;
$ make
deploy                         deploy
develop                        Serve a preview of the site without drafts and refresh changes
new&#95;adventure                  Start a new adventure post
new&#95;post                       Start a new post
watch                          Watch for changes and serve preview of site with drafts
</code></pre><p>This is super useful when you're starting doing work in a new project. With this feature you can get a quick list of useful targets and a description. It allows you to quickly see what can be done in a project.</p>]]></content>
  </entry>
  <entry>
    <id>https://jakemccrary.com/blog/2016/11/30/unify-your-project-interfaces/index.html</id>
    <link href="https://jakemccrary.com/blog/2016/11/30/unify-your-project-interfaces/index.html"/>
    <title><![CDATA[Unify your project interfaces]]></title>
    <updated>2016-11-30T23:59:59+00:00</updated>
    <content type="html"><![CDATA[<p>Jeff Ramnani wrote an <a href='https://jefframnani.com/project-build-protocol/'>article</a> about unifying your command line interactions across programming projects. I recommend that you read it. The basic gist is that we often find ourselves working on multiple projects at a time. Frequently these projects are in different languages and use different build tools. Remembering the necessary incantations to interact with the various projects is difficult and we're lazy. We can do better by standardizing an interface to our projects.</p><p>This interface can take many forms. One option is to have a <code>bin</code> or <code>scripts</code> directory in each project and then consistently name the scripts you put in there (examples: <code>run</code>, <code>test</code>, and <code>build</code>). Another option is to use Makefiles with consistently named targets. Either way, your projects now have a standard way of interacting with them. This frees you from having to remember all the various commands and makes onboarding new developers easier.</p><p>I've been using a similar approach to Jeff Ramnani for years and highly recommend it. I'm a fan of the Makefile approach but either approach works. The unified targets I use across projects are the following:</p><ul><li><code>up</code> - Brings the system up</li><li><code>status</code> - Is the system up and running?</li><li><code>logs</code> - Show me the logs</li><li><code>local-db</code> - Connect to my local database</li><li><code>build</code> - Build the project</li><li><code>test</code> - Run the tests</li></ul><p>If you haven't created a common interface for your projects I recommend that you do it. It definitely makes moving between projects easier.</p>]]></content>
  </entry>
</feed>
