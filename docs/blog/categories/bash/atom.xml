<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: bash | Jake McCrary]]></title>
  <link href="https://jakemccrary.com/blog/categories/bash/atom.xml" rel="self"/>
  <link href="https://jakemccrary.com/"/>
  <updated>2020-04-21T18:23:07-05:00</updated>
  <id>https://jakemccrary.com/</id>
  <author>
    <name><![CDATA[Jake McCrary]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Using Bash-Preexec for monitoring the runtime of your last command]]></title>
    <link href="https://jakemccrary.com/blog/2020/04/21/using-bash-preexec-for-monitoring-the-runtime-of-your-last-command/"/>
    <updated>2020-04-21T18:22:00-05:00</updated>
    <id>https://jakemccrary.com/blog/2020/04/21/using-bash-preexec-for-monitoring-the-runtime-of-your-last-command</id>
    <content type="html"><![CDATA[<p>My article on <a href="/blog/2015/05/03/put-the-last-commands-run-time-in-your-bash-prompt/">putting the runtime of your last command into your bash prompt</a> is one of my most surfaced-by-google articles.
Why is this a great to your prompt?
To quote my previous article:</p>

<blockquote><p>I’m fairly certain the following scenario has happened to every terminal user. You run a command and, while it is running, realize you should have prefixed it with <code>time</code>. You momentarily struggle with the thought of killing the command and rerunning it with <code>time</code>. You decide not to and the command finishes without you knowing how long it took. You debate running it again.</p>

<p>For the last year I’ve lived in a world without this problem. Upon completion, a command’s approximate run time is displayed in my prompt. It is awesome.</p></blockquote>

<p>I&rsquo;ve been living without the above problem since sometime in 2014 and not having that problem is still awesome.</p>

<p>I have made some changes since 2014.</p>

<p>One change was switching to using <a href="https://github.com/rcaloras/bash-preexec">Bash-Preexec</a> instead of directly using <code>trap</code> and <code>$PROMPT_COMMAND</code> for calling functions to start and stop tracking runtime.
Bash-Preexec lets you trigger a function (or multiple) right after a command has been read and right before each prompt.</p>

<p>The usage is pretty straight forward.
In the most basic case, you source <code>bash-preexec.sh</code> and then provide functions named <code>preexec</code>, which is invoked right before a command is executed, and/or <code>precmd</code>, which is invoked just before each prompt.
<code>bash-preexec.sh</code> can be downloaded from <a href="https://github.com/rcaloras/bash-preexec/">its repo</a>.
The changes required to move to Bash-Preexec pretty <a href="https://github.com/jakemcc/dotfiles/commit/46fc3dc9d4d7d0d73152c77b7383645af42b3d5d">pretty minimal</a>.</p>

<p>The other change was introducing the script, <a href="https://github.com/jakemcc/dotfiles/blob/9c8c0315f35b55df6cef7e21261e3dcbbfac86e1/home/.bin/format-duration#L3-L4">format-duration</a> by <a href="https://twitter.com/gfredericks_">Gary Fredericks</a>, to humanely format the time.
This script converts seconds into a more readable string (example: 310 to <code>5m10s</code>)</p>

<p>Here is a screenshot of everything in action (with a reduced prompt, my normal one includes git and other info).</p>

<p><img src="/images/runtime-humane-example.png" width="320" height="150" title="&ldquo;Command line prompt showing runtimes of previous commands&rdquo; &ldquo;Command line prompt showing runtimes of previous commands&rdquo;" ></p>

<p>Below is a simplified snippet from my <code>.bashrc</code> that provides runtimes using both of these additions.</p>

<pre><code class="bash">function preexec {
  if [ "UNSET" == "${timer}" ]; then
    timer=$SECONDS
  else 
    timer=${timer:-$SECONDS}
  fi 
}

function precmd {
  if [ "UNSET" == "${timer}" ]; then
     timer_show="0s"
  else 
    the_seconds=$((SECONDS - timer))
    # use format-duration to make time more human readable
    timer_show="$(format-duration seconds $the_seconds)" 
  fi
  timer="UNSET"
}

# Add $last_show to the prompt.
PS1='[last: ${timer_show}s][\w]$ '

# a bunch more lines until the end of my .bashrc
# where I include .bash-preexec.sh
[ -f "$HOME/.bash-preexec.sh" ] &amp;&amp; source "$HOME/.bash-preexec.sh"
</code></pre>

<p>No more wondering about the runtime of commands is great.
Introducing <code>format-duration</code> made reading the time easier while Bash-Preexec made reading the implementation easier.
I highly recommend setting up something similar for your shell.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Auto-syncing a git repository]]></title>
    <link href="https://jakemccrary.com/blog/2020/02/25/auto-syncing-a-git-repository/"/>
    <updated>2020-02-25T21:09:00-06:00</updated>
    <id>https://jakemccrary.com/blog/2020/02/25/auto-syncing-a-git-repository</id>
    <content type="html"><![CDATA[<p>I&rsquo;m currently keep notes on my computer using plain text and <a href="https://orgmode.org/">Org mode</a>.</p>

<p>I keep my notes in a git repository in my home directory, <code>~/org/</code>.
I want my notes to be synced between my computers without me thinking about it.
Historically, I&rsquo;ve reached for something like Google Drive or Dropbox to do this but this time I reached for git and GitHub.</p>

<p>Below is the script that I ended up cobbling together from various sources found online.
The script pushes and pulls changes from a remote repository and works on my macOS and linux machines.</p>

<p>The loop starting on line 38 does the work.
Whenever a file-watcher notices a change or 10 minutes passes, the loop pulls changes from a remote repository, commits any local changes, and pushes to the remote repository.
The lines before this are mostly checking that needed programs exist on the host.</p>

<p>I keep this running in a background terminal and I check periodically to confirm it is still running.
I could do something fancier but this isn&rsquo;t a critical system and the overhead of checking every couple days is nearly zero.
Most of the time checking happens by accident when I accidentally maximize the terminal that runs the script.</p>

<p>I&rsquo;ve been using this script for a long time now and I&rsquo;ve found it quite useful. I hope you do too.</p>

<pre><code class="bash">#!/bin/bash

set -e

TARGETDIR="$HOME/org/"

stderr () {
    echo "$1" &gt;&amp;2
}

is_command() {
    command -v "$1" &amp;&gt;/dev/null
}

if [ "$(uname)" != "Darwin" ]; then
    INW="inotifywait";
    EVENTS="close_write,move,delete,create";
    INCOMMAND="\"$INW\" -qr -e \"$EVENTS\" --exclude \"\.git\" \"$TARGETDIR\""
else # if Mac, use fswatch
    INW="fswatch";
    # default events specified via a mask, see
    # https://emcrisostomo.github.io/fswatch/doc/1.14.0/fswatch.html/Invoking-fswatch.html#Numeric-Event-Flags
    # default of 414 = MovedTo + MovedFrom + Renamed + Removed + Updated + Created
    #                = 256 + 128+ 16 + 8 + 4 + 2
    EVENTS="--event=414"
    INCOMMAND="\"$INW\" --recursive \"$EVENTS\" --exclude \"\.git\" --one-event \"$TARGETDIR\""
fi

for cmd in "git" "$INW" "timeout"; do
    # in OSX: `timeout` =&gt; brew install coreutils
    # in OSX: `fswatch` =&gt; brew install fswatch
    is_command "$cmd" || { stderr "Error: Required command '$cmd' not found"; exit 1; }
done

cd "$TARGETDIR"
echo "$INCOMMAND"

while true; do
    eval "timeout 600 $INCOMMAND" || true
    git pull
    sleep 5
    STATUS=$(git status -s)
    if [ -n "$STATUS" ]; then
        echo "$STATUS"
        echo "commit!"
        git add .
        git commit -m "autocommit"
        git push origin
    fi
done
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Send a push notification when your external IP address changes]]></title>
    <link href="https://jakemccrary.com/blog/2017/05/15/send-a-push-notification-when-your-external-ip-address-changes/"/>
    <updated>2017-05-15T22:15:00-05:00</updated>
    <id>https://jakemccrary.com/blog/2017/05/15/send-a-push-notification-when-your-external-ip-address-changes</id>
    <content type="html"><![CDATA[<p>I need to know when my external IP address changes. Whenever it changes, I need to update an IP whitelist and need to re-login to a few sites. I sometimes don&rsquo;t notice for a couple of days and, during that time, some automatic processes fail.</p>

<p>After the last time this happened, I whipped up a script that sends me a push notification when my IP address changes.</p>

<p>The script uses <a href="https://pushover.net/">Pushover</a> to send the push notification. Pushover is great. I have used it for years to get notifications from my headless computers. If you use the below script, replace <code>${PUSHOVER_TOKEN}</code> and <code>${PUSHOVER_USER}</code> with your own details.</p>

<pre><code class="bash">#!/bin/bash

set -e

previous_file="${HOME}/.previous-external-ip"

if [ ! -e "${previous_file}" ]; then
    dig +short myip.opendns.com @resolver1.opendns.com &gt; "${previous_file}"
fi

current_ip=$(dig +short myip.opendns.com @resolver1.opendns.com)

previous_ip=$(cat "${previous_file}")

if [ "${current_ip}" != "${previous_ip}" ]; then
    echo "external ip changed"
    curl -s --form-string "token=${PUSHOVER_TOKEN}" \
         --form-string "user=${PUSHOVER_USER}" \
         --form-string "title=External IP address changed" \
         --form-string "message='${previous_ip}' =&gt; '${current_ip}'" \
         https://api.pushover.net/1/messages.json
fi

echo "${current_ip}" &gt; "${previous_file}"
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Better command history in your shell]]></title>
    <link href="https://jakemccrary.com/blog/2016/09/28/better-command-history-in-your-shell/"/>
    <updated>2016-09-28T11:42:00-05:00</updated>
    <id>https://jakemccrary.com/blog/2016/09/28/better-command-history-in-your-shell</id>
    <content type="html"><![CDATA[<p>My ideal command history would let me search the history of every
shell but when I hit the up arrow it would only cycle through my
current shell&rsquo;s history. In February, I was able to achieve this setup
in large part because of a utility
called <a href="https://github.com/dvorka/hstr">hstr</a>.</p>

<h2>What is <code>hstr</code>?</h2>

<p>hstr is a neat Bash and Zsh utility that lets you easily search, view,
and manage your command history. hstr provides a tool named <code>hh</code> that
provides a text interface for manipulating your command
history. To see what it looks like check out
the <a href="https://github.com/dvorka/hstr/blob/master/README.md">README</a> and
this <a href="https://www.youtube.com/watch?v=sPF29NyXe2U">video</a> tutorial. If
you are running OS X and use Homebrew you can install it by running <code>brew
install hh</code>.</p>

<h2>Making global history searchable but arrows cycle through local history</h2>

<p>hstr is a neat tool but my favorite part of my setup is how the global
command history is searchable but only a shell&rsquo;s local history is
cycled through with the arrow keys. This is achieved by manipulating
where history is written and tweaking some environment variables.</p>

<p>The first step is to change your <code>$PROMPT_COMMAND</code> to append your
shell&rsquo;s history to a global history file. Below is the snippet that
does this from my <code>.bashrc</code> file.</p>

<pre><code># Whenever a command is executed, write it to a global history
PROMPT_COMMAND="history -a ~/.bash_history.global; $PROMPT_COMMAND"
</code></pre>

<p>The next step is to bind a keystroke to run <code>hh</code>, which is what hstr
provides, with <code>$HISTFILE</code> pointing to <code>~/.bash_history.global</code>. I
wanted to fully replace the default command history searching (and I
use Emacs style keyboard shortcuts) so I&rsquo;ve bound these actions to ctrl-r.</p>

<pre><code class="bash"># On C-r set HISTFILE and run hh
bind -x '"\C-r": "HISTFILE=~/.bash_history.global hh"'
</code></pre>

<p>With those two additions to my <code>.bashrc</code> I&rsquo;ve achieved my ideal
command history searching. When I hit ctrl-r I&rsquo;m searching all of my
history and yet I only cycle through a shell&rsquo;s local history with the
arrow keys. This small addition<sup id="fnref:1"><a href="#fn:1" rel="footnote">1</a></sup> made my command line productivity
higher.</p>
<div class="footnotes">
<hr/>
<ol>
<li id="fn:1">
<p>My setup was inspired by <a href="https://unix.stackexchange.com/questions/200225/search-history-from-multiple-bash-session-only-when-ctrl-r-is-used-not-when-a">this</a> StackExchange post.<a href="#fnref:1" rev="footnote">&#8617;</a></p></li>
</ol>
</div>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Put the last command's run time in your Bash prompt]]></title>
    <link href="https://jakemccrary.com/blog/2015/05/03/put-the-last-commands-run-time-in-your-bash-prompt/"/>
    <updated>2015-05-03T20:37:00-05:00</updated>
    <id>https://jakemccrary.com/blog/2015/05/03/put-the-last-commands-run-time-in-your-bash-prompt</id>
    <content type="html"><![CDATA[<p>I&rsquo;m fairly certain the following scenario has happened to every
terminal user. You run a command and, while it is running, realize you
should have prefixed it with <a href="http://linux.die.net/man/1/time"><code>time</code></a>. You
momentarily struggle with the thought of killing the command and
rerunning it with <code>time</code>. You decide not to and the command finishes
without you knowing how long it took. You debate running it again.</p>

<p>For the last year I&rsquo;ve lived in a world without this problem. Upon
completion, a command&rsquo;s approximate run time is displayed in my
prompt. It is awesome.</p>

<h2>Overview</h2>

<p>Most of the code below is from a post on
<a href="http://stackoverflow.com/a/1862762/491871">Stack Overflow</a>. It has
been slightly modified to support having multiple commands in your
<code>$PROMPT_COMMAND</code> variable. Below is a minimal snippet that could be
included in your <code>.bashrc</code>.</p>

<pre><code class="bash">function timer_start {
  timer=${timer:-$SECONDS}
}

function timer_stop {
  timer_show=$(($SECONDS - $timer))
  unset timer
}

trap 'timer_start' DEBUG

if [ "$PROMPT_COMMAND" == "" ]; then
  PROMPT_COMMAND="timer_stop"
else
  PROMPT_COMMAND="$PROMPT_COMMAND; timer_stop"
fi

PS1='[last: ${timer_show}s][\w]$ '
</code></pre>

<p>Modify your <code>.bashrc</code> to include the above and you&rsquo;ll have a prompt
that looks like the image below. It is a minimal prompt but it
includes the time spent on the last command. This is great. No more
wondering how long a command took.</p>

<p><img src="/images/prompt-timings.png" alt="Example of prompt" /></p>

<h2>The details</h2>

<p><code>timer_start</code> is a function that sets <code>timer</code> to be its current value
or, if <code>timer</code> is unset, sets it to the value of <code>$SECONDS</code>.
<code>$SECONDS</code> is a special variable that contains the number of seconds
since the shell was started. <code>timer_start</code> is invoked after every
simple command as a result of <code>trap 'timer_start' DEBUG</code>.</p>

<p><code>timer_stop</code> calculates the difference between <code>$SECONDS</code> and <code>timer</code>
and stores it in <code>timer_show</code>. It also unsets <code>timer</code>. Next time
<code>timer_start</code> is invoked <code>timer</code> will be set to the current value of
<code>$SECONDS</code>. Because <code>timer_stop</code> is part of the <code>$PROMPT_COMMAND</code> it
is executed prior to the prompt being printed.</p>

<p>It is the interaction between <code>timer_start</code> and <code>timer_stop</code> that
captures the run time of commands. It is important that <code>timer_stop</code>
is the <strong>last</strong> command in the <code>$PROMPT_COMMAND</code>. If there are other
commands after it then those will be executed and their execution
might cause <code>timer_start</code> to be called. This results in you timing the
length of time between the prior and current prompts being printed.</p>

<h2>My prompt</h2>

<p>My prompt is a bit more complicated. It shows the last exit code, last
run time, time of day, directory, and git information. The run time of
the last command is one of the more useful parts of my prompt. I
highly recommend you add it to yours.</p>

<p><img src="/images/my-prompt.png" alt="My prompt" /></p>

<h2>Errata</h2>

<p><em>2015/5/04</em></p>

<p><a href="https://twitter.com/gfredericks_">Gary Fredericks</a> noticed that the
original code sample broke if you didn&rsquo;t already have something set as
your <code>$PROMPT_COMMAND</code>. I&rsquo;ve updated the original snippet to reflect
his <a href="https://twitter.com/gfredericks_/status/595249998838800384">changes</a>.</p>
]]></content>
  </entry>
  
</feed>
