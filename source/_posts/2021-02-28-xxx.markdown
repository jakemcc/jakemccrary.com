---
layout: post
title: "Improve your tests by picking better constants"
date: 2021-02-28 18:35:44 -0600
comments: true
published: false
description: The constants you put in your test code can improve its readability. You should put thought into them.
keywords: 'csv, keywords, here'
categories: 
---

The constants you use in your unit tests can make your tests better.
Like test and variable names, they can improve the readability of your code and make it easier to understand test failures.

Let's get into an example.

Imagine a code base that uses a relatively simple key-value pair concept for configuration.
It reads keys and values from a known files and, based on some rules, either ignores or overrides values when keys are duplicated.

`config-value` is the function that looks up the value for a particular configuration key, represented as a `string`.
This function also takes an in-memory representation of the configuration files, the key to lookup, and the mode to operate it.
The mode, represented here by a `keyword`, seelcts how configuration key resolution works.

We haven't talked about how how resolution works so now is a good time to simulate stumbling across the tests.

```clojure
(def config {"scratch.conf" {"a" "1"}

             "development.conf" {"a" "2"
                                 "b" "2"}

             "application.conf" {"a" "3"
                                 "b" "3"
                                 "c" "3"}})

(deftest handles-overrides-in-dev-mode
  (is (= "1" (config-value config "a" :dev)))
  (is (= "2" (config-value config "b" :dev)))
  (is (= "3" (config-value config "c" :dev))))

(deftest handles-overrides-in-prod-mode
  (is (= "3" (config-value config "a" :prod)))
  (is (= "3" (config-value config "b" :prod)))
  (is (= "3" (config-value config "c" :prod))))
```

These tests could be clearer.
They don't provide much assitance for understanding the resolution rules.

One aspect that could be improved is picking better constants.

In `(= "2" (config-value config "b" :dev))`, what does `"2"` represent?
What does `"b"` mean?
You have to either keep `config` in your memory or keep glancing up to recall its structure.

This isn't great.
This adds cognitive overhead that doesn't need to be there.

Let's rewrite it by swapping in some different constants.

```clojure
(def config {"scratch.conf" {"in dev+app+scratch" "from scratch"}

             "development.conf" {"in dev+app+scratch" "from development"
                                 "in dev+app" "from development"}

             "application.conf" {"in dev+app+scratch" "from application"
                                 "in dev+app" "from application"
                                 "in app" "from application"}})

(deftest handles-overrides-in-dev-mode
  (is (= "from scratch" (config-value config "in dev+app+scratch" :dev)))
  (is (= "from development" (config-value config "in dev+app" :dev)))
  (is (= "from application" (config-value config "in app" :dev))))

(deftest handles-overrides-in-prod-mode
  (is (= "from application" (config-value config "in dev+app+scratch" :prod)))
  (is (= "from application" (config-value config "in dev+app" :prod)))
  (is (= "from application" (config-value config "in app" :prod))))
```

The tests tell you much more now.
You don't have to remember the value of `config` or keep glancing up at it to understand the assertions in a test.

You can read `(= "from development" (config-value config "in dev+app" :dev))` and have a pretty solid idea that you are looking up a key found in both `development.conf` and `application.conf` and, while in `:dev` mode, expect the value from `development.conf`.

The new constants provide clues about what the test expects.
You can read and understand these without keeping much state in your head.

By using descriptive constants, the tests give clues to how config resolution should work.

These new constants also help when a test fails.
Which of the following is clearer?

```
FAIL in (handles-overrides-in-dev-mode)
expected: "2"
  actual: "3"
    diff: - "2"
          + "3"
```

```
FAIL in (handles-overrides-in-dev-mode)
expected: "from development"
  actual: "from application"
    diff: - "from development"
          + "from application"
```

The second one is clearer.
I can read it and form a hypothesis about what might be broken.

Well chosen constants can reduce the state a person needs to keep in their head.
Good constants can make test failures easier to understand.
The constants we use can increase the readability of our tests.

It is well worth placing some extra thought into the constants found in your tests.
