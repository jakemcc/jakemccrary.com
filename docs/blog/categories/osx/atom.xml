<?xml version="1.0" encoding="UTF-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title><![CDATA[Jake McCrary's articles on osx]]></title>
  <link href="https://jakemccrary.com/atom.xml" rel="self"/>
  <link href="https://jakemccrary.com/"/>
  <updated>2025-02-17T19:36:40+00:00</updated>
  <id>https://jakemccrary.com/</id>
  <author>
    <name><![CDATA[Jake McCrary]]></name>
  </author>
  <entry>
    <id>https://jakemccrary.com/blog/2020/05/04/how-to-be-alerted-when-a-long-running-process-finishes/index.html</id>
    <link href="https://jakemccrary.com/blog/2020/05/04/how-to-be-alerted-when-a-long-running-process-finishes/index.html"/>
    <title><![CDATA[How to be automatically notified when long running processes finish]]></title>
    <updated>2020-05-04T23:59:59+00:00</updated>
    <content type="html"><![CDATA[<p>Let me set the stage. I kick off the compilation of a large Scala codebase. This will take minutes to finish, so I switch to Slack and catch up on what coworkers have posted. Someone posted an interesting link and I follow it to an article. Fifteen minutes later, I notice the compilation finished twelve minutes ago. I silently grumble at myself, disappointed that I didn't start the next step twelve minutes ago.</p><p>Has some variation of the above happened to you?</p><p>It doesn't happen to me anymore because now my computer tells me when any long running process finishes. This might sound annoying but it is great. I no longer feel guilty<a href='#fn-1' id='fnref1'><sup>1</sup></a> for dropping into Slack and can immediately get back to the task at hand as soon the process finishes.</p><p>I've done this by enhancing on my setup for showing the <a href='/blog/2020/04/21/using-bash-preexec-for-monitoring-the-runtime-of-your-last-command/'>runtime of the previous command in my prompt</a>. You don't have to read that article for the rest of this one to make sense, but you should because it shows you how to add a very useful feature to your prompt.</p><p>Below is the code that causes my computer to tell me when it finishes running commands that takes longer than 30 seconds. It is found in my <code>&#126;/.bashrc</code>. An explanation follows the code snippet.</p><pre><code class="language-bash"># Using https://github.com/rcaloras/bash-preexec
preexec&#40;&#41; {
  &#95;last&#95;command=$1
  if &#91; &quot;UNSET&quot; == &quot;${&#95;timer}&quot; &#93;; then
    &#95;timer=$SECONDS
  else 
    &#95;timer=${&#95;timer:-$SECONDS}
  fi 
}

&#95;maybe&#95;speak&#40;&#41; {
    local elapsed&#95;seconds=$1
    if &#40;&#40; elapsed&#95;seconds &gt; 30 &#41;&#41;; then
        local c
        c=$&#40;echo &quot;${&#95;last&#95;command}&quot; | cut -d' ' -f1&#41;
        &#40; say &quot;finished ${c}&quot; &amp; &#41;
    fi
}

precmd&#40;&#41; {
  if &#91; &quot;UNSET&quot; == &quot;${&#95;timer}&quot; &#93;; then
     timer&#95;show=&quot;0s&quot;
  else 
    elapsed&#95;seconds=$&#40;&#40;SECONDS - &#95;timer&#41;&#41;
    &#95;maybe&#95;speak ${elapsed&#95;seconds}
    timer&#95;show=&quot;$&#40;format-duration seconds $elapsed&#95;seconds&#41;&quot;
  fi
  &#95;timer=&quot;UNSET&quot;
}

# put at the bottom of my .bashrc
&#91;&#91; -f &quot;$HOME/.bash-preexec.sh&quot; &#93;&#93; &amp;&amp; source &quot;$HOME/.bash-preexec.sh&quot;
</code></pre><p><a href='https://github.com/rcaloras/bash-preexec'>Bash-Preexec</a> triggers the <code>preexec</code>, immediately before a command is execute, and <code>precmd</code> functions, immediately before the shell prompt reappears. Those two functions are enough to figure out how much time has elapsed while a command ran. You setup Bash-Preexec by downloading <a href='https://github.com/rcaloras/bash-preexec/blob/master/bash-preexec.sh'>bash-preexec.sh</a> and sourcing it in your <code>&#126;/.bashrc</code>.</p><p><code>preexec</code> is passed the command being ran and it captures it in <code>&#95;last&#95;command</code>. It also captures the current number of seconds the shell has been running as <code>&#95;timer</code>.</p><p><code>precmd</code> uses the value in <code>&#95;timer</code> to calculate the elapsed time in seconds and then calls the function <code>&#95;maybe&#95;speak</code> with this as an argument. It also does the work required for showing the elapsed time in my prompt.</p><p>If the elapsed time is greater than 30 seconds then <code>&#95;maybe&#95;speak</code> uses <code>cut</code> to discard the arguments of captured command, leaving me with the command itself. It then uses <code>say</code> to produce an audible alert of what command just finished. I discard the arguments because otherwise the <code>say</code> command can go on for a long time.</p><p><code>say</code> is a tool that ships with macOS. I haven't gotten around to it yet but I'll need to use something else on my Linux machines.</p><p>You may have noticed that I run <code>say</code> in the background and in a subshell. Running it in the background lets me continue interacting with my shell while <code>say</code> finishes executing and running it in a subshell prevents text from appearing in my shell when the background job finishes.</p><p>With this setup, I can kick off a slow compile or test run and not feel so bad about dropping into Slack or reading Reddit. It is wonderful and I'd recommend it (though, I'd more strongly recommend not having commands that take a while to run). <ol class='footnotes'><li id='fn-1'>I still feel a little guilty as doing so will break any momentum/flow I had going on, but that flow was already broken by the slowness of the command.<a href='#fnref1'>&#8617;</a></li></ol></p>]]></content>
  </entry>
  <entry>
    <id>https://jakemccrary.com/blog/2020/04/21/using-bash-preexec-for-monitoring-the-runtime-of-your-last-command/index.html</id>
    <link href="https://jakemccrary.com/blog/2020/04/21/using-bash-preexec-for-monitoring-the-runtime-of-your-last-command/index.html"/>
    <title><![CDATA[Using Bash-Preexec for monitoring the runtime of your last command]]></title>
    <updated>2020-04-21T23:59:59+00:00</updated>
    <content type="html"><![CDATA[<p>My article on <a href='/blog/2015/05/03/put-the-last-commands-run-time-in-your-bash-prompt/'>putting the runtime of your last command into your bash prompt</a> is one of my most surfaced-by-google articles. Why is this a great to your prompt?  To quote my previous article:</p><blockquote><p> I’m fairly certain the following scenario has happened to every terminal user. You run a command and, while it is running, realize you should have prefixed it with <code>time</code>. You momentarily struggle with the thought of killing the command and rerunning it with <code>time</code>. You decide not to and the command finishes without you knowing how long it took. You debate running it again. </p></blockquote><blockquote><p> For the last year I’ve lived in a world without this problem. Upon completion, a command’s approximate run time is displayed in my prompt. It is awesome. </p></blockquote><p>I've been living without the above problem since sometime in 2014 and not having that problem is still awesome.</p><p>I have made some changes since 2014.</p><p>One change was switching to using <a href='https://github.com/rcaloras/bash-preexec'>Bash-Preexec</a> instead of directly using <code>trap</code> and <code>$PROMPT&#95;COMMAND</code> for calling functions to start and stop tracking runtime. Bash-Preexec lets you trigger a function (or multiple) right after a command has been read and right before each prompt.</p><p>The usage is pretty straight forward. In the most basic case, you source <code>bash-preexec.sh</code> and then provide functions named <code>preexec</code>, which is invoked right before a command is executed, and/or <code>precmd</code>, which is invoked just before each prompt. <code>bash-preexec.sh</code> can be downloaded from <a href='https://github.com/rcaloras/bash-preexec/'>its repo</a>.  The changes required to move to Bash-Preexec pretty <a href='https://github.com/jakemcc/dotfiles/commit/46fc3dc9d4d7d0d73152c77b7383645af42b3d5d'>pretty minimal</a>.</p><p>The other change was introducing the script, <a href='https://github.com/jakemcc/dotfiles/blob/9c8c0315f35b55df6cef7e21261e3dcbbfac86e1/home/.bin/format-duration#L3-L4'>format-duration</a> by <a href='https://twitter.com/gfredericks_'>Gary Fredericks</a>, to humanely format the time. This script converts seconds into a more readable string (example: 310 to <code>5m10s</code>)</p><p>Here is a screenshot of everything in action (with a reduced prompt, my normal one includes git and other info).</p><p><img src="/images/runtime-humane-example.png" alt="Command line prompt showing runtimes of previous commands" width=320 height=150></p><p>Below is a simplified snippet from my <code>.bashrc</code> that provides runtimes using both of these additions.</p><pre><code class="language-bash">preexec&#40;&#41; {
  if &#91; &quot;UNSET&quot; == &quot;${timer}&quot; &#93;; then
    timer=$SECONDS
  else 
    timer=${timer:-$SECONDS}
  fi 
}

precmd&#40;&#41; {
  if &#91; &quot;UNSET&quot; == &quot;${timer}&quot; &#93;; then
     timer&#95;show=&quot;0s&quot;
  else 
    the&#95;seconds=$&#40;&#40;SECONDS - timer&#41;&#41;
    # use format-duration to make time more human readable
    timer&#95;show=&quot;$&#40;format-duration seconds $the&#95;seconds&#41;&quot; 
  fi
  timer=&quot;UNSET&quot;
}

# Add $last&#95;show to the prompt.
PS1='&#91;last: ${timer&#95;show}s&#93;&#91;\w&#93;$ '

# a bunch more lines until the end of my .bashrc
# where I include .bash-preexec.sh
&#91;&#91; -f &quot;$HOME/.bash-preexec.sh&quot; &#93;&#93; &amp;&amp; source &quot;$HOME/.bash-preexec.sh&quot;
</code></pre><p>No more wondering about the runtime of commands is great. Introducing <code>format-duration</code> made reading the time easier while Bash-Preexec made reading the implementation easier. I highly recommend setting up something similar for your shell.</p>]]></content>
  </entry>
  <entry>
    <id>https://jakemccrary.com/blog/2020/02/25/auto-syncing-a-git-repository/index.html</id>
    <link href="https://jakemccrary.com/blog/2020/02/25/auto-syncing-a-git-repository/index.html"/>
    <title><![CDATA[Auto-syncing a git repository]]></title>
    <updated>2020-02-25T23:59:59+00:00</updated>
    <content type="html"><![CDATA[<p>I'm currently keep notes on my computer using plain text and <a href='https://orgmode.org/'>Org mode</a>.</p><p>I keep my notes in a git repository in my home directory, <code>&#126;/org/</code>. I want my notes to be synced between my computers without me thinking about it. Historically, I've reached for something like Google Drive or Dropbox to do this but this time I reached for git and GitHub.</p><p>Below is the script that I ended up cobbling together from various sources found online. The script pushes and pulls changes from a remote repository and works on my macOS and linux machines.</p><p>The loop starting on line 38 does the work. Whenever a file-watcher notices a change or 10 minutes passes, the loop pulls changes from a remote repository, commits any local changes, and pushes to the remote repository. The lines before this are mostly checking that needed programs exist on the host.</p><p>I keep this running in a background terminal and I check periodically to confirm it is still running. I could do something fancier but this isn't a critical system and the overhead of checking every couple days is nearly zero. Most of the time checking happens by accident when I accidentally maximize the terminal that runs the script.</p><p>I've been using this script for a long time now and I've found it quite useful. I hope you do too.</p><pre><code class="language-bash">#!/bin/bash

set -e

TARGETDIR=&quot;$HOME/org/&quot;

stderr &#40;&#41; {
    echo &quot;$1&quot; &gt;&amp;2
}

is&#95;command&#40;&#41; {
    command -v &quot;$1&quot; &amp;&gt;/dev/null
}

if &#91; &quot;$&#40;uname&#41;&quot; != &quot;Darwin&quot; &#93;; then
    INW=&quot;inotifywait&quot;;
    EVENTS=&quot;close&#95;write,move,delete,create&quot;;
    INCOMMAND=&quot;\&quot;$INW\&quot; -qr -e \&quot;$EVENTS\&quot; --exclude \&quot;\.git\&quot; \&quot;$TARGETDIR\&quot;&quot;
else # if Mac, use fswatch
    INW=&quot;fswatch&quot;;
    # default events specified via a mask, see
    # https://emcrisostomo.github.io/fswatch/doc/1.14.0/fswatch.html/Invoking-fswatch.html#Numeric-Event-Flags
    # default of 414 = MovedTo + MovedFrom + Renamed + Removed + Updated + Created
    #                = 256 + 128+ 16 + 8 + 4 + 2
    EVENTS=&quot;--event=414&quot;
    INCOMMAND=&quot;\&quot;$INW\&quot; --recursive \&quot;$EVENTS\&quot; --exclude \&quot;\.git\&quot; --one-event \&quot;$TARGETDIR\&quot;&quot;
fi

for cmd in &quot;git&quot; &quot;$INW&quot; &quot;timeout&quot;; do
    # in OSX: `timeout` =&gt; brew install coreutils
    # in OSX: `fswatch` =&gt; brew install fswatch
    is&#95;command &quot;$cmd&quot; || { stderr &quot;Error: Required command '$cmd' not found&quot;; exit 1; }
done

cd &quot;$TARGETDIR&quot;
echo &quot;$INCOMMAND&quot;

while true; do
    eval &quot;timeout 600 $INCOMMAND&quot; || true
    git pull
    sleep 5
    STATUS=$&#40;git status -s&#41;
    if &#91; -n &quot;$STATUS&quot; &#93;; then
        echo &quot;$STATUS&quot;
        echo &quot;commit!&quot;
        git add .
        git commit -m &quot;autocommit&quot;
        git push origin
    fi
done
</code></pre>]]></content>
  </entry>
  <entry>
    <id>https://jakemccrary.com/blog/2017/05/29/using-comm-to-verify-matching-content/index.html</id>
    <link href="https://jakemccrary.com/blog/2017/05/29/using-comm-to-verify-matching-content/index.html"/>
    <title><![CDATA[Using comm to verify file content matches]]></title>
    <updated>2017-05-29T23:59:59+00:00</updated>
    <content type="html"><![CDATA[<p>I recently found myself in a situation where I needed to confirm that a process took in a tab separated file, did some processing, and then output a new file containing the original columns with some additional ones. The feature I was adding allowed the process to die and restart while processing the input file and pick up where it left off.</p><p>I needed to confirm the output had data for every line in the input. I reached to the command line tool <code>comm</code>.</p><p>Below is a made up input file.</p><pre><code>UNIQUE&#95;ID	USER
1	38101838
2	19183819
3	19123811
4	10348018
5	19881911
6	29182918
</code></pre><p>And here is some made up output.</p><pre><code>UNIQUE&#95;ID	USER	MESSAGE
1	38101838	A01
2	19183819	A05
3	19123811	A02
4	10348018	A01
5	19881911	A02
6	29182918	A05
</code></pre><p>With files this size, it would be easy enough to check visually. In my testing, I was dealing with files that had thousands of lines. This is too many to check by hand. It is a perfect amount for <code>comm</code>.</p><p><a href='https://en.wikipedia.org/wiki/Comm'>comm</a> reads two files as input and then outputs three columns. The first column contains lines found only in the first file, the second column contains lines only found in the second, and the last column contains lines in both. If it is easier for you to think about it as set operations, the first two columns are similar to performing two set differences and the third is similar to set intersection. Below is an example adapted from Wikipedia showing its behavior. </p><pre><code>$ cat foo.txt
apple
banana
eggplant
$ cat bar.txt
apple
banana
banana
zucchini
$ comm foo.txt bar.txt
                  apple
                  banana
          banana
eggplant
          zucchini
</code></pre><p>So how is this useful? Well, you can also tell <code>comm</code> to suppress outputting specific columns.  If we send the common columns from the input and output file to <code>comm</code> and suppress <code>comm</code>'s third column then anything printed to the screen is a problem. Anything printed to the screen was found in one of the files and not the other. We'll select the common columns using cut and, since comm expects input to be sorted, then sort using <code>sort</code>. Let's see what happens.</p><pre><code>$ comm -3 &lt;&#40;cut -f 1,2 input.txt | sort&#41; &lt;&#40;cut -f 1,2 output.txt | sort&#41;
$
</code></pre><p>Success! Nothing was printed to the console, so there is nothing unique in either file.</p><p><code>comm</code> is a useful tool to have in your command line toolbox.</p>]]></content>
  </entry>
  <entry>
    <id>https://jakemccrary.com/blog/2015/05/03/put-the-last-commands-run-time-in-your-bash-prompt/index.html</id>
    <link href="https://jakemccrary.com/blog/2015/05/03/put-the-last-commands-run-time-in-your-bash-prompt/index.html"/>
    <title><![CDATA[Put the last command's run time in your Bash prompt]]></title>
    <updated>2015-05-03T23:59:59+00:00</updated>
    <content type="html"><![CDATA[<blockquote><p> An updated version of this post can be found <a href='/blog/2020/04/21/using-bash-preexec-for-monitoring-the-runtime-of-your-last-command/'>here</a> </p></blockquote><p>I'm fairly certain the following scenario has happened to every terminal user. You run a command and, while it is running, realize you should have prefixed it with <a href='http://linux.die.net/man/1/time'><code>time</code></a>. You momentarily struggle with the thought of killing the command and rerunning it with <code>time</code>. You decide not to and the command finishes without you knowing how long it took. You debate running it again.</p><p>For the last year I've lived in a world without this problem. Upon completion, a command's approximate run time is displayed in my prompt. It is awesome.</p><h2>Overview</h2><p>Most of the code below is from a post on <a href='http://stackoverflow.com/a/1862762/491871'>Stack Overflow</a>. It has been slightly modified to support having multiple commands in your <code>$PROMPT&#95;COMMAND</code> variable. Below is a minimal snippet that could be included in your <code>.bashrc</code>.</p><pre><code class="language-bash">function timer&#95;start {
  timer=${timer:-$SECONDS}
}

function timer&#95;stop {
  timer&#95;show=$&#40;&#40;$SECONDS - $timer&#41;&#41;
  unset timer
}

trap 'timer&#95;start' DEBUG

if &#91; &quot;$PROMPT&#95;COMMAND&quot; == &quot;&quot; &#93;; then
  PROMPT&#95;COMMAND=&quot;timer&#95;stop&quot;
else
  PROMPT&#95;COMMAND=&quot;$PROMPT&#95;COMMAND; timer&#95;stop&quot;
fi

PS1='&#91;last: ${timer&#95;show}s&#93;&#91;\w&#93;$ '
</code></pre><p>Modify your <code>.bashrc</code> to include the above and you'll have a prompt that looks like the image below. It is a minimal prompt but it includes the time spent on the last command. This is great. No more wondering how long a command took.</p><p><img src="/images/prompt-timings.png" alt="Example of prompt" /></p><h2>The details</h2><p><code>timer&#95;start</code> is a function that sets <code>timer</code> to be its current value or, if <code>timer</code> is unset, sets it to the value of <code>$SECONDS</code>. <code>$SECONDS</code> is a special variable that contains the number of seconds since the shell was started. <code>timer&#95;start</code> is invoked after every simple command as a result of <code>trap 'timer&#95;start' DEBUG</code>.</p><p><code>timer&#95;stop</code> calculates the difference between <code>$SECONDS</code> and <code>timer</code> and stores it in <code>timer&#95;show</code>. It also unsets <code>timer</code>. Next time <code>timer&#95;start</code> is invoked <code>timer</code> will be set to the current value of <code>$SECONDS</code>. Because <code>timer&#95;stop</code> is part of the <code>$PROMPT&#95;COMMAND</code> it is executed prior to the prompt being printed.</p><p>It is the interaction between <code>timer&#95;start</code> and <code>timer&#95;stop</code> that captures the run time of commands. It is important that <code>timer&#95;stop</code> is the <strong>last</strong> command in the <code>$PROMPT&#95;COMMAND</code>. If there are other commands after it then those will be executed and their execution might cause <code>timer&#95;start</code> to be called. This results in you timing the length of time between the prior and current prompts being printed.</p><h2>My prompt</h2><p>My prompt is a bit more complicated. It shows the last exit code, last run time, time of day, directory, and git information. The run time of the last command is one of the more useful parts of my prompt. I highly recommend you add it to yours.</p><p><img src="/images/my-prompt.png" alt="My prompt" /></p><h2>Errata</h2><p><em>2015/5/04</em></p><p><a href='https://twitter.com/gfredericks_'>Gary Fredericks</a> noticed that the original code sample broke if you didn't already have something set as your <code>$PROMPT&#95;COMMAND</code>. I've updated the original snippet to reflect his <a href='https://twitter.com/gfredericks_/status/595249998838800384'>changes</a>.</p>]]></content>
  </entry>
  <entry>
    <id>https://jakemccrary.com/blog/2015/04/12/making-tmate-and-tmux-play-nice-with-os-x-terminal-notifier/index.html</id>
    <link href="https://jakemccrary.com/blog/2015/04/12/making-tmate-and-tmux-play-nice-with-os-x-terminal-notifier/index.html"/>
    <title><![CDATA[Making tmate and tmux play nice with OS X terminal-notifier]]></title>
    <updated>2015-04-12T23:59:59+00:00</updated>
    <content type="html"><![CDATA[<p>For nearly the last two years, I've been doing most of my development in OS X. Most of that development has been done in Clojure and, whenever possible, using <a href='https://github.com/jakemcc/lein-test-refresh'>lein-test-refresh</a> with <a href='https://github.com/alloy/terminal-notifier'>terminal-notifier</a> to have my tests automatically run and a notification shown with the status of the test run. Its a great work flow that gives me a quick feedback cycle and doesn't pull my attention in different directions.</p><p>Recently I've started using <a href='http://tmate.io/'>tmate</a> for remote pairing. Unfortunately when I first started using it my quick feedback cycle was broken. <code>lein test-refresh</code> would run my tests but would become hung when sending a notification using <code>terminal-notifier</code>. This was terrible and, if I hadn't been able to fix it, would have stopped me from using <code>tmate</code>. After some searching I stumbled across <a href='https://github.com/alloy/terminal-notifier/issues/115'>this</a> GitHub issue which helped solve the problem.</p><p>To make <code>tmate</code> work nicely with <code>terminal-notifier</code> you'll need to install <a href='https://github.com/ChrisJohnsen/tmux-MacOSX-pasteboard'>reattach-to-user-namespace</a> and change your <code>tmate</code> configuration to use it. If you use <code>brew</code> you can install by running `brew install &ndash;with-wrap-pbcopy-and-pbpaste reattach-to-user-namespace<code>. Then open your </code>.tmux.conf` or <code>.tmate.conf</code> file and add the line below.</p><pre><code>set-option -g default-command &quot;which reattach-to-user-namespace &gt; /dev/null &amp;&amp; reattach-to-user-namespace -l $SHELL || $SHELL&quot;
</code></pre><p>The above tells <code>tmate</code> to use <code>reattach-to-user-namespace</code> if it is available. Now <code>terminal-notifier</code> no longer hangs when invoked inside <code>tmate</code>. Unsurprisingly, this change also makes <code>tmux</code> place nice with <code>terminal-notifier</code>.</p>]]></content>
  </entry>
</feed>
