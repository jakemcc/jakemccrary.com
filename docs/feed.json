{
  "version": "https://jsonfeed.org/version/1",
  "title": "Jake McCrary",
  "home_page_url": "https://jakemccrary.com",
  "feed_url": "https://jakemccrary.com/feed.json",
  "favicon": "https://jakemccrary.com/favicon.png",
  "author" : {
      "url" : "https://twitter.com/jakemcc",
      "name" : "Jake McCrary"
  },
  "user_comment": "This feed allows you to read the posts from this site in any feed reader that supports the JSON Feed format. To add this feed to your reader, copy the following URL - https://jakemccrary.com/feed.json - and add it your reader.",
  "items": [
    {
      "id": "https://jakemccrary.com/blog/2020/12/30/speeding-up-magit-with-the-native-comp-branch-of-emacs",
      "url": "https://jakemccrary.com/blog/2020/12/30/speeding-up-magit-with-the-native-comp-branch-of-emacs/",
      "date_published": "2020-12-30T20:08:00-06:00",
      "title": "Speeding up Magit with the native-comp branch of Emacs",
      "summary": "Here is a summary of trying out the native-comp branch of Emacs and how it changed Magit's performance on a large git repository.",
      "content_html": "<p>In my last article, <a href=\"https://jakemccrary.com/blog/2020/11/14/speeding-up-magit/\">Speeding up Magit</a>, I showed how removing elements from Magit&rsquo;s status buffer drastically reduces the time it takes to refresh this buffer when working in a large repository (from 4 seconds to around 0.348 seconds).\nIn a <a href=\"https://www.reddit.com/r/emacs/comments/k3xfa1/speeding_up_magit/ge5o0e0/?utm_source=reddit&amp;utm_medium=web2x&amp;context=3\">comment on r/emacs</a>, someone wondered if the <code>native-comp</code> feature of Emacs might improve the Magit status refresh time.</p>\n\n<p>This reddit thread was the first time I had heard of the <code>native-comp</code> feature.\nThis feature lives on the <code>feature/native-comp</code> branch of the Emacs repository and it compiles Elisp code into native code.\nMany users have reported noticeable speed improvements using it.\nThe <a href=\"http://akrl.sdf.org/gccemacs.html\">official development log</a> and <a href=\"https://www.emacswiki.org/emacs/GccEmacs\">Emacs Wiki</a> have more information about it.</p>\n\n<p>I&rsquo;ll provide more information about getting <code>native-comp</code> working on macOS after I answer the Magit speed question.</p>\n\n<h2>How did it change refresh times of the Magit status buffer?</h2>\n\n<p>The quick answer is that running Emacs with <code>native-comp</code> improved the refresh times of the Magit status buffer.\nBelow is a table of the various times.</p>\n\n<div class='bogus-wrapper'><notextile><figure class='code'><div class=\"highlight\"><table><tr><td class=\"gutter\"><pre class=\"line-numbers\"><span class='line-number'>1</span>\n<span class='line-number'>2</span>\n<span class='line-number'>3</span>\n<span class='line-number'>4</span>\n<span class='line-number'>5</span>\n</pre></td><td class='code'><pre><code class=''><span class='line'>| Experiment                              | magit-status refresh time |\n</span><span class='line'>|-----------------------------------------+---------------------------|\n</span><span class='line'>| full magit-status with native-comp      | 3.152 seconds             |\n</span><span class='line'>| full magit-status without native-comp   | 4.003 seconds             |\n</span><span class='line'>| magit-status with many sections removed | 0.348 seconds             |</span></code></pre></td></tr></table></div></figure></notextile></div>\n\n\n<p>Using <code>native-comp</code>, we&rsquo;ve cut off about 0.85 seconds.\nThat is a pretty solid improvement.\nEven still, that isn&rsquo;t fast enough for how often I use Magit so I&rsquo;ll be sticking with my <a href=\"https://jakemccrary.com/blog/2020/11/14/speeding-up-magit/\">Magit setup</a> with many sections removed.</p>\n\n<p>As a caveat, the timing with <code>native-comp</code> also includes upgrading Emacs from <code>26.3</code> to <code>28.0.50</code> (so I could have <code>native-comp</code>) and Magit from <code>20201111.1436</code> to <code>20201212.929</code>.\nAs a result, the comparison to <code>full magit-status without native-comp</code> isn&rsquo;t entirely fair as multiple variables have changed.\nThe comparison to time with sections removed is fair as I&rsquo;m still using that setup (but with native-comp) and the timing is pretty much the same.</p>\n\n<h2>Getting <code>native-comp</code> on macOS</h2>\n\n<p>To enable <code>native-comp</code> you need to build Emacs from source.\nI&rsquo;ve done this before on Linux systems but this was the first time I&rsquo;ve done this on macOS.</p>\n\n<p>When browsing reddit, I found the <a href=\"https://github.com/jimeh/build-emacs-for-macos\">build-emacs-for-macos</a> project which has some helpful instructions for doing this.\nI followed the instructions from the readme and picked the latest known good commit from <a href=\"https://github.com/jimeh/build-emacs-for-macos/issues/6\">this issue</a> (at the time I did this <code>be907b0ba82c2a65e0468d50653cae8a7cf5f16b</code>).\nI then updated my <a href=\"https://github.com/jakemcc/emacs.d/commit/72cf37a497b72b8990956395e2eaa87285ea7c81\">init.el</a> based on instructions from in the <code>build-emacs-for-macos</code> project.</p>\n\n<p>I haven&rsquo;t had any issues since switching to this very new Emacs.\nI don&rsquo;t have numbers to back this up but it does feel faster.</p>\n\n<h2>Recommendation</h2>\n\n<p>I&rsquo;d recommend giving the <code>native-comp</code> feature of Emacs a shot.\nIt wasn&rsquo;t terribly challenging to get setup and it is nice to get a glimpse of what the future of Emacs might be.\nThat future is a bit snappier.</p>\n",
      "author" : {
        "name" : "Jake McCrary"
      }
    },
    
    {
      "id": "https://jakemccrary.com/blog/2020/11/14/speeding-up-magit",
      "url": "https://jakemccrary.com/blog/2020/11/14/speeding-up-magit/",
      "date_published": "2020-11-14T16:37:00-06:00",
      "title": "Speeding up magit",
      "summary": "Magit is great but on large repos it can be sluggish. Here is how you can speed it up.",
      "content_html": "<p><a href=\"https://github.com/magit/magit\">Magit</a> is a great Emacs tool and by far my favorite way of interacting with git repositories.\nI use Magit nearly every day.</p>\n\n<p>Unfortunately, refreshing the <code>magit-status</code> buffer is sluggish when you are working in a large repository.</p>\n\n<p>A few months ago, I became sick of waiting and investigated how to speed up refreshing the status buffer.\nAfter doing some research, I learned about the <code>magit-refresh-verbose</code> variable.</p>\n\n<p>Setting <code>magit-refresh-verbose</code> to true causes Magit to print some very useful output to your <code>*Messages*</code> buffer.\nThis output shows how many seconds each step of <code>magit-status</code> takes.</p>\n\n<p>Here is the output for the large repo that caused me to look into this.</p>\n\n<div class='bogus-wrapper'><notextile><figure class='code'><div class=\"highlight\"><table><tr><td class=\"gutter\"><pre class=\"line-numbers\"><span class='line-number'>1</span>\n<span class='line-number'>2</span>\n<span class='line-number'>3</span>\n<span class='line-number'>4</span>\n<span class='line-number'>5</span>\n<span class='line-number'>6</span>\n<span class='line-number'>7</span>\n<span class='line-number'>8</span>\n<span class='line-number'>9</span>\n<span class='line-number'>10</span>\n<span class='line-number'>11</span>\n<span class='line-number'>12</span>\n<span class='line-number'>13</span>\n<span class='line-number'>14</span>\n<span class='line-number'>15</span>\n<span class='line-number'>16</span>\n<span class='line-number'>17</span>\n<span class='line-number'>18</span>\n<span class='line-number'>19</span>\n<span class='line-number'>20</span>\n<span class='line-number'>21</span>\n<span class='line-number'>22</span>\n<span class='line-number'>23</span>\n<span class='line-number'>24</span>\n</pre></td><td class='code'><pre><code class=''><span class='line'>Refreshing buffer ‘magit: example-repo’...\n</span><span class='line'>  magit-insert-error-header                          1e-06\n</span><span class='line'>  magit-insert-diff-filter-header                    2.3e-05\n</span><span class='line'>  magit-insert-head-branch-header                    0.026227\n</span><span class='line'>  magit-insert-upstream-branch-header                0.014285\n</span><span class='line'>  magit-insert-push-branch-header                    0.005662\n</span><span class='line'>  magit-insert-tags-header                           1.7119309999999999\n</span><span class='line'>  magit-insert-status-headers                        1.767466\n</span><span class='line'>  magit-insert-merge-log                             0.005947\n</span><span class='line'>  magit-insert-rebase-sequence                       0.000115\n</span><span class='line'>  magit-insert-am-sequence                           5.1e-05\n</span><span class='line'>  magit-insert-sequencer-sequence                    0.000105\n</span><span class='line'>  magit-insert-bisect-output                         5.3e-05\n</span><span class='line'>  magit-insert-bisect-rest                           1.1e-05\n</span><span class='line'>  magit-insert-bisect-log                            1e-05\n</span><span class='line'>  magit-insert-untracked-files                       0.259485\n</span><span class='line'>  magit-insert-unstaged-changes                      0.031528\n</span><span class='line'>  magit-insert-staged-changes                        0.017763\n</span><span class='line'>  magit-insert-stashes                               0.028514\n</span><span class='line'>  magit-insert-unpushed-to-pushremote                0.911193\n</span><span class='line'>  magit-insert-unpushed-to-upstream-or-recent        0.497709\n</span><span class='line'>  magit-insert-unpulled-from-pushremote              7.2e-05\n</span><span class='line'>  magit-insert-unpulled-from-upstream                0.446168\n</span><span class='line'>Refreshing buffer ‘magit: example-repo’...done (4.003s)</span></code></pre></td></tr></table></div></figure></notextile></div>\n\n\n<p>The total time is found in the last line and we can see it took four seconds.\nFour seconds is an incredibly long time to wait before interacting with Magit.</p>\n\n<p>You can change how much work Magit does by removing functions from the <code>magit-status-sections-hook</code> with <code>remove-hook</code>.\nI looked at the timings and and tried removing anything I decided was slow and something I didn&rsquo;t think I&rsquo;d miss.\nFor me, that list includes <code>magit-insert-tags-header</code>, <code>magit-insert-status-headers</code>, <code>magit-insert-unpushed-to-pushremote</code>, <code>magit-insert-unpushed-to-upstream-or-recent</code>, and <code>magit-insert-unpulled-from-upstream</code>. I also removed <code>magit-insert-unpulled-from-pushremote</code>.</p>\n\n<p>You remove a function from a hook by adding elisp similar to <code>(remove-hook 'magit-status-sections-hook 'magit-insert-tags-header)</code> to your Emacs configuration.</p>\n\n<p>I use <a href=\"https://github.com/jwiegley/use-package\">use-package</a> to configure mine and below is what my <code>magit</code> section looks like.</p>\n\n<p>Lines 20-25 remove the hooks.\nI also hard-code <code>magit-git-executable</code> to be the full path of the <code>git</code> executable on line 5 because folks said this made a difference on macOS.</p>\n\n<div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span></span></figcaption><div class=\"highlight\"><table><tr><td class=\"gutter\"><pre class=\"line-numbers\"><span class='line-number'>1</span>\n<span class='line-number'>2</span>\n<span class='line-number'>3</span>\n<span class='line-number'>4</span>\n<span class='line-number'>5</span>\n<span class='line-number'>6</span>\n<span class='line-number'>7</span>\n<span class='line-number'>8</span>\n<span class='line-number'>9</span>\n<span class='line-number'>10</span>\n<span class='line-number'>11</span>\n<span class='line-number'>12</span>\n<span class='line-number'>13</span>\n<span class='line-number'>14</span>\n<span class='line-number'>15</span>\n<span class='line-number'>16</span>\n<span class='line-number'>17</span>\n<span class='line-number'>18</span>\n<span class='line-number'>19</span>\n<span class='line-number'>20</span>\n<span class='line-number'>21</span>\n<span class='line-number'>22</span>\n<span class='line-number'>23</span>\n<span class='line-number'>24</span>\n<span class='line-number'>25</span>\n</pre></td><td class='code'><pre><code class='elisp'><span class='line'><span class=\"p\">(</span><span class=\"nb\">use-package</span> <span class=\"nv\">magit</span>\n</span><span class='line'>  <span class=\"ss\">:ensure</span> <span class=\"no\">t</span>\n</span><span class='line'>  <span class=\"ss\">:bind</span> <span class=\"p\">(</span><span class=\"s\">&quot;C-c g&quot;</span> <span class=\"o\">.</span> <span class=\"nv\">magit-status</span><span class=\"p\">)</span>\n</span><span class='line'>  <span class=\"ss\">:custom</span>\n</span><span class='line'>  <span class=\"p\">(</span><span class=\"nv\">magit-git-executable</span> <span class=\"s\">&quot;/usr/local/bin/git&quot;</span><span class=\"p\">)</span>\n</span><span class='line'>  <span class=\"ss\">:init</span>\n</span><span class='line'>  <span class=\"p\">(</span><span class=\"nb\">use-package</span> <span class=\"nv\">with-editor</span> <span class=\"ss\">:ensure</span> <span class=\"no\">t</span><span class=\"p\">)</span>\n</span><span class='line'>\n</span><span class='line'>  <span class=\"c1\">;; Have magit-status go full screen and quit to previous</span>\n</span><span class='line'>  <span class=\"c1\">;; configuration.  Taken from</span>\n</span><span class='line'>  <span class=\"c1\">;; http://whattheemacsd.com/setup-magit.el-01.html#comment-748135498</span>\n</span><span class='line'>  <span class=\"c1\">;; and http://irreal.org/blog/?p=2253</span>\n</span><span class='line'>  <span class=\"p\">(</span><span class=\"nv\">defadvice</span> <span class=\"nv\">magit-status</span> <span class=\"p\">(</span><span class=\"nv\">around</span> <span class=\"nv\">magit-fullscreen</span> <span class=\"nv\">activate</span><span class=\"p\">)</span>\n</span><span class='line'>    <span class=\"p\">(</span><span class=\"nv\">window-configuration-to-register</span> <span class=\"ss\">:magit-fullscreen</span><span class=\"p\">)</span>\n</span><span class='line'>    <span class=\"nv\">ad-do-it</span>\n</span><span class='line'>    <span class=\"p\">(</span><span class=\"nv\">delete-other-windows</span><span class=\"p\">))</span>\n</span><span class='line'>  <span class=\"p\">(</span><span class=\"nv\">defadvice</span> <span class=\"nv\">magit-quit-window</span> <span class=\"p\">(</span><span class=\"nv\">after</span> <span class=\"nv\">magit-restore-screen</span> <span class=\"nv\">activate</span><span class=\"p\">)</span>\n</span><span class='line'>    <span class=\"p\">(</span><span class=\"nv\">jump-to-register</span> <span class=\"ss\">:magit-fullscreen</span><span class=\"p\">))</span>\n</span><span class='line'>  <span class=\"ss\">:config</span>\n</span><span class='line'>  <span class=\"p\">(</span><span class=\"nv\">remove-hook</span> <span class=\"ss\">&#39;magit-status-sections-hook</span> <span class=\"ss\">&#39;magit-insert-tags-header</span><span class=\"p\">)</span>\n</span><span class='line'>  <span class=\"p\">(</span><span class=\"nv\">remove-hook</span> <span class=\"ss\">&#39;magit-status-sections-hook</span> <span class=\"ss\">&#39;magit-insert-status-headers</span><span class=\"p\">)</span>\n</span><span class='line'>  <span class=\"p\">(</span><span class=\"nv\">remove-hook</span> <span class=\"ss\">&#39;magit-status-sections-hook</span> <span class=\"ss\">&#39;magit-insert-unpushed-to-pushremote</span><span class=\"p\">)</span>\n</span><span class='line'>  <span class=\"p\">(</span><span class=\"nv\">remove-hook</span> <span class=\"ss\">&#39;magit-status-sections-hook</span> <span class=\"ss\">&#39;magit-insert-unpulled-from-pushremote</span><span class=\"p\">)</span>\n</span><span class='line'>  <span class=\"p\">(</span><span class=\"nv\">remove-hook</span> <span class=\"ss\">&#39;magit-status-sections-hook</span> <span class=\"ss\">&#39;magit-insert-unpulled-from-upstream</span><span class=\"p\">)</span>\n</span><span class='line'>  <span class=\"p\">(</span><span class=\"nv\">remove-hook</span> <span class=\"ss\">&#39;magit-status-sections-hook</span> <span class=\"ss\">&#39;magit-insert-unpushed-to-upstream-or-recent</span><span class=\"p\">))</span>\n</span></code></pre></td></tr></table></div></figure></notextile></div>\n\n\n<p>After this change, my <code>magit-status</code> buffer refreshes in under half a second.</p>\n\n<div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span></span></figcaption><div class=\"highlight\"><table><tr><td class=\"gutter\"><pre class=\"line-numbers\"><span class='line-number'>1</span>\n<span class='line-number'>2</span>\n<span class='line-number'>3</span>\n<span class='line-number'>4</span>\n<span class='line-number'>5</span>\n<span class='line-number'>6</span>\n<span class='line-number'>7</span>\n<span class='line-number'>8</span>\n<span class='line-number'>9</span>\n<span class='line-number'>10</span>\n<span class='line-number'>11</span>\n<span class='line-number'>12</span>\n<span class='line-number'>13</span>\n</pre></td><td class='code'><pre><code class='elisp'><span class='line'><span class=\"nv\">Refreshing</span> <span class=\"nv\">buffer</span> <span class=\"err\">‘</span><span class=\"nv\">magit:</span> <span class=\"nv\">example-repo</span><span class=\"err\">’</span><span class=\"o\">...</span>\n</span><span class='line'>  <span class=\"nv\">magit-insert-merge-log</span>                             <span class=\"mf\">0.005771</span>\n</span><span class='line'>  <span class=\"nv\">magit-insert-rebase-sequence</span>                       <span class=\"mf\">0.000118</span>\n</span><span class='line'>  <span class=\"nv\">magit-insert-am-sequence</span>                           <span class=\"mf\">5.3e-05</span>\n</span><span class='line'>  <span class=\"nv\">magit-insert-sequencer-sequence</span>                    <span class=\"mf\">0.0001</span>\n</span><span class='line'>  <span class=\"nv\">magit-insert-bisect-output</span>                         <span class=\"mf\">5.5e-05</span>\n</span><span class='line'>  <span class=\"nv\">magit-insert-bisect-rest</span>                           <span class=\"mf\">1.1e-05</span>\n</span><span class='line'>  <span class=\"nv\">magit-insert-bisect-log</span>                            <span class=\"mf\">1.1e-05</span>\n</span><span class='line'>  <span class=\"nv\">magit-insert-untracked-files</span>                       <span class=\"mf\">0.247723</span>\n</span><span class='line'>  <span class=\"nv\">magit-insert-unstaged-changes</span>                      <span class=\"mf\">0.024989</span>\n</span><span class='line'>  <span class=\"nv\">magit-insert-staged-changes</span>                        <span class=\"mf\">0.018397</span>\n</span><span class='line'>  <span class=\"nv\">magit-insert-stashes</span>                               <span class=\"mf\">0.026055</span>\n</span><span class='line'><span class=\"nv\">Refreshing</span> <span class=\"nv\">buffer</span> <span class=\"err\">‘</span><span class=\"nv\">magit:</span> <span class=\"nv\">example-repo</span><span class=\"err\">’</span><span class=\"o\">...</span><span class=\"nv\">done</span> <span class=\"p\">(</span><span class=\"nv\">0.348s</span><span class=\"p\">)</span>\n</span></code></pre></td></tr></table></div></figure></notextile></div>\n\n\n<p>What did I lose from the <code>magit-status</code> buffer as a result of these changes?\nHere is screenshot of the original buffer.</p>\n\n<p><img src=\"https://jakemccrary.com/images/magit-speed/magit-before.png\" alt=\"Buffer before changes\" /></p>\n\n<p>And here is the buffer after.</p>\n\n<p><img src=\"https://jakemccrary.com/images/magit-speed/magit-after.png\" alt=\"Buffer after changes\" /></p>\n\n<p>The difference is drastic<sup id=\"fnref:1\"><a href=\"#fn:1\" rel=\"footnote\">1</a></sup>.\nAnd so is the speed difference.</p>\n\n<p>The increased speed is worth losing the additional information.\nI interact with <code>git</code> very often and much prefer using Magit to do so.\nBefore these changes, I found myself regressing to using <code>git</code> at the command line and I don&rsquo;t find that to be nearly as enjoyable.\nSince I&rsquo;ve made these changes, I&rsquo;m back to doing 99% of my <code>git</code> interactions through Magit.</p>\n\n<p>Don&rsquo;t settle for slow interactions with your computer.\nAggressively shorten your feedback cycles and you&rsquo;ll change how you interact with the machine.</p>\n\n<h4>Versions used when writing this article</h4>\n\n<p>This post was written with Magit version <code>20201111.1436</code> and Emacs <code>26.3</code> on macOS <code>10.15.7</code>.\nI&rsquo;ve been using these changes for a few months but do not remember or have a record of what Magit version I was using at the time I originally made these changes.</p>\n\n<p><strong>edit on 2020/12/15</strong>:</p>\n\n<p>I recently upgraded Emacs to tryout the native-comp work and can report this still works with with Emacs <code>28.0.50</code>, Magit <code>20201212.929</code>, and Git <code>2.29.2</code> running in macOS <code>11.0.1</code>.</p>\n\n<p>As a warning, this reduces the information Magit shows you. The status buffer will be blank if you have no changes.</p>\n<div class=\"footnotes\">\n<hr/>\n<ol>\n<li id=\"fn:1\">\n<p>The before image is even missing some sections that would have gone missing in the after shot since I didn&rsquo;t want to put the effort.<a href=\"#fnref:1\" rev=\"footnote\">&#8617;</a></p></li>\n</ol>\n</div>\n\n",
      "author" : {
        "name" : "Jake McCrary"
      }
    },
    
    {
      "id": "https://jakemccrary.com/blog/2020/11/11/creating-a-custom-kindle-dictionary",
      "url": "https://jakemccrary.com/blog/2020/11/11/creating-a-custom-kindle-dictionary/",
      "date_published": "2020-11-11T19:23:00-06:00",
      "title": "Creating a custom Kindle dictionary",
      "summary": "Here are the steps to make a custom Kindle dictionary.",
      "content_html": "<p>Back in April 2013, I created and published a <a href=\"https://gumroad.com/l/dune-dictionary\">custom Kindle dictionary</a> for the book <a href=\"http://www.amazon.com/gp/product/B00B7NPRY8/ref=as_li_tl?ie=UTF8&amp;camp=1789&amp;creative=390957&amp;creativeASIN=B00B7NPRY8&amp;linkCode=as2&amp;tag=jakemccrary08-20&amp;linkId=LC2NFEXWA7JXW57B\">Dune</a>.\nAs far as I can tell, <a href=\"https://gumroad.com/l/dune-dictionary\">my Dune dictionary</a> was the very first custom Kindle dictionary for a fiction book.</p>\n\n<p>I created it because I was reading Dune for the first time and there were many unfamiliar words.\nThese words could not be looked up by my Kindle because they were not found in any of on-device dictionaries.\nThese words were in Dune&rsquo;s glossary but flipping back-and-forth to that on a Kindle was a huge pain.</p>\n\n<p>I initially worked around this by printing a word list from Wikipedia and carrying it with me.\nThis was better but it was still annoying.</p>\n\n<p>I was so annoyed that I took a break from reading to figure out how to create a custom Kindle dictionary.\nAt the time, there wasn&rsquo;t a ton of great information online about how to do this.</p>\n\n<p>Eventually, I found Amazon&rsquo;s <a href=\"https://s3.amazonaws.com/kindlegen/AmazonKindlePublishingGuidelines.pdf\">Kindle Publishing Guidelines</a> and, referencing it, managed to figure out something that worked.\nThe link in the previous sentence is to the <strong>current</strong> documentation which is much nicer than the <a href=\"https://web.archive.org/web/20130408183149/http://s3.amazonaws.com/kindlegen/AmazonKindlePublishingGuidelines.pdf\">mid-2013 documentation</a>.\nThe earlier documentation left me with questions and required quite a bit of experimentation.</p>\n\n<p>Using the mid-2013 documentation, I developed some Clojure code to generate my <a href=\"https://gumroad.com/l/dune-dictionary\">dictionary</a>.\nDoing this in 2013 was annoying.\nThe documentation was not good.</p>\n\n<p>I recently read <a href=\"https://www.gregegan.net/DIASPORA/DIASPORA.html\">Greg Egan&rsquo;s Diaspora</a> and found myself wishing I had a custom dictionary.\nI took a break from reading and packaged up Diaspora&rsquo;s glossary into a dictionary.\nI could have stuck with my 2013 generator but I decided to update it and write this article about creating a Kindle dictionary in late 2020.</p>\n\n<p>The new documentation is a bit better but it still isn&rsquo;t great.\nHere is what you need to do.</p>\n\n<h2>Making a dictionary</h2>\n\n<p>Below are the steps to building a dictionary.</p>\n\n<ol>\n<li>Construct your list of words and definitions.</li>\n<li>Convert the list into the format specified by Amazon.</li>\n<li>Create a cover page.</li>\n<li>Create a copyright page.</li>\n<li>Create a usage page (definitely optional).</li>\n<li>Make an <code>.opf</code> file.</li>\n<li>Combine the files together.</li>\n<li>Put it onto your device.</li>\n</ol>\n\n\n<h3>1. Construct your list of words and definitions</h3>\n\n<p>There really are no set instructions for this.\nSource your words and definitions and store them in some format that you&rsquo;ll be able to manipulate in a programming language.</p>\n\n<p>I&rsquo;ve sourced words a few different ways.\nI&rsquo;ve taken them straight from a book&rsquo;s glossary, a Wikipedia entry, and extracted them from a programming book&rsquo;s <a href=\"https://jakemccrary.com/blog/2013/07/09/releasing-the-functional-javascript-companion/\">source code</a>.</p>\n\n<h3>2. Convert the list into the format specified by Amazon</h3>\n\n<p>Below is the basic scaffolding of the html file Amazon requires along with some inline styles that I think look decent on devices.\nThis has some extra stuff in it and also doesn&rsquo;t contain everything Amazon specifies.\nBut it works.</p>\n\n<div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span></span></figcaption><div class=\"highlight\"><table><tr><td class=\"gutter\"><pre class=\"line-numbers\"><span class='line-number'>1</span>\n<span class='line-number'>2</span>\n<span class='line-number'>3</span>\n<span class='line-number'>4</span>\n<span class='line-number'>5</span>\n<span class='line-number'>6</span>\n<span class='line-number'>7</span>\n<span class='line-number'>8</span>\n<span class='line-number'>9</span>\n<span class='line-number'>10</span>\n<span class='line-number'>11</span>\n<span class='line-number'>12</span>\n<span class='line-number'>13</span>\n<span class='line-number'>14</span>\n<span class='line-number'>15</span>\n<span class='line-number'>16</span>\n<span class='line-number'>17</span>\n<span class='line-number'>18</span>\n<span class='line-number'>19</span>\n<span class='line-number'>20</span>\n<span class='line-number'>21</span>\n<span class='line-number'>22</span>\n<span class='line-number'>23</span>\n<span class='line-number'>24</span>\n<span class='line-number'>25</span>\n<span class='line-number'>26</span>\n<span class='line-number'>27</span>\n<span class='line-number'>28</span>\n<span class='line-number'>29</span>\n<span class='line-number'>30</span>\n<span class='line-number'>31</span>\n<span class='line-number'>32</span>\n</pre></td><td class='code'><pre><code class='html'><span class='line'><span class=\"nt\">&lt;html</span> <span class=\"na\">xmlns:math=</span><span class=\"s\">&quot;http://exslt.org/math&quot;</span> <span class=\"na\">xmlns:svg=</span><span class=\"s\">&quot;http://www.w3.org/2000/svg&quot;</span>\n</span><span class='line'>      <span class=\"na\">xmlns:tl=</span><span class=\"s\">&quot;https://kindlegen.s3.amazonaws.com/AmazonKindlePublishingGuidelines.pdf&quot;</span>\n</span><span class='line'>      <span class=\"na\">xmlns:saxon=</span><span class=\"s\">&quot;http://saxon.sf.net/&quot;</span> <span class=\"na\">xmlns:xs=</span><span class=\"s\">&quot;http://www.w3.org/2001/XMLSchema&quot;</span>\n</span><span class='line'>      <span class=\"na\">xmlns:xsi=</span><span class=\"s\">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span>\n</span><span class='line'>      <span class=\"na\">xmlns:cx=</span><span class=\"s\">&quot;https://kindlegen.s3.amazonaws.com/AmazonKindlePublishingGuidelines.pdf&quot;</span>\n</span><span class='line'>      <span class=\"na\">xmlns:dc=</span><span class=\"s\">&quot;http://purl.org/dc/elements/1.1/&quot;</span>\n</span><span class='line'>      <span class=\"na\">xmlns:mbp=</span><span class=\"s\">&quot;https://kindlegen.s3.amazonaws.com/AmazonKindlePublishingGuidelines.pdf&quot;</span>\n</span><span class='line'>      <span class=\"na\">xmlns:mmc=</span><span class=\"s\">&quot;https://kindlegen.s3.amazonaws.com/AmazonKindlePublishingGuidelines.pdf&quot;</span>\n</span><span class='line'>      <span class=\"na\">xmlns:idx=</span><span class=\"s\">&quot;https://kindlegen.s3.amazonaws.com/AmazonKindlePublishingGuidelines.pdf&quot;</span><span class=\"nt\">&gt;</span>\n</span><span class='line'>  <span class=\"nt\">&lt;head&gt;</span>\n</span><span class='line'>    <span class=\"nt\">&lt;meta</span> <span class=\"na\">http-equiv=</span><span class=\"s\">&quot;Content-Type&quot;</span> <span class=\"na\">content=</span><span class=\"s\">&quot;text/html; charset=utf-8&quot;</span><span class=\"nt\">&gt;</span>\n</span><span class='line'>    <span class=\"nt\">&lt;style&gt;</span>\n</span><span class='line'>      <span class=\"nt\">h5</span> <span class=\"p\">{</span>\n</span><span class='line'>          <span class=\"k\">font-size</span><span class=\"o\">:</span> <span class=\"m\">1em</span><span class=\"p\">;</span>\n</span><span class='line'>          <span class=\"k\">margin</span><span class=\"o\">:</span> <span class=\"m\">0</span><span class=\"p\">;</span>\n</span><span class='line'>      <span class=\"p\">}</span>\n</span><span class='line'>      <span class=\"nt\">dt</span> <span class=\"p\">{</span>\n</span><span class='line'>          <span class=\"k\">font-weight</span><span class=\"o\">:</span> <span class=\"k\">bold</span><span class=\"p\">;</span>\n</span><span class='line'>      <span class=\"p\">}</span>\n</span><span class='line'>      <span class=\"nt\">dd</span> <span class=\"p\">{</span>\n</span><span class='line'>          <span class=\"k\">margin</span><span class=\"o\">:</span> <span class=\"m\">0</span><span class=\"p\">;</span>\n</span><span class='line'>          <span class=\"k\">padding</span><span class=\"o\">:</span> <span class=\"m\">0</span> <span class=\"m\">0</span> <span class=\"m\">0.5em</span> <span class=\"m\">0</span><span class=\"p\">;</span>\n</span><span class='line'>          <span class=\"k\">display</span><span class=\"o\">:</span> <span class=\"k\">block</span>\n</span><span class='line'>      <span class=\"p\">}</span>\n</span><span class='line'>    <span class=\"nt\">&lt;/style&gt;</span>\n</span><span class='line'>  <span class=\"nt\">&lt;/head&gt;</span>\n</span><span class='line'>  <span class=\"nt\">&lt;body&gt;</span>\n</span><span class='line'>    <span class=\"nt\">&lt;mbp:framset&gt;</span>\n</span><span class='line'>      [PUT THE WORDS HERE]\n</span><span class='line'>    <span class=\"nt\">&lt;/mbp:framset&gt;</span>\n</span><span class='line'>  <span class=\"nt\">&lt;/body&gt;</span>\n</span><span class='line'><span class=\"nt\">&lt;/html&gt;</span>\n</span></code></pre></td></tr></table></div></figure></notextile></div>\n\n\n<p>The <code>[PUT THE WORDS HERE]</code> part gets filled in with the markup for all of your words.\nThe basic structure for an entry looks like the following.</p>\n\n<div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span></span></figcaption><div class=\"highlight\"><table><tr><td class=\"gutter\"><pre class=\"line-numbers\"><span class='line-number'>1</span>\n<span class='line-number'>2</span>\n<span class='line-number'>3</span>\n<span class='line-number'>4</span>\n<span class='line-number'>5</span>\n</pre></td><td class='code'><pre><code class='html'><span class='line'><span class=\"nt\">&lt;idx:entry</span> <span class=\"na\">name=</span><span class=\"s\">&quot;default&quot;</span> <span class=\"na\">scriptable=</span><span class=\"s\">&quot;yes&quot;</span> <span class=\"na\">spell=</span><span class=\"s\">&quot;yes&quot;</span><span class=\"nt\">&gt;</span>\n</span><span class='line'>  <span class=\"nt\">&lt;h5&gt;&lt;dt&gt;&lt;idx:orth&gt;</span>WORD HERE<span class=\"nt\">&lt;/idx:orth&gt;&lt;/dt&gt;&lt;/h5&gt;</span>\n</span><span class='line'>  <span class=\"nt\">&lt;dd&gt;</span>DEFINITION<span class=\"nt\">&lt;/dd&gt;</span>\n</span><span class='line'><span class=\"nt\">&lt;/idx:entry&gt;</span>\n</span><span class='line'><span class=\"nt\">&lt;hr/&gt;</span>\n</span></code></pre></td></tr></table></div></figure></notextile></div>\n\n\n<p>Every word has an <code>&lt;idx:entry&gt;</code> block followed by a <code>&lt;hr&gt;</code>.\nThese two elements together comprise a single entry.</p>\n\n<p>The <code>name</code> attribute on the <code>&lt;idx:entry&gt;</code> element sets the lookup index associated with the entry.\nUnless you are building a dictionary with multiple indexes, you can pretty much ignore it.\nWhatever value is provided needs to match the value found in the <code>.opf</code> file we&rsquo;ll make later.</p>\n\n<p>The <code>scriptable</code> attribute makes the entry available from the index and can only have the value <code>\"yes\"</code>.\nThe <code>spell</code> can also only be <code>\"yes\"</code> and enables wildcard search and spell correction.</p>\n\n<p>The markup you use inside the <code>idx:entry</code> element is mostly up to you.\nThe only markup you need is the <code>&lt;idx:orth&gt;</code> node.\nIts content is the word being looked up.\nThe rest of the markup can be whatever you want.</p>\n\n<p>I wrap the term in a <code>dt</code> and the definition in <code>dd</code> because it just feels like the right thing to do and provides tags to put some CSS styles on.\nI wrap the <code>dt</code> element in an <code>h5</code> because I couldn&rsquo;t figure out what CSS styles would actually work on my Kindle voyage to put the term on its own line.</p>\n\n<p>It isn&rsquo;t that I don&rsquo;t know what the styles should be but my Kindle did not respect them.\nFiguring out stuff like this is part of the experimentation required to produce a dictionary that you&rsquo;re happy with.</p>\n\n<p>There is additional supported markup that provides more functionality.\nThis includes providing alternative words that all resolve to the same entry, specifying if an exact match is required, and varying the search word from the displayed word.\nMost dictionaries don&rsquo;t need these features so I&rsquo;m not going to elaborate on them.</p>\n\n<h3>3. Construct a cover page.</h3>\n\n<p>This is just a requirement of a Kindle.\nCreate a html file called <code>cover.html</code> and substitute in the appropriate values.</p>\n\n<div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span></span></figcaption><div class=\"highlight\"><table><tr><td class=\"gutter\"><pre class=\"line-numbers\"><span class='line-number'>1</span>\n<span class='line-number'>2</span>\n<span class='line-number'>3</span>\n<span class='line-number'>4</span>\n<span class='line-number'>5</span>\n<span class='line-number'>6</span>\n<span class='line-number'>7</span>\n<span class='line-number'>8</span>\n<span class='line-number'>9</span>\n</pre></td><td class='code'><pre><code class='html'><span class='line'><span class=\"nt\">&lt;html&gt;</span>\n</span><span class='line'>  <span class=\"nt\">&lt;head&gt;</span>\n</span><span class='line'>    <span class=\"nt\">&lt;meta</span> <span class=\"na\">content=</span><span class=\"s\">&quot;text/html&quot;</span> <span class=\"na\">http-equiv=</span><span class=\"s\">&quot;content-type&quot;</span><span class=\"nt\">&gt;</span>\n</span><span class='line'>  <span class=\"nt\">&lt;/head&gt;</span>\n</span><span class='line'>  <span class=\"nt\">&lt;body&gt;</span>\n</span><span class='line'>    <span class=\"nt\">&lt;h1&gt;</span>Dune Dictionary<span class=\"nt\">&lt;/h1&gt;</span>\n</span><span class='line'>    <span class=\"nt\">&lt;h3&gt;</span>Created by Jake McCrary<span class=\"nt\">&lt;/h3&gt;</span>\n</span><span class='line'>  <span class=\"nt\">&lt;/body&gt;</span>\n</span><span class='line'><span class=\"nt\">&lt;/html&gt;</span>\n</span></code></pre></td></tr></table></div></figure></notextile></div>\n\n\n<p>Amazon wants you to provide an image as well but you don&rsquo;t actually have to do this.\nYou probably need to do this if you actually publish the dictionary through Amazon<sup id=\"fnref:1\"><a href=\"#fn:1\" rel=\"footnote\">1</a></sup>.</p>\n\n<h3>4. Create a copyright page</h3>\n\n<p>This is also a requirement of the Kindle publishing guide.\nThere isn&rsquo;t any special markup for doing this.</p>\n\n<p>Just make another html file and fill in some appropriate details.</p>\n\n<h3>5. Create a usage page</h3>\n\n<p>This isn&rsquo;t a requirement but I include another page that explains how to use the dictionary.\nAgain, this is just a html document with some content in it.</p>\n\n<h3>6. Make an <code>.opf</code> file.</h3>\n\n<p>This is one of the poorly documented but extremely important parts of making a Kindle dictionary.\nThis is a XML file that ties together all the previous files into an actual dictionary.</p>\n\n<p>Make an opf file and name it whatever you want; in this example we&rsquo;ll go with <code>dict.opf</code>.</p>\n\n<p>Below is the one I&rsquo;ve used for the Diaspora dictionary.\nIf you&rsquo;ve created an image for a cover then lines 7 and 15 are the important and line 15 should be uncommented.</p>\n\n<div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span></span></figcaption><div class=\"highlight\"><table><tr><td class=\"gutter\"><pre class=\"line-numbers\"><span class='line-number'>1</span>\n<span class='line-number'>2</span>\n<span class='line-number'>3</span>\n<span class='line-number'>4</span>\n<span class='line-number'>5</span>\n<span class='line-number'>6</span>\n<span class='line-number'>7</span>\n<span class='line-number'>8</span>\n<span class='line-number'>9</span>\n<span class='line-number'>10</span>\n<span class='line-number'>11</span>\n<span class='line-number'>12</span>\n<span class='line-number'>13</span>\n<span class='line-number'>14</span>\n<span class='line-number'>15</span>\n<span class='line-number'>16</span>\n<span class='line-number'>17</span>\n<span class='line-number'>18</span>\n<span class='line-number'>19</span>\n<span class='line-number'>20</span>\n<span class='line-number'>21</span>\n<span class='line-number'>22</span>\n<span class='line-number'>23</span>\n<span class='line-number'>24</span>\n<span class='line-number'>25</span>\n<span class='line-number'>26</span>\n<span class='line-number'>27</span>\n<span class='line-number'>28</span>\n<span class='line-number'>29</span>\n<span class='line-number'>30</span>\n<span class='line-number'>31</span>\n<span class='line-number'>32</span>\n<span class='line-number'>33</span>\n<span class='line-number'>34</span>\n<span class='line-number'>35</span>\n<span class='line-number'>36</span>\n<span class='line-number'>37</span>\n<span class='line-number'>38</span>\n</pre></td><td class='code'><pre><code class='xml'><span class='line'><span class=\"cp\">&lt;?xml version=&quot;1.0&quot;?&gt;</span>\n</span><span class='line'><span class=\"nt\">&lt;package</span> <span class=\"na\">version=</span><span class=\"s\">&quot;2.0&quot;</span> <span class=\"na\">xmlns=</span><span class=\"s\">&quot;http://www.idpf.org/2007/opf&quot;</span> <span class=\"na\">unique-identifier=</span><span class=\"s\">&quot;BookId&quot;</span><span class=\"nt\">&gt;</span>\n</span><span class='line'>  <span class=\"nt\">&lt;metadata&gt;</span>\n</span><span class='line'>    <span class=\"nt\">&lt;dc:title&gt;</span>A dictionary for Diaspora by Greg Egan<span class=\"nt\">&lt;/dc:title&gt;</span>\n</span><span class='line'>    <span class=\"nt\">&lt;dc:creator</span> <span class=\"na\">opf:role=</span><span class=\"s\">&quot;aut&quot;</span><span class=\"nt\">&gt;</span>Jake McCrary<span class=\"nt\">&lt;/dc:creator&gt;</span>\n</span><span class='line'>    <span class=\"nt\">&lt;dc:language&gt;</span>en-us<span class=\"nt\">&lt;/dc:language&gt;</span>\n</span><span class='line'>    <span class=\"nt\">&lt;meta</span> <span class=\"na\">name=</span><span class=\"s\">&quot;cover&quot;</span> <span class=\"na\">content=</span><span class=\"s\">&quot;my-cover-image&quot;</span> <span class=\"nt\">/&gt;</span>\n</span><span class='line'>    <span class=\"nt\">&lt;x-metadata&gt;</span>\n</span><span class='line'>      <span class=\"nt\">&lt;DictionaryInLanguage&gt;</span>en-us<span class=\"nt\">&lt;/DictionaryInLanguage&gt;</span>\n</span><span class='line'>      <span class=\"nt\">&lt;DictionaryOutLanguage&gt;</span>en-us<span class=\"nt\">&lt;/DictionaryOutLanguage&gt;</span>\n</span><span class='line'>      <span class=\"nt\">&lt;DefaultLookupIndex&gt;</span>default<span class=\"nt\">&lt;/DefaultLookupIndex&gt;</span>\n</span><span class='line'>    <span class=\"nt\">&lt;/x-metadata&gt;</span>\n</span><span class='line'>  <span class=\"nt\">&lt;/metadata&gt;</span>\n</span><span class='line'>  <span class=\"nt\">&lt;manifest&gt;</span>\n</span><span class='line'>    <span class=\"c\">&lt;!-- &lt;item href=&quot;cover-image.jpg&quot; id=&quot;my-cover-image&quot; media-type=&quot;image/jpg&quot; /&gt; --&gt;</span>\n</span><span class='line'>    <span class=\"nt\">&lt;item</span> <span class=\"na\">id=</span><span class=\"s\">&quot;cover&quot;</span>\n</span><span class='line'>          <span class=\"na\">href=</span><span class=\"s\">&quot;cover.html&quot;</span>\n</span><span class='line'>          <span class=\"na\">media-type=</span><span class=\"s\">&quot;application/xhtml+xml&quot;</span> <span class=\"nt\">/&gt;</span>\n</span><span class='line'>    <span class=\"nt\">&lt;item</span> <span class=\"na\">id=</span><span class=\"s\">&quot;usage&quot;</span>\n</span><span class='line'>          <span class=\"na\">href=</span><span class=\"s\">&quot;usage.html&quot;</span>\n</span><span class='line'>          <span class=\"na\">media-type=</span><span class=\"s\">&quot;application/xhtml+xml&quot;</span> <span class=\"nt\">/&gt;</span>\n</span><span class='line'>    <span class=\"nt\">&lt;item</span> <span class=\"na\">id=</span><span class=\"s\">&quot;copyright&quot;</span>\n</span><span class='line'>          <span class=\"na\">href=</span><span class=\"s\">&quot;copyright.html&quot;</span>\n</span><span class='line'>          <span class=\"na\">media-type=</span><span class=\"s\">&quot;application/xhtml+xml&quot;</span> <span class=\"nt\">/&gt;</span>\n</span><span class='line'>    <span class=\"nt\">&lt;item</span> <span class=\"na\">id=</span><span class=\"s\">&quot;content&quot;</span>\n</span><span class='line'>          <span class=\"na\">href=</span><span class=\"s\">&quot;content.html&quot;</span>\n</span><span class='line'>          <span class=\"na\">media-type=</span><span class=\"s\">&quot;application/xhtml+xml&quot;</span> <span class=\"nt\">/&gt;</span>\n</span><span class='line'>  <span class=\"nt\">&lt;/manifest&gt;</span>\n</span><span class='line'>  <span class=\"nt\">&lt;spine&gt;</span>\n</span><span class='line'>    <span class=\"nt\">&lt;itemref</span> <span class=\"na\">idref=</span><span class=\"s\">&quot;cover&quot;</span> <span class=\"nt\">/&gt;</span>\n</span><span class='line'>    <span class=\"nt\">&lt;itemref</span> <span class=\"na\">idref=</span><span class=\"s\">&quot;usage&quot;</span> <span class=\"nt\">/&gt;</span>\n</span><span class='line'>    <span class=\"nt\">&lt;itemref</span> <span class=\"na\">idref=</span><span class=\"s\">&quot;copyright&quot;</span><span class=\"nt\">/&gt;</span>\n</span><span class='line'>    <span class=\"nt\">&lt;itemref</span> <span class=\"na\">idref=</span><span class=\"s\">&quot;content&quot;</span><span class=\"nt\">/&gt;</span>\n</span><span class='line'>  <span class=\"nt\">&lt;/spine&gt;</span>\n</span><span class='line'>  <span class=\"nt\">&lt;guide&gt;</span>\n</span><span class='line'>    <span class=\"nt\">&lt;reference</span> <span class=\"na\">type=</span><span class=\"s\">&quot;index&quot;</span> <span class=\"na\">title=</span><span class=\"s\">&quot;IndexName&quot;</span> <span class=\"na\">href=</span><span class=\"s\">&quot;content.html&quot;</span><span class=\"nt\">/&gt;</span>\n</span><span class='line'>  <span class=\"nt\">&lt;/guide&gt;</span>\n</span><span class='line'><span class=\"nt\">&lt;/package&gt;</span>\n</span></code></pre></td></tr></table></div></figure></notextile></div>\n\n\n<p>An import element in this file is the <code>&lt;DefaultLookupIndex&gt;</code> element.\nThe <code>&lt;DefaultLookupIndex&gt;</code> content needs to contain the same value from the <code>name</code> attribute on your <code>&lt;idx:entry&gt;</code> elements.\nThe <code>&lt;DictionaryInLanguage&gt;</code> and <code>&lt;DictionaryOutLanguage&gt;</code> tell the Kindle the valid languages for your dictionary.</p>\n\n<p>The other elements in the <code>&lt;metadata&gt;</code> should be pretty self-explanatory.</p>\n\n<p>The <code>&lt;manifest&gt;</code> gives identifiers for the various files you&rsquo;ve made in the previous steps</p>\n\n<p>The commented out <code>&lt;img&gt;</code> shows how you&rsquo;d add the cover image if you opt to have one.\nFor sideloading dictionaries onto Kindles, it is not required.</p>\n\n<p>The <code>&lt;spine&gt;</code> section references the <code>&lt;item&gt;</code>s from the <code>&lt;manifest&gt;</code> and specifies the order they appear in your book.</p>\n\n<p>I honestly don&rsquo;t remember why the <code>&lt;guide&gt;</code> section is in there or what it is doing in this example.\nI&rsquo;m guessing that is what causes there to be an index with the word list in the dictionary but I haven&rsquo;t tried removing it and the documentation doesn&rsquo;t talk about it.\nI only have it there since I had it in earlier dictionaries I made.</p>\n\n<h3>7. Combine the files together</h3>\n\n<p>The publishing guidelines (as of October 2020) tell you to combine the previously created files together using the command line tool <code>kindlegen</code>.\nThe problem with those instructions is that Amazon doesn&rsquo;t offer <code>kindlegen</code> as a download anymore.\nIf you want to use it, you can still find it through the Internet Archive.</p>\n\n<p>Instead of following the publishing guidelines, we&rsquo;ll use Kindle Previewer to finish making the dictionary.\nIt is pretty straight forward.</p>\n\n<ol>\n<li>Download the <a href=\"https://www.amazon.com/gp/feature.html?ie=UTF8&amp;docId=1000765261\">Kindle Previewer</a> application.</li>\n<li>Open it up and click <code>File &gt; Open</code>.</li>\n<li>Find your <code>dict.opf</code> file and open that.</li>\n<li><code>File &gt; Export</code> and export it as a <code>.mobi</code> file.</li>\n</ol>\n\n\n<p>The conversion log will complain about a couple things such as missing cover.\nAs long as these are just <code>Warnings</code> it doesn&rsquo;t matter.</p>\n\n<p>I&rsquo;ve found the preview in this app doesn&rsquo;t match what it looks like on your device so take it with a grain of salt.</p>\n\n<h3>7. Put it onto your device</h3>\n\n<p>Finally, put the dictionary onto your Kindle.\nYou can do this by either using a USB cable or by emailing it to your Kindle&rsquo;s email address.</p>\n\n<p>Once it is on your Kindle, open it up and double check that the formatting is correct.\nNext, open the book you&rsquo;ve made it for and try looking up a word.\nIf the lookup fails or uses another dictionary, click the dictionary name in the pop-up to change your default dictionary to yours.\nNow when you try to look up a word, your dictionary is searched first.</p>\n\n<p>The great thing is that if a word <em>isn&rsquo;t</em> in your dictionary then the Kindle searches the other dictionaries<sup id=\"fnref:2\"><a href=\"#fn:2\" rel=\"footnote\">2</a></sup>.\nThis feature is great as it lets your dictionary be very focused.\nHopefully Amazon doesn&rsquo;t remove this feature.</p>\n\n<h2>End</h2>\n\n<p>It was interesting creating another dictionary so long after I made my first couple.\nSome of the new features, like the ability to require an exact word match, would have been useful for my <a href=\"https://jakemccrary.com/blog/2013/07/09/releasing-the-functional-javascript-companion/\">second dictionary</a>.\nThe actual markup recommendations have changed over the years but luckily my <a href=\"https://gumroad.com/l/dune-dictionary\">Dune dictionary</a> still works.\nI&rsquo;m not constantly checking that it works, so if Amazon had changed something and it broke, I probably wouldn&rsquo;t notice until someone reported it.</p>\n\n<p>The Kindle documentation is much better now compared to 2013 but it still isn&rsquo;t great.</p>\n\n<p>It is also a bummer that <code>kindlegen</code> is gone.\nIt was nice to be able to convert the input files from the command line.\nI also think this means you can no longer make a dictionary from a Linux machine as I don&rsquo;t remember seeing Kindle Previewer support.</p>\n\n<p>If you&rsquo;re ever in a situation where you think a custom dictionary would be useful, feel free to reach out.</p>\n\n<p>Go forth and make dictionaries.</p>\n<div class=\"footnotes\">\n<hr/>\n<ol>\n<li id=\"fn:1\">\n<p>This is actually a challenge to do due to restrictions on what Amazon allows published.<a href=\"#fnref:1\" rev=\"footnote\">&#8617;</a></p></li>\n<li id=\"fn:2\">\n<p>No idea if it searches all of them in some order but I&rsquo;m very glad it works this way.<a href=\"#fnref:2\" rev=\"footnote\">&#8617;</a></p></li>\n</ol>\n</div>\n\n",
      "author" : {
        "name" : "Jake McCrary"
      }
    },
    
    {
      "id": "https://jakemccrary.com/blog/2020/10/03/go-create-silly-small-programs",
      "url": "https://jakemccrary.com/blog/2020/10/03/go-create-silly-small-programs/",
      "date_published": "2020-10-03T13:24:00-05:00",
      "title": "Go create silly, small programs",
      "summary": "Solving small, sort of silly problems with software can make tiny improvements to the world. Go do it.",
      "content_html": "<p>Over the summer, I developed a couple of small, sort of silly programs.\nOne, <a href=\"https://jakemccrary.com/experiments/photo-fit/\">Photo Fit</a>, is a little tool that runs in a web browser and resizes photos to fit as your phone&rsquo;s background.\nThe other, <a href=\"https://default-equipment.herokuapp.com/\">Default Equipment</a>, runs on Heroku and automates changing the &ldquo;bike&rdquo; of my Strava-tracked e-bike rides to be my <a href=\"https://onewheel.com/\">onewheel</a>.</p>\n\n<p>These weren&rsquo;t created to solve large problems in the world.\nThere is no plan to make any money with them.\nAs of October 2020, Default Equipment doesn&rsquo;t even work for other people (though it could, send me a message if you&rsquo;d like to use it and I&rsquo;ll get around to it).</p>\n\n<p>Each was created to fix a minor annoyance in my life and, because these tools can live on the Internet, they can fix the same minor annoyance in other lives.</p>\n\n<p>With an increasing amount of software in the world, being able to write software is nearly sorcery<sup id=\"fnref:1\"><a href=\"#fn:1\" rel=\"footnote\">1</a></sup>.\nAs a developer, you can identify a problem in the world and then change the world to remove that problem.\nAnd, depending on the problem, you can remove it for everyone else.</p>\n\n<p>Software developers aren&rsquo;t alone in being able to identify problems and remove them through creation.\nCarpenters can build shelves for their books.\nCooks can prepare food to remove hunger.\nYou can come up with nearly an infinite number of other examples.</p>\n\n<p>The difference is that a solo developer can solve problems for an unknown number of other folks.\nThis is enabled by the Internet enabled ease of distribution.\nThis is very powerful.</p>\n\n<p>Developers can expose their solution to others through a web application.\nDesktop or mobile applications can be distributed through various app stores or made available as a download.\nSource code can be made available for others to run.\nBeing able to distribute easily and cheaply is a game changer.</p>\n\n<p>A developer&rsquo;s change to the world might be a minor improvement.\nPhoto Fit might never be used by anyone besides me.\nBut it is still out there, making the world slightly better.\nIt is available for someone to stumble upon when they are also annoyed by the same problem.</p>\n\n<p>It felt good to write these tiny, useful programs.\nIf you scope them small enough, there is a definitive ending point<sup id=\"fnref:2\"><a href=\"#fn:2\" rel=\"footnote\">2</a></sup>.\nThis lets you feel that finishing-a-project satisfaction quickly.\nThe small size also allows you experiment with new techniques and tools without committing to a large and ongoing commitment.</p>\n\n<p>I wrote both Photo Fit and Default Equipment in TypeScript.\nBefore the beginning of summer, I didn&rsquo;t know TypeScript and had little exposure to Node.js.\nNow I have some experience with both and gained that while making small improvements to my life and potentially the lives of others.</p>\n\n<p>If you haven&rsquo;t developed software to solve a small problem recently, I&rsquo;d recommend doing it.\nDon&rsquo;t hesitate to remove a problem that feels silly.\nRemoving those problems can still make your life slightly better and gives you an opportunity to learn.\nIt feels good to remove an annoyance from your life.\nIf you can, make that software available to others so their lives are improved as well.\nTake advantage of the power of easy distribution to improve the world and not just your tiny slice of it.</p>\n<div class=\"footnotes\">\n<hr/>\n<ol>\n<li id=\"fn:1\">\n<p>This is taken to an extreme in the fantasy series <a href=\"https://www.goodreads.com/series/131379-magic-2-0\">Magic 2.0</a>.<a href=\"#fnref:1\" rev=\"footnote\">&#8617;</a></p></li>\n<li id=\"fn:2\">\n<p>Excluding any ongoing maintenance. But if you&rsquo;re making something small enough you can approach near zero ongoing maintenance. One of my longest running solve-my-own-problems application, Book Robot, has been operating for nearly 7 years with minimal effort.<a href=\"#fnref:2\" rev=\"footnote\">&#8617;</a></p></li>\n</ol>\n</div>\n\n",
      "author" : {
        "name" : "Jake McCrary"
      }
    },
    
    {
      "id": "https://jakemccrary.com/blog/2020/08/31/utilities-i-like-selecta",
      "url": "https://jakemccrary.com/blog/2020/08/31/utilities-i-like-selecta/",
      "date_published": "2020-08-31T22:24:00-05:00",
      "title": "Utilities I like: selecta",
      "summary": "Selecta is a useful command-line fuzzy text selector.",
      "content_html": "<p><a href=\"https://github.com/garybernhardt/selecta\">Selecta</a> is a command-line utility that gives you the power to fuzzy select items from a list of text.\nWhat does that mean?\nIt means you pipe <code>selecta</code> a list of text on stdin, it helps you make a choice from items in that list, and then <code>selecta</code> prints that choice to stdout.</p>\n\n<p>Here is an example of me using it to help me narrow in on what file I&rsquo;d like to pass to <code>wc</code>.</p>\n\n<p><video autoplay loop muted playsinline>\n  <source src=\"https://jakemccrary.com/images/selecta-search.webm\" type=\"video/webm\">\n  <source src=\"https://jakemccrary.com/images/selecta-search.mp4\" type=\"video/mp4\">\n</video></p>\n\n<p>In this example, I search for markdown files using <code>ripgrep</code> (<code>rg</code>), type part of a filename, hit enter to select the match, and then see the <code>wc</code> stats of that file.\nThis isn&rsquo;t the greatest example of using <code>selecta</code> but it adequately shows what it does.</p>\n\n<p>Some number of years ago, I wrote a script called <code>connect-db</code>.\nThis script used <code>selecta</code>, along with <code>grep</code>, <code>sed</code>, and <code>cut</code>, to provide a very pleasant command-line experience for connecting to known databases.\nMy coworkers and I used this script frequently.</p>\n\n<p>By combining <code>selecta</code> with other stdin/stdout friendly command-line tools you can build really enjoyable, time-saving tools.\n<a href=\"https://github.com/garybernhardt/selecta\">Selecta</a> is a useful utility to add to your toolkit.</p>\n",
      "author" : {
        "name" : "Jake McCrary"
      }
    },
    
    {
      "id": "https://jakemccrary.com/blog/2020/07/03/introducing-photo-fit",
      "url": "https://jakemccrary.com/blog/2020/07/03/introducing-photo-fit/",
      "date_published": "2020-07-03T18:37:00-05:00",
      "title": "Introducing Photo Fit",
      "summary": "Introducing Photo Fit, a TypeScript web app that makes your landscape photos work well with your vertical phone.",
      "content_html": "<p>Earlier this year, I wanted to use a landscape photo as my background on my phone.\nIt wasn&rsquo;t the photo below but we can use it as an example.</p>\n\n<p><img class=\"center\" src=\"https://jakemccrary.com/images/photo-fit/keyboard-new-keycaps.jpg\" title=\"Landscape image of my keyboard\" alt=\"Landscape image of my keyboard\"></p>\n\n<p>When I made it my background, my phone<sup id=\"fnref:1\"><a href=\"#fn:1\" rel=\"footnote\">1</a></sup> zoomed in to make it fit the portrait orientation of the phone.</p>\n\n<p><img class=\"center\" src=\"https://jakemccrary.com/images/photo-fit/phone-background-before.jpg\" title=\"Screenshot of phone with zoomed in keyboard photo\" alt=\"Screenshot of phone with zoomed in keyboard photo\"></p>\n\n<p>This is not great.\nI don&rsquo;t want a zoomed in version that fits my vertical phone.\nI want to see the whole photo with black bars at the top and bottom</p>\n\n<p>I tried to find a way to add these bars using my phone.\nI couldn&rsquo;t find an easy way.</p>\n\n<p>At this point, a reasonable solution would have been transferring the photo to a computer, editing it, and transferring it back to my phone.\nI didn&rsquo;t do that.\nInstead, I wrote a little TypeScript<sup id=\"fnref:2\"><a href=\"#fn:2\" rel=\"footnote\">2</a></sup> web app that adds the bars for you.\nYou open the website on your phone, select an image, and then download a properly sized image.</p>\n\n<p><img class=\"center\" src=\"https://jakemccrary.com/images/photo-fit/phone-background-after.jpg\" title=\"Screenshot of phone with properly fitting image\" alt=\"Screenshot of phone with properly fitting image\"></p>\n\n<p>The tool uses the canvas API and does all of the work in the browser itself.\nIt was a fun, bite-sized project and it gave me an excuse to write some TypeScript and do some web programming.\nThis was the first time I&rsquo;ve written TypeScript since learning it and I haven&rsquo;t done any web programming in a while.</p>\n\n<p>Making <a href=\"https://jakemccrary.com/experiments/photo-fit/\">Photo Fit</a> was not a fast approach to changing my phone&rsquo;s background.\nBut, now the tool exists and anyone, including future me, can quickly resize their photo from the comfort of their own phone.</p>\n\n<p><a href=\"https://jakemccrary.com/experiments/photo-fit/\">Photo Fit</a> is live and available for others to use.\nI&rsquo;ve only tested it on my own phone and desktop browsers.\nIt might not work!\nIf you do try it and something weird happens, plese let me know.</p>\n<div class=\"footnotes\">\n<hr/>\n<ol>\n<li id=\"fn:1\">\n<p>A Samsung S8 running Android 9 <a href=\"#fnref:1\" rev=\"footnote\">&#8617;</a></p></li>\n<li id=\"fn:2\">\n<p>I recently learned some TypeScript through <a href=\"https://www.executeprogram.com\">Execute Program</a>. Execute program is a really neat application of spaced repetition for learning programming concepts.<a href=\"#fnref:2\" rev=\"footnote\">&#8617;</a></p></li>\n</ol>\n</div>\n\n",
      "author" : {
        "name" : "Jake McCrary"
      }
    },
    
    {
      "id": "https://jakemccrary.com/blog/2020/06/28/using-bazel-to-help-fix-flaky-tests",
      "url": "https://jakemccrary.com/blog/2020/06/28/using-bazel-to-help-fix-flaky-tests/",
      "date_published": "2020-06-28T18:28:00-05:00",
      "title": "Using Bazel to help fix flaky tests",
      "summary": "Here is a way to use Bazel to help fix flaky tests.",
      "content_html": "<p>Flaky tests are terrible.\nThese are tests that pass or fail without anything changing in the code.\nThey often pass the majority of the time and fail rarely.\nThis makes them hard to detect and cause developers to often just run the tests again.</p>\n\n<p>Flaky tests erode your team&rsquo;s confidence in your system.\nThey cause folks to get in the habit of not trusting the output of tests.\nThis discourages people from writing tests as they stop seeing them as something that improves quality and instead view them as a drag on productivity.</p>\n\n<p>Flaky tests are often hard to fix.\nIf they were easy to fix, they wouldn&rsquo;t have been flaky in the first place.\nOne difficulty in fixing them is that the failures are often hard to reproduce.</p>\n\n<p>Often, the first step in fixing a flaky test is to write a script to run the tests multiple times in a row.\nIf you are using <a href=\"https://bazel.build/\">Bazel</a> as your build tool you don&rsquo;t need to write this.</p>\n\n<p>Here is an example <code>bazel</code><sup id=\"fnref:1\"><a href=\"#fn:1\" rel=\"footnote\">1</a></sup> command for helping you recreate flaky test failures.</p>\n\n<p><code>bazel test --test_strategy=exclusive --test_output=errors --runs_per_test=50 -t- //...</code></p>\n\n<p>The above command is running all the test targets in a workspace and each flag is important.</p>\n\n<ul>\n<li><code>--runs_per_test=50</code> is telling Bazel to run each test 50 times.</li>\n<li><code>--test_output=errors</code> is telling Bazel to only print errors to your console.</li>\n<li><code>-t-</code> is a shortcut for <code>--nocache_test_results</code> (or <code>--cache_test_results=no</code>).\nThis flag tells Bazel to <strong>not</strong> cache the test results.</li>\n<li><code>--test_strategy=exclusive</code> will cause tests to be run serially.\nWithout this, Bazel could run your test targets concurrently and if your tests aren&rsquo;t designed for this you may run into other failures.</li>\n</ul>\n\n\n<p>Flaky tests are terrible and you should try not to have them.\nTry your best to have reliable tests.</p>\n<div class=\"footnotes\">\n<hr/>\n<ol>\n<li id=\"fn:1\">\n<p>I&rsquo;ve written this while using Bazel 3.2.0. If you are reading this far in the future the flags may have changed.<a href=\"#fnref:1\" rev=\"footnote\">&#8617;</a></p></li>\n</ol>\n</div>\n\n",
      "author" : {
        "name" : "Jake McCrary"
      }
    },
    
    {
      "id": "https://jakemccrary.com/blog/2020/05/04/how-to-be-alerted-when-a-long-running-process-finishes",
      "url": "https://jakemccrary.com/blog/2020/05/04/how-to-be-alerted-when-a-long-running-process-finishes/",
      "date_published": "2020-05-04T20:35:00-05:00",
      "title": "How to be automatically notified when long running processes finish",
      "summary": "I get distracted when running slow processes. Here is how I get notified when they are done.",
      "content_html": "<p>Let me set the stage.\nI kick off the compilation of a large Scala codebase.\nThis will take minutes to finish, so I switch to Slack and catch up on what coworkers have posted.\nSomeone posted an interesting link and I follow it to an article.\nFifteen minutes later, I notice the compilation finished twelve minutes ago.\nI silently grumble at myself, disappointed that I didn&rsquo;t start the next step twelve minutes ago.</p>\n\n<p>Has some variation of the above happened to you?</p>\n\n<p>It doesn&rsquo;t happen to me anymore because now my computer tells me when any long running process finishes.\nThis might sound annoying but it is great.\nI no longer feel guilty<sup id=\"fnref:1\"><a href=\"#fn:1\" rel=\"footnote\">1</a></sup> for dropping into Slack and can immediately get back to the task at hand as soon the process finishes.</p>\n\n<p>I&rsquo;ve done this by enhancing on my setup for showing the <a href=\"https://jakemccrary.com/blog/2020/04/21/using-bash-preexec-for-monitoring-the-runtime-of-your-last-command/\">runtime of the previous command in my prompt</a>.\nYou don&rsquo;t have to read that article for the rest of this one to make sense, but you should because it shows you how to add a very useful feature to your prompt.</p>\n\n<p>Below is the code that causes my computer to tell me when it finishes running commands that takes longer than 30 seconds.\nIt is found in my <code>~/.bashrc</code>.\nAn explanation follows the code snippet.</p>\n\n<div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span></span></figcaption><div class=\"highlight\"><table><tr><td class=\"gutter\"><pre class=\"line-numbers\"><span class='line-number'>1</span>\n<span class='line-number'>2</span>\n<span class='line-number'>3</span>\n<span class='line-number'>4</span>\n<span class='line-number'>5</span>\n<span class='line-number'>6</span>\n<span class='line-number'>7</span>\n<span class='line-number'>8</span>\n<span class='line-number'>9</span>\n<span class='line-number'>10</span>\n<span class='line-number'>11</span>\n<span class='line-number'>12</span>\n<span class='line-number'>13</span>\n<span class='line-number'>14</span>\n<span class='line-number'>15</span>\n<span class='line-number'>16</span>\n<span class='line-number'>17</span>\n<span class='line-number'>18</span>\n<span class='line-number'>19</span>\n<span class='line-number'>20</span>\n<span class='line-number'>21</span>\n<span class='line-number'>22</span>\n<span class='line-number'>23</span>\n<span class='line-number'>24</span>\n<span class='line-number'>25</span>\n<span class='line-number'>26</span>\n<span class='line-number'>27</span>\n<span class='line-number'>28</span>\n<span class='line-number'>29</span>\n<span class='line-number'>30</span>\n<span class='line-number'>31</span>\n<span class='line-number'>32</span>\n</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class=\"c\"># Using https://github.com/rcaloras/bash-preexec</span>\n</span><span class='line'>preexec<span class=\"o\">()</span> <span class=\"o\">{</span>\n</span><span class='line'>  <span class=\"nv\">_last_command</span><span class=\"o\">=</span><span class=\"nv\">$1</span>\n</span><span class='line'>  <span class=\"k\">if</span> <span class=\"o\">[</span> <span class=\"s2\">&quot;UNSET&quot;</span> <span class=\"o\">==</span> <span class=\"s2\">&quot;${_timer}&quot;</span> <span class=\"o\">]</span><span class=\"p\">;</span> <span class=\"k\">then</span>\n</span><span class='line'>    <span class=\"nv\">_timer</span><span class=\"o\">=</span><span class=\"nv\">$SECONDS</span>\n</span><span class='line'>  <span class=\"k\">else</span>\n</span><span class='line'>    <span class=\"nv\">_timer</span><span class=\"o\">=</span><span class=\"k\">${</span><span class=\"nv\">_timer</span><span class=\"k\">:-</span><span class=\"nv\">$SECONDS</span><span class=\"k\">}</span>\n</span><span class='line'>  <span class=\"k\">fi</span>\n</span><span class='line'><span class=\"o\">}</span>\n</span><span class='line'>\n</span><span class='line'>_maybe_speak<span class=\"o\">()</span> <span class=\"o\">{</span>\n</span><span class='line'>    <span class=\"nb\">local </span><span class=\"nv\">elapsed_seconds</span><span class=\"o\">=</span><span class=\"nv\">$1</span>\n</span><span class='line'>    <span class=\"k\">if</span> <span class=\"o\">((</span> elapsed_seconds &gt; <span class=\"m\">30</span> <span class=\"o\">))</span><span class=\"p\">;</span> <span class=\"k\">then</span>\n</span><span class='line'>        <span class=\"nb\">local </span>c\n</span><span class='line'>        <span class=\"nv\">c</span><span class=\"o\">=</span><span class=\"k\">$(</span><span class=\"nb\">echo</span> <span class=\"s2\">&quot;${_last_command}&quot;</span> <span class=\"p\">|</span> cut -d<span class=\"s1\">&#39; &#39;</span> -f1<span class=\"k\">)</span>\n</span><span class='line'>        <span class=\"o\">(</span> say <span class=\"s2\">&quot;finished ${c}&quot;</span> <span class=\"p\">&amp;</span> <span class=\"o\">)</span>\n</span><span class='line'>    <span class=\"k\">fi</span>\n</span><span class='line'><span class=\"o\">}</span>\n</span><span class='line'>\n</span><span class='line'>precmd<span class=\"o\">()</span> <span class=\"o\">{</span>\n</span><span class='line'>  <span class=\"k\">if</span> <span class=\"o\">[</span> <span class=\"s2\">&quot;UNSET&quot;</span> <span class=\"o\">==</span> <span class=\"s2\">&quot;${_timer}&quot;</span> <span class=\"o\">]</span><span class=\"p\">;</span> <span class=\"k\">then</span>\n</span><span class='line'>     <span class=\"nv\">timer_show</span><span class=\"o\">=</span><span class=\"s2\">&quot;0s&quot;</span>\n</span><span class='line'>  <span class=\"k\">else</span>\n</span><span class='line'>    <span class=\"nv\">elapsed_seconds</span><span class=\"o\">=</span><span class=\"k\">$((</span>SECONDS <span class=\"o\">-</span> _timer<span class=\"k\">))</span>\n</span><span class='line'>    _maybe_speak <span class=\"k\">${</span><span class=\"nv\">elapsed_seconds</span><span class=\"k\">}</span>\n</span><span class='line'>    <span class=\"nv\">timer_show</span><span class=\"o\">=</span><span class=\"s2\">&quot;$(format-duration seconds $elapsed_seconds)&quot;</span>\n</span><span class='line'>  <span class=\"k\">fi</span>\n</span><span class='line'>  <span class=\"nv\">_timer</span><span class=\"o\">=</span><span class=\"s2\">&quot;UNSET&quot;</span>\n</span><span class='line'><span class=\"o\">}</span>\n</span><span class='line'>\n</span><span class='line'><span class=\"c\"># put at the bottom of my .bashrc</span>\n</span><span class='line'><span class=\"o\">[[</span> -f <span class=\"s2\">&quot;$HOME/.bash-preexec.sh&quot;</span> <span class=\"o\">]]</span> <span class=\"o\">&amp;&amp;</span> <span class=\"nb\">source</span> <span class=\"s2\">&quot;$HOME/.bash-preexec.sh&quot;</span>\n</span></code></pre></td></tr></table></div></figure></notextile></div>\n\n\n<p><a href=\"https://github.com/rcaloras/bash-preexec\">Bash-Preexec</a> triggers the <code>preexec</code>, immediately before a command is execute, and <code>precmd</code> functions, immediately before the shell prompt reappears.\nThose two functions are enough to figure out how much time has elapsed while a command ran.\nYou setup Bash-Preexec by downloading <a href=\"https://github.com/rcaloras/bash-preexec/blob/master/bash-preexec.sh\">bash-preexec.sh</a> and sourcing it in your <code>~/.bashrc</code>.</p>\n\n<p><code>preexec</code> is passed the command being ran and it captures it in <code>_last_command</code>.\nIt also captures the current number of seconds the shell has been running as <code>_timer</code>.</p>\n\n<p><code>precmd</code> uses the value in <code>_timer</code> to calculate the elapsed time in seconds and then calls the function <code>_maybe_speak</code> with this as an argument.\nIt also does the work required for showing the elapsed time in my prompt.</p>\n\n<p>If the elapsed time is greater than 30 seconds then <code>_maybe_speak</code> uses <code>cut</code> to discard the arguments of captured command, leaving me with the command itself.\nIt then uses <code>say</code> to produce an audible alert of what command just finished.\nI discard the arguments because otherwise the <code>say</code> command can go on for a long time.</p>\n\n<p><code>say</code> is a tool that ships with macOS.\nI haven&rsquo;t gotten around to it yet but I&rsquo;ll need to use something else on my Linux machines.</p>\n\n<p>You may have noticed that I run <code>say</code> in the background and in a subshell.\nRunning it in the background lets me continue interacting with my shell while <code>say</code> finishes executing and running it in a subshell prevents text from appearing in my shell when the background job finishes.</p>\n\n<p>With this setup, I can kick off a slow compile or test run and not feel so bad about dropping into Slack or reading Reddit. It is wonderful and I&rsquo;d recommend it (though, I&rsquo;d more strongly recommend not having commands that take a while to run).</p>\n<div class=\"footnotes\">\n<hr/>\n<ol>\n<li id=\"fn:1\">\n<p>I still feel a little guilty as doing so will break any momentum/flow I had going on, but that flow was already broken by the slowness of the command.<a href=\"#fnref:1\" rev=\"footnote\">&#8617;</a></p></li>\n</ol>\n</div>\n\n",
      "author" : {
        "name" : "Jake McCrary"
      }
    },
    
    {
      "id": "https://jakemccrary.com/blog/2020/04/26/hanging-a-hangboard-using-a-doorway-pull-up-bar",
      "url": "https://jakemccrary.com/blog/2020/04/26/hanging-a-hangboard-using-a-doorway-pull-up-bar/",
      "date_published": "2020-04-26T20:42:00-05:00",
      "title": "How to hang a hangboard using a doorway pull-up bar",
      "summary": "Follow these instructions for hanging a hangboard with a doorway pull-up bar",
      "content_html": "<p>If you&rsquo;ve browsed the <a href=\"https://jakemccrary.com/adventure\">adventure</a> section of my website you know I&rsquo;m a climber.\nCurrently, the climbing gyms in Chicago are closed due to COVID-19 concerns.\nThis has put a damper on my training but I own a hangboard and have been able to keep training my fingers at home.</p>\n\n<p>A hangboard allows you to apply stress to your fingers in a measured and controlled fashion.\nIt is a vital tool for a climber who is serious about getting stronger.\nIt is also a great rehab tool for coming back from injuries.</p>\n\n<p>Below is my hangboard.</p>\n\n<p><img src=\"https://jakemccrary.com/images/hangboard.png\" alt=\"Hangboard mounted using hooks and a pull-up bar\" /></p>\n\n<p>As you can see from the photo, I&rsquo;ve hung mine using a doorway pull-up bar and a bunch of hooks.\nThis lets me easily take it down and causes no permanent damage to anything in my apartment.\nThe towels are there to make sure the door frame isn&rsquo;t crushed by any of the hard pieces.</p>\n\n<p>Originally, I followed <a href=\"https://www.youtube.com/watch?v=Cu-MrncHpJo\">this video</a> to mount it using some pipe and shoving the pipe into the pull-up bar.\nThis setup made me uncomfortable as the forces on the pull-up bar were far away from the intended location.\nThis resulted in a lot of flexing and I was concerned about how the pull-up bar was acting on the frame.</p>\n\n<p>I searched online for other ideas and saw a setup that used hooks.\nThis was appealing to me as it moves your weight under the bar.\nA quick trip to Home Depot and a bit of easy construction and now I can keep up my finger strength when stuck at home.\nHere are the steps to build one.</p>\n\n<ol>\n<li>Buy a 2 inch x 10 inch wood board (or some other 2 inch x N inch board that is big enough for whatever you want to attach to it).</li>\n<li>Cut the board so it spans the width of your doorway plus a few extra inches. Home Depot can do this for you.</li>\n<li>Mount your hangboard to the board.</li>\n<li>Take <a href=\"https://www.homedepot.com/p/Everbilt-Screw-in-Steel-Bicycle-Hook-with-Vinyl-Coating-25-lbs-21407/206585761\">hooks</a>, typically used for hanging bicycles up in a garage, and screw them into the top of your 2-in x 10-in.</li>\n<li>Hang the hooks over the pull-up bar. Adjust the hooks so each is pulling on the bar.</li>\n<li>Find some padding, I used towels, and put the padding between the door trim and other hard surfaces.</li>\n<li>Hang on your hangboard and get stronger.</li>\n</ol>\n\n\n<p>The board and hook method was much easier to construct than the other pull-up bar method and feels much more solid.\nThe pull-up bar isn&rsquo;t rated for too much weight, so I&rsquo;m not going to do any super heavy, two-handed hangs but it is plenty solid for other hangboard exercises.</p>\n\n<p>If you&rsquo;re a climber and don&rsquo;t want to permanently mount a handboard, I&rsquo;d highly recommend this.\nIf you don&rsquo;t own a hangboard, I pick up something from <a href=\"https://www.tensionclimbing.com/hangboards/\">Tension Climbing</a>.\nTheir wooden boards are easy on the finger tips and have all the edge sizes you&rsquo;ll need.</p>\n",
      "author" : {
        "name" : "Jake McCrary"
      }
    },
    
    {
      "id": "https://jakemccrary.com/blog/2020/04/21/using-bash-preexec-for-monitoring-the-runtime-of-your-last-command",
      "url": "https://jakemccrary.com/blog/2020/04/21/using-bash-preexec-for-monitoring-the-runtime-of-your-last-command/",
      "date_published": "2020-04-21T18:22:00-05:00",
      "title": "Using Bash-Preexec for monitoring the runtime of your last command",
      "summary": "Put the runtime of your previous command in your terminal prompt using Bash-Preexec",
      "content_html": "<p>My article on <a href=\"https://jakemccrary.com/blog/2015/05/03/put-the-last-commands-run-time-in-your-bash-prompt/\">putting the runtime of your last command into your bash prompt</a> is one of my most surfaced-by-google articles.\nWhy is this a great to your prompt?\nTo quote my previous article:</p>\n\n<blockquote><p>I’m fairly certain the following scenario has happened to every terminal user. You run a command and, while it is running, realize you should have prefixed it with <code>time</code>. You momentarily struggle with the thought of killing the command and rerunning it with <code>time</code>. You decide not to and the command finishes without you knowing how long it took. You debate running it again.</p>\n\n<p>For the last year I’ve lived in a world without this problem. Upon completion, a command’s approximate run time is displayed in my prompt. It is awesome.</p></blockquote>\n\n<p>I&rsquo;ve been living without the above problem since sometime in 2014 and not having that problem is still awesome.</p>\n\n<p>I have made some changes since 2014.</p>\n\n<p>One change was switching to using <a href=\"https://github.com/rcaloras/bash-preexec\">Bash-Preexec</a> instead of directly using <code>trap</code> and <code>$PROMPT_COMMAND</code> for calling functions to start and stop tracking runtime.\nBash-Preexec lets you trigger a function (or multiple) right after a command has been read and right before each prompt.</p>\n\n<p>The usage is pretty straight forward.\nIn the most basic case, you source <code>bash-preexec.sh</code> and then provide functions named <code>preexec</code>, which is invoked right before a command is executed, and/or <code>precmd</code>, which is invoked just before each prompt.\n<code>bash-preexec.sh</code> can be downloaded from <a href=\"https://github.com/rcaloras/bash-preexec/\">its repo</a>.\nThe changes required to move to Bash-Preexec pretty <a href=\"https://github.com/jakemcc/dotfiles/commit/46fc3dc9d4d7d0d73152c77b7383645af42b3d5d\">pretty minimal</a>.</p>\n\n<p>The other change was introducing the script, <a href=\"https://github.com/jakemcc/dotfiles/blob/9c8c0315f35b55df6cef7e21261e3dcbbfac86e1/home/.bin/format-duration#L3-L4\">format-duration</a> by <a href=\"https://twitter.com/gfredericks_\">Gary Fredericks</a>, to humanely format the time.\nThis script converts seconds into a more readable string (example: 310 to <code>5m10s</code>)</p>\n\n<p>Here is a screenshot of everything in action (with a reduced prompt, my normal one includes git and other info).</p>\n\n<p><img src=\"https://jakemccrary.com/images/runtime-humane-example.png\" width=\"320\" height=\"150\" title=\"Command line prompt showing runtimes of previous commands\" alt=\"Command line prompt showing runtimes of previous commands\"></p>\n\n<p>Below is a simplified snippet from my <code>.bashrc</code> that provides runtimes using both of these additions.</p>\n\n<div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span></span></figcaption><div class=\"highlight\"><table><tr><td class=\"gutter\"><pre class=\"line-numbers\"><span class='line-number'>1</span>\n<span class='line-number'>2</span>\n<span class='line-number'>3</span>\n<span class='line-number'>4</span>\n<span class='line-number'>5</span>\n<span class='line-number'>6</span>\n<span class='line-number'>7</span>\n<span class='line-number'>8</span>\n<span class='line-number'>9</span>\n<span class='line-number'>10</span>\n<span class='line-number'>11</span>\n<span class='line-number'>12</span>\n<span class='line-number'>13</span>\n<span class='line-number'>14</span>\n<span class='line-number'>15</span>\n<span class='line-number'>16</span>\n<span class='line-number'>17</span>\n<span class='line-number'>18</span>\n<span class='line-number'>19</span>\n<span class='line-number'>20</span>\n<span class='line-number'>21</span>\n<span class='line-number'>22</span>\n<span class='line-number'>23</span>\n<span class='line-number'>24</span>\n<span class='line-number'>25</span>\n</pre></td><td class='code'><pre><code class='bash'><span class='line'>preexec<span class=\"o\">()</span> <span class=\"o\">{</span>\n</span><span class='line'>  <span class=\"k\">if</span> <span class=\"o\">[</span> <span class=\"s2\">&quot;UNSET&quot;</span> <span class=\"o\">==</span> <span class=\"s2\">&quot;${timer}&quot;</span> <span class=\"o\">]</span><span class=\"p\">;</span> <span class=\"k\">then</span>\n</span><span class='line'>    <span class=\"nv\">timer</span><span class=\"o\">=</span><span class=\"nv\">$SECONDS</span>\n</span><span class='line'>  <span class=\"k\">else</span>\n</span><span class='line'>    <span class=\"nv\">timer</span><span class=\"o\">=</span><span class=\"k\">${</span><span class=\"nv\">timer</span><span class=\"k\">:-</span><span class=\"nv\">$SECONDS</span><span class=\"k\">}</span>\n</span><span class='line'>  <span class=\"k\">fi</span>\n</span><span class='line'><span class=\"o\">}</span>\n</span><span class='line'>\n</span><span class='line'>precmd<span class=\"o\">()</span> <span class=\"o\">{</span>\n</span><span class='line'>  <span class=\"k\">if</span> <span class=\"o\">[</span> <span class=\"s2\">&quot;UNSET&quot;</span> <span class=\"o\">==</span> <span class=\"s2\">&quot;${timer}&quot;</span> <span class=\"o\">]</span><span class=\"p\">;</span> <span class=\"k\">then</span>\n</span><span class='line'>     <span class=\"nv\">timer_show</span><span class=\"o\">=</span><span class=\"s2\">&quot;0s&quot;</span>\n</span><span class='line'>  <span class=\"k\">else</span>\n</span><span class='line'>    <span class=\"nv\">the_seconds</span><span class=\"o\">=</span><span class=\"k\">$((</span>SECONDS <span class=\"o\">-</span> timer<span class=\"k\">))</span>\n</span><span class='line'>    <span class=\"c\"># use format-duration to make time more human readable</span>\n</span><span class='line'>    <span class=\"nv\">timer_show</span><span class=\"o\">=</span><span class=\"s2\">&quot;$(format-duration seconds $the_seconds)&quot;</span>\n</span><span class='line'>  <span class=\"k\">fi</span>\n</span><span class='line'>  <span class=\"nv\">timer</span><span class=\"o\">=</span><span class=\"s2\">&quot;UNSET&quot;</span>\n</span><span class='line'><span class=\"o\">}</span>\n</span><span class='line'>\n</span><span class='line'><span class=\"c\"># Add $last_show to the prompt.</span>\n</span><span class='line'><span class=\"nv\">PS1</span><span class=\"o\">=</span><span class=\"s1\">&#39;[last: ${timer_show}s][\\w]$ &#39;</span>\n</span><span class='line'>\n</span><span class='line'><span class=\"c\"># a bunch more lines until the end of my .bashrc</span>\n</span><span class='line'><span class=\"c\"># where I include .bash-preexec.sh</span>\n</span><span class='line'><span class=\"o\">[[</span> -f <span class=\"s2\">&quot;$HOME/.bash-preexec.sh&quot;</span> <span class=\"o\">]]</span> <span class=\"o\">&amp;&amp;</span> <span class=\"nb\">source</span> <span class=\"s2\">&quot;$HOME/.bash-preexec.sh&quot;</span>\n</span></code></pre></td></tr></table></div></figure></notextile></div>\n\n\n<p>No more wondering about the runtime of commands is great.\nIntroducing <code>format-duration</code> made reading the time easier while Bash-Preexec made reading the implementation easier.\nI highly recommend setting up something similar for your shell.</p>\n",
      "author" : {
        "name" : "Jake McCrary"
      }
    },
    
    {
      "id": "https://jakemccrary.com/blog/2020/03/16/a-retrospective-format",
      "url": "https://jakemccrary.com/blog/2020/03/16/a-retrospective-format/",
      "date_published": "2020-03-16T12:52:00-05:00",
      "title": "A retrospective format for remote or co-located teams",
      "summary": "Retrospectives are useful regardless of being located in an office or working remotely. Here is a simple format for running remote or in-person retros",
      "content_html": "<blockquote><p>See all of my remote/working-from-home <a href=\"https://jakemccrary.com/blog/categories/remote/\">articles here</a>.</p></blockquote>\n\n<p><a href=\"https://retrospectivewiki.org/index.php?title=Agile_Retrospective_Resource_Wiki\">Retrospectives</a> are a useful type of meeting to have periodically with your team.\nThere are many different <a href=\"https://retrospectivewiki.org/index.php?title=Retrospective_Plans\">formats</a> of retrospectives.</p>\n\n<p>One of them can be summarized in the following steps:</p>\n\n<ol>\n<li>Gather the team together</li>\n<li>Set the stage</li>\n<li>Brainstorm answers to the questions <code>What went well?</code> and <code>What needs improvement?</code></li>\n<li>Discuss the answers</li>\n</ol>\n\n\n<p>Let&rsquo;s talk about each step and see how each works with an co-located or remote team.</p>\n\n<h3>Step 1: Gather the team</h3>\n\n<p>This step is self explanatory.\nIf you are an in-person team, then this is gathering everyone together in a room for some allotted about of time.\nIf you are a remote team, or have remote folks on your team, then this is gathering everyone together in a video conference.</p>\n\n<p>Preferably everyone in the retro is communicating in same way.\nThis means if <strong>anyone</strong> is remote, it is preferable that <strong>everyone</strong> join the video conference from their own computer instead of using a single screen and video from a shared conference room.\nMy earlier article about <a href=\"https://jakemccrary.com/blog/2016/06/28/seven-tips-for-successful-remote-meetings/\">tips for remote meetings</a> goes into more details on this topic.</p>\n\n<p>Everyone using the same communication method puts everyone on the same page and dramatically improves the experience for the remote folks.\nWith a mixed group, we&rsquo;ll want to use some remote collaboration tools anyway, so it is useful for everyone to have their own computer with them.\nThey might as well use it for video communication as well.</p>\n\n<h3>Step 2: Set the stage</h3>\n\n<p>This part doesn&rsquo;t differ between an entirely in-person meeting, mixed, or entirely remote meeting.</p>\n\n<p>Take the time to set the stage for the meeting.\nRemind everyone that we&rsquo;re here to improve and to listen with an open mind.\nRemind everyone to try to not make things personal and not take things personally.\nThis is a good time to read the <a href=\"https://retrospectivewiki.org/index.php?title=The_Prime_Directive\">Prime Directive</a>.</p>\n\n<p>This is also a good time to set the boundaries of the discussion.\nWhat is the retrospective covering?\nIs it covering the last few weeks?\nThe last quarter?\nThe new working from home experience?\nPick a topic so everyone in the meeting focuses on the same things.</p>\n\n<h3>Step 3: Answer the questions</h3>\n\n<p>In this step, we will answer the questions <code>What went well?</code> and <code>What needs improvement?</code> and use those answers for discussion in the remainder of the meeting. Timebox this step to 5 to 10 minutes.</p>\n\n<p>In an in-person setting, this is often done through the use of <a href=\"https://www.post-it.com/3M/en_US/post-it/products/~/Post-it-Products/Notes/Super-Sticky/?N=4327+5927575+7568222+3294529207+3294857497&amp;rt=r3\">Post-it</a> notes.\nGive each attendee a marker and a stack of notes and have each person write down as many answers as they can come up with, one per post-it note, to the two questions.\nDedicate a section of a whiteboard or wall for each question and have people bring the generated answers to the respective sections.\nTry to group the answers by topics.</p>\n\n<p>With a remote meeting, you don&rsquo;t have the physical whiteboard and cards.\nThat is perfectly fine!\nOnce you figure out your remote collaboration tools, this part of the retrospective isn&rsquo;t difficult.</p>\n\n<p>I&rsquo;ve mostly done remote retrospectives using <a href=\"https://trello.com/\">Trello</a>.\nTrello works great for this as it is multi-user and does a great job of presenting lists to a group.\nHere is how previous teams I&rsquo;ve worked with setup Trello for remote retrospectives.</p>\n\n<p>First, make a Trello board and make sure everyone has an invite to view and edit the board.\nSecond, add the following columns to the board.</p>\n\n<p><img src=\"https://jakemccrary.com/images/remote-retros/retros-first-three-columns.png\" title=\"First three columns before any cards\" alt=\"First three columns before any cards\" /></p>\n\n<p>The first column is for Step 2 of the process and is there to remind everyone why we&rsquo;re all spending time in this meeting.</p>\n\n<p>Columns two and three are used in this step.\nHave attendees add cards to these columns as they come up with answers\nIf anyone notices duplicates during this time frame, move them near each other by dragging them up or down in the column.\nIf you notice someone else has already put a card that you&rsquo;d put up there, don&rsquo;t bother putting it down again (this differs from the in-person meeting).</p>\n\n<p><img src=\"https://jakemccrary.com/images/remote-retros/first-three-before-voting.png\" alt=\"First three columns with cards before voting\" /></p>\n\n<h4>[remote only] Step 3.5: Vote on cards</h4>\n\n<p>This step sneaks into the remote retrospective and is missing from the in-person retro.\nIn the in-person retro, duplication of post-it notes serves as this voting stage.</p>\n\n<p>Once all the answers have been generated, or time is up, it is time to vote on what will be discussed in the next step.\nOnly have people vote on the <code>What needs improvement?</code> answers.</p>\n\n<p>There are at least two ways of doing this in Trello but my favorite is having attendees hover their mouse cursor over the card and then hit <code>space bar</code><sup id=\"fnref:1\"><a href=\"#fn:1\" rel=\"footnote\">1</a></sup>.\nThis sticks their avatar on the card (in Trello speak, I believe this is called joining a card).\nYou can either restrict folks to a certain number of votes, say 3, or let them go wild and vote as many times as they want.\nI haven&rsquo;t found the outcomes to be much different and find infinite votes more fun.</p>\n\n<p><img src=\"https://jakemccrary.com/images/remote-retros/first-three-columns-with-votes.png\" alt=\"First three columns with votes\" /></p>\n\n<p>Once voting is finished (again, timer or when it seems to have reached an end), have one person sort the cards by number of votes with the highest votes at the top of the list.</p>\n\n<p><img src=\"https://jakemccrary.com/images/remote-retros/first-three-columns-votes-sorted.png\" alt=\"First three columns with cards sorted by votes\" /></p>\n\n<h3>Step 4: Discuss the answers</h3>\n\n<p>With in-person or remote retros, go over the answers to <code>What went well?</code> first.\nThis starts the discussion with positive feelings.\nThis part usually goes pretty fast as we&rsquo;re just celebrating wins and not having a long discussions about them.</p>\n\n<p>Next, start discussing the answers to <code>What needs improvement?</code></p>\n\n<p>For each topic being discussed, set a five minute timer.\nAt the end of the five minutes, do a quick poll of the attendees on if the topic should be continued or not.\nIf it should be continued, start a three minute timer and continue discussion.\nAt the end of those three minutes, repeat the vote for continuing or not.</p>\n\n<p>Throughout the discussion, try to be mindful of people dominating conversation and give everyone a chance to voice their thoughts.\nTry to figure out some next steps to take to actually start making improvements on what needs to be improved.</p>\n\n<p>The above is generic advice for remote or in-person retros.\nWhen you&rsquo;re running a remote retro using Trello, it can be useful to do the following as well.</p>\n\n<p>You should add two more columns, <code>Next Steps</code> and <code>Discussed</code>, to the right of the <code>What needs improvement?</code> column.</p>\n\n<p><img src=\"https://jakemccrary.com/images/remote-retros/last-three-columns-before-discussion.png\" alt=\"Additional columns added to board\" /></p>\n\n<p>Since your cards are sorted in the <code>What needs improvement?</code> column, you&rsquo;ll always be talking about the top card.\nAs discussion finishes, move it from the top of the <code>What needs improvement?</code> column into the <code>Discussed</code> column.\nAs <code>Next Steps</code> are discovered, add cards to the <code>Next Steps</code> column and assign the people responsible for following up to the card.\nBelow is an example of those three columns after discussing two cards.</p>\n\n<p><img src=\"https://jakemccrary.com/images/remote-retros/final-three-columns-post-discussion.png\" alt=\"Final state of last three columns\" /></p>\n\n<p>When voting on continuing discussion or not, it can be useful to have a hand signal for taking the vote and for continuing or ending the discussion. We&rsquo;d do a quick thumbs up or thumbs down and if half the team wants to keep going then we&rsquo;d seamlessly start the next timer.</p>\n\n<h2>Conclusion</h2>\n\n<p>Retrospectives can be a very handy tool for a team&rsquo;s continuous improvement.\nIf time isn&rsquo;t provided for reflecting, then reflecting does not happen and this makes improving harder.</p>\n\n<p>Remote retrospectives provide a challenge since most of us only have experience using physical sticky notes or whiteboards for collecting answers.\nWe don&rsquo;t need to recreate the same form factor for remote retrospectives.\nUsing remote collaboration tools, such as Trello, that don&rsquo;t recreate the sticky-note-on-wall experience can lead to initial confusion but, once familiar with them, the experience is pleasant and allows for greater participation.</p>\n\n<p>How is participation increased?\nWell, in an in-person retrospective you often are unable to read what everyone else has stuck up on the wall because of physical distance.\nWith a remote retro, you&rsquo;re able to read every answer added to the lists.</p>\n\n<p>Don&rsquo;t be afraid of running a remote retrospective.\nThey can be incredibly useful.</p>\n<div class=\"footnotes\">\n<hr/>\n<ol>\n<li id=\"fn:1\">\n<p>The alternative method I&rsquo;m aware of is to use a Trello Power-up to enable voting on cards. But why bother doing this when you can just stick faces on cards.<a href=\"#fnref:1\" rev=\"footnote\">&#8617;</a></p></li>\n</ol>\n</div>\n\n",
      "author" : {
        "name" : "Jake McCrary"
      }
    },
    
    {
      "id": "https://jakemccrary.com/blog/2020/03/10/more-working-from-home-tips",
      "url": "https://jakemccrary.com/blog/2020/03/10/more-working-from-home-tips/",
      "date_published": "2020-03-10T12:42:00-05:00",
      "title": "More working from home tips",
      "summary": "Working from home can be very productive. Here are some tips for making it better.",
      "content_html": "<blockquote><p>See all of my remote/working-from-home <a href=\"https://jakemccrary.com/blog/categories/remote/\">articles here</a>.</p></blockquote>\n\n<p>With the the new coronavirus spreading through the world, more people are either choosing or are being forced to work from home.\nFrom 2013 to 2018, the companies I worked for were entirely remote.\nFor the rest of my professional career, 2007 to 2013 and 2018 to now (March 2020), I&rsquo;ve also frequently worked from home.</p>\n\n<p>I&rsquo;ve managed to be very effective at it and I think others can be as well.</p>\n\n<p>After years of working in an office, transitioning to working from home isn&rsquo;t easy.\nI had difficulty with the transition and people I&rsquo;ve mentored have as well.\nI think most people will be able to be effective at home, assuming their workplace is supportive, if they try to get better at it.\nWith a supportive company or team, once you get used to working from home you probably find yourself getting more done.</p>\n\n<p>The key word in the sentence &ldquo;I&rsquo;m working from home&rdquo; is <strong>working</strong>.\nYou are going to be <strong>working</strong> where you spend a lot of your non-work time.\nThis can be a difficult mental transition.\nPhysically switching to an office environment can help switch your brain into work mode and now you no longer have that.\nDon&rsquo;t worry, it might feel rough in the beginning but you will get better at it.</p>\n\n<p>I&rsquo;ve written more articles about working <a href=\"https://jakemccrary.com/blog/categories/remote/\">remotely</a> and I&rsquo;d recommend you read those as well.\nThis article is primarily targeted at the person not making a permanent change in their work from home status.\nMy <a href=\"https://jakemccrary.com/blog/2017/10/31/a-guide-to-distributed-work/\">Guide to Distributed Work</a> is a bit more targeted at someone that is permanently choosing to work at home or in a position of power to influence work from home policies at a company.\nI&rsquo;d recommend that you read it as well as many of the subjects it talks about are generally applicable.\nIt steps through some of the pros and cons of remote work and links to other writing on the topic.</p>\n\n<p>Below is a hodgepodge of tips for working from home.</p>\n\n<h3>Setup a home workspace</h3>\n\n<p>In my years of remote work, I&rsquo;ve always managed to have a <a href=\"https://jakemccrary.com/blog/2015/03/31/my-home-work-space/\">dedicated space</a> for work.\nIn some apartments, this was a corner of a room where I put a desk and faced a wall.\nIn other apartments, I&rsquo;ve been privileged enough to have a dedicated room for an office.</p>\n\n<p>If you aren&rsquo;t planning on working from home permanently, or very frequently, then you probably don&rsquo;t want to spend a significant amount of money setting up a work area.\nThis probably means you don&rsquo;t want to find a home with a dedicated office and you may not want or be able to dedicate a portion of a room to a desk<sup id=\"fnref:1\"><a href=\"#fn:1\" rel=\"footnote\">1</a></sup>.</p>\n\n<p>Whatever your living arrangement is, I&rsquo;d encourage you to figure a way to have a regular spot to work at while you are working.\nHaving a regular spot to work from will help your brain turn on and off from work mode.</p>\n\n<p>Setting up a home workspace can be as low cost as using a <a href=\"https://www.amazon.com/Folding-Holder-Height-Adjustments-Original/dp/B01LZPMFW9/\">tv tray</a> or <a href=\"https://www.amazon.com/Lifetime-80251-Adjustable-Folding-Granite/dp/B0074HYWFG/\">folding table</a><sup id=\"fnref:2\"><a href=\"#fn:2\" rel=\"footnote\">2</a></sup> with a chair.\nYour setup could be as elaborate as getting a height adjustable desk with large monitors.\nIt could be something else entirely.</p>\n\n<p>Find something that works for you and stick with it.</p>\n\n<p>Beyond a dedicated space to work, make sure you have a reliable internet connection.\nIf you can, use Ethernet as it is generally better than WiFi.\nI&rsquo;ve never had a situation where I could use Ethernet and have found that having a good router is enough to make my WiFi reliable.</p>\n\n<h3>Discuss boundaries and expectations with your cohabitants</h3>\n\n<p>If you live with others that will be at home while you need to work, you should have a discussion with them about boundaries.\nYou are at home to do work and that expectation needs to be set.\nYou may be able to do some household chores during breaks or take other breaks with cohabitants but everyone in your living area needs to understand you are at home to work.</p>\n\n<p>If you have children that might have a particularly hard time with this, it can be useful to use some sort of physical signaling device (examples: a closed door, a light bulb being on, a closed curtain, headphones on) that you should not be interrupted.</p>\n\n<h3>Minimize distractions</h3>\n\n<p>This one is obvious but try to minimize distractions.\nDon&rsquo;t try to sit on your couch with the TV on and do work.\nYou won&rsquo;t be doing great work.</p>\n\n<p>If your home is loud and you have difficulty in a loud space, wear some ear plugs or noise canceling headphones.</p>\n\n<p>If cohabitants are distractions, refer to the above section and have that discussion with them about needing space.\nOne technique for dealing with interrupting cohabitants is to schedule time throughout your day for them.\nYou can use these scheduled times as breaks through out your working day.</p>\n\n<p>If you try to get some household chores done while working at home, make sure you schedule time for doing them.\nThis could be putting the time on your calendar or simply setting a timer when taking a break.\nRegardless of the method, when your time is up, get back to work.</p>\n\n<p>I&rsquo;ve often found that finishing a short, simple household task can actually jump-start finishing more complicated work tasks.\nUsing that momentum from the household chore can make accomplishing work tasks easier.</p>\n\n<h3>Having difficulty starting a work task?</h3>\n\n<p>Sometimes it is hard to start a task.\nIt can be especially hard if you are new to working at home and not used to working in your environment.</p>\n\n<p>One technique I&rsquo;ve found useful is the Pomodoro technique.\nThe steps to this technique are below.</p>\n\n<ol>\n<li>Pick a task.</li>\n<li>Set and start a timer (usually for 25 minutes).</li>\n<li>Focus intensely on the task for the duration of the timer.</li>\n<li>Make a mark on a piece of paper</li>\n<li>If you have fewer than four marks on the paper, take a 5 minute break and then go back to step 2.</li>\n<li>If you have four marks on the paper, then take a 15 minute break and go back to step 1.</li>\n</ol>\n\n\n<p>I don&rsquo;t follow those steps strictly and mostly use the trick of setting a timer for focused work.\nIf at the end of the timer I feel like continuing, I&rsquo;ll reset the timer.\nIf I need a break, I&rsquo;ll set the timer for a short period of time and take a break.</p>\n\n<p>It was mentioned above, but sometimes doing a small, easy task can jump-start knocking out TODOs.\nThis small, easy task could be something work related or some simple chore around the house.</p>\n\n<h3>Be mindful of your communication</h3>\n\n<p>Text communication is hard.\nIt is often taken more negative than intended.\nBe mindful of that.</p>\n\n<p>Try to take what your coworkers write in the most positive way possible.</p>\n\n<p>Try to be careful with your own written communication.\nIt sounds ridiculous but emojis can help make you look like less of a jerk and set a friendly tone.</p>\n\n<p>Don&rsquo;t hesitate to jump on a video or voice call with someone (or a group).\nVideo is a much higher quality interaction than voice and both are much higher quality than text.\nThe downside is the communication isn&rsquo;t persistent so be sure to write down outcomes of conversations.</p>\n\n<h3>Sync up with your team</h3>\n\n<p>Try to sync up with your team (if you don&rsquo;t have a team, sync up with someone else from the company) at a regular interval.\nThis should probably be at least once every couple days but it can be more regularly.\nI usually once a day.</p>\n\n<p>It can be easy to feel like an island when you are part of a remote group.\nRegular sync-ups help reduce that feeling.</p>\n\n<h3>Collaborate remotely</h3>\n\n<p>Most video conference software allows you to share your screen with others.\nSome of them even allow others to take control of your machine or treat your screen as a whiteboard.</p>\n\n<p>Take advantage of these features.\nAfter learning how to use them, these features can often make remote collaboration as productive as in-person collaboration.</p>\n\n<p>Using technology, you can even <a href=\"https://jakemccrary.com/blog/2015/01/24/remote-pairing/\">pair program</a> with someone from another city.</p>\n\n<p>Google Docs is another great remote collaboration tool.\nThe best meetings I have been part of were meetings where every attendee was editing a shared Google Doc.</p>\n\n<h3>Video Meetings</h3>\n\n<p>When possible, have video meetings over voice only conference calls.\nThe addition of body language through video makes remote conversations much better.</p>\n\n<p>You might want to introduce hand gestures for signaling during video meetings<sup id=\"fnref:3\"><a href=\"#fn:3\" rel=\"footnote\">3</a></sup>.\nOn a former team, we had the practice of raising a finger<sup id=\"fnref:4\"><a href=\"#fn:4\" rel=\"footnote\">4</a></sup> when you wanted to speak.\nThis practice helped prevent people from interrupting and speaking over each other.\nIt also let quieter people jump into conversations easier.</p>\n\n<p>As far as I can tell, <a href=\"http://zoom.us/\">Zoom</a> is still the winner in terms of video conferencing.</p>\n\n<p>I also recommend using a headset with dedicated microphone for talking through your computer.\nThe sound quality is usually better than using the built-in microphone.</p>\n\n<h2>End</h2>\n\n<p>It can be difficult to get good at working from home.\nIt is definitely a skill that is learned through experience and reflection.\nIf you have any questions about working remotely, feel free to reach out on <a href=\"https://twitter.com/jakemcc\">twitter</a> or through <a href=\"mailto:jake@jakemccrary.com\">email</a>.</p>\n\n<p>Working from home can be a great experience.</p>\n<div class=\"footnotes\">\n<hr/>\n<ol>\n<li id=\"fn:1\">\n<p>A desk can be any table that you can work on that is comfortable for a reasonable amount of time. It doesn&rsquo;t have to be what someone would typically think of as a desk.<a href=\"#fnref:1\" rev=\"footnote\">&#8617;</a></p></li>\n<li id=\"fn:2\">\n<p>I used a table like this for years in college and when working an internship.<a href=\"#fnref:2\" rev=\"footnote\">&#8617;</a></p></li>\n<li id=\"fn:3\">\n<p>These are also useful for in-person meetings.<a href=\"#fnref:3\" rev=\"footnote\">&#8617;</a></p></li>\n<li id=\"fn:4\">\n<p>No, not the middle finger.<a href=\"#fnref:4\" rev=\"footnote\">&#8617;</a></p></li>\n</ol>\n</div>\n\n",
      "author" : {
        "name" : "Jake McCrary"
      }
    },
    
    {
      "id": "https://jakemccrary.com/blog/2020/02/25/auto-syncing-a-git-repository",
      "url": "https://jakemccrary.com/blog/2020/02/25/auto-syncing-a-git-repository/",
      "date_published": "2020-02-25T21:09:00-06:00",
      "title": "Auto-syncing a git repository",
      "summary": "Here is a mostly automated way of syncing a directory using git whenever a file changes.",
      "content_html": "<p>I&rsquo;m currently keep notes on my computer using plain text and <a href=\"https://orgmode.org/\">Org mode</a>.</p>\n\n<p>I keep my notes in a git repository in my home directory, <code>~/org/</code>.\nI want my notes to be synced between my computers without me thinking about it.\nHistorically, I&rsquo;ve reached for something like Google Drive or Dropbox to do this but this time I reached for git and GitHub.</p>\n\n<p>Below is the script that I ended up cobbling together from various sources found online.\nThe script pushes and pulls changes from a remote repository and works on my macOS and linux machines.</p>\n\n<p>The loop starting on line 38 does the work.\nWhenever a file-watcher notices a change or 10 minutes passes, the loop pulls changes from a remote repository, commits any local changes, and pushes to the remote repository.\nThe lines before this are mostly checking that needed programs exist on the host.</p>\n\n<p>I keep this running in a background terminal and I check periodically to confirm it is still running.\nI could do something fancier but this isn&rsquo;t a critical system and the overhead of checking every couple days is nearly zero.\nMost of the time checking happens by accident when I accidentally maximize the terminal that runs the script.</p>\n\n<p>I&rsquo;ve been using this script for a long time now and I&rsquo;ve found it quite useful. I hope you do too.</p>\n\n<div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span></span></figcaption><div class=\"highlight\"><table><tr><td class=\"gutter\"><pre class=\"line-numbers\"><span class='line-number'>1</span>\n<span class='line-number'>2</span>\n<span class='line-number'>3</span>\n<span class='line-number'>4</span>\n<span class='line-number'>5</span>\n<span class='line-number'>6</span>\n<span class='line-number'>7</span>\n<span class='line-number'>8</span>\n<span class='line-number'>9</span>\n<span class='line-number'>10</span>\n<span class='line-number'>11</span>\n<span class='line-number'>12</span>\n<span class='line-number'>13</span>\n<span class='line-number'>14</span>\n<span class='line-number'>15</span>\n<span class='line-number'>16</span>\n<span class='line-number'>17</span>\n<span class='line-number'>18</span>\n<span class='line-number'>19</span>\n<span class='line-number'>20</span>\n<span class='line-number'>21</span>\n<span class='line-number'>22</span>\n<span class='line-number'>23</span>\n<span class='line-number'>24</span>\n<span class='line-number'>25</span>\n<span class='line-number'>26</span>\n<span class='line-number'>27</span>\n<span class='line-number'>28</span>\n<span class='line-number'>29</span>\n<span class='line-number'>30</span>\n<span class='line-number'>31</span>\n<span class='line-number'>32</span>\n<span class='line-number'>33</span>\n<span class='line-number'>34</span>\n<span class='line-number'>35</span>\n<span class='line-number'>36</span>\n<span class='line-number'>37</span>\n<span class='line-number'>38</span>\n<span class='line-number'>39</span>\n<span class='line-number'>40</span>\n<span class='line-number'>41</span>\n<span class='line-number'>42</span>\n<span class='line-number'>43</span>\n<span class='line-number'>44</span>\n<span class='line-number'>45</span>\n<span class='line-number'>46</span>\n<span class='line-number'>47</span>\n<span class='line-number'>48</span>\n<span class='line-number'>49</span>\n<span class='line-number'>50</span>\n</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class=\"c\">#!/bin/bash</span>\n</span><span class='line'>\n</span><span class='line'><span class=\"nb\">set</span> -e\n</span><span class='line'>\n</span><span class='line'><span class=\"nv\">TARGETDIR</span><span class=\"o\">=</span><span class=\"s2\">&quot;$HOME/org/&quot;</span>\n</span><span class='line'>\n</span><span class='line'>stderr <span class=\"o\">()</span> <span class=\"o\">{</span>\n</span><span class='line'>    <span class=\"nb\">echo</span> <span class=\"s2\">&quot;$1&quot;</span> &gt;<span class=\"p\">&amp;</span>2\n</span><span class='line'><span class=\"o\">}</span>\n</span><span class='line'>\n</span><span class='line'>is_command<span class=\"o\">()</span> <span class=\"o\">{</span>\n</span><span class='line'>    <span class=\"nb\">command</span> -v <span class=\"s2\">&quot;$1&quot;</span> <span class=\"p\">&amp;</span>&gt;/dev/null\n</span><span class='line'><span class=\"o\">}</span>\n</span><span class='line'>\n</span><span class='line'><span class=\"k\">if</span> <span class=\"o\">[</span> <span class=\"s2\">&quot;$(uname)&quot;</span> !<span class=\"o\">=</span> <span class=\"s2\">&quot;Darwin&quot;</span> <span class=\"o\">]</span><span class=\"p\">;</span> <span class=\"k\">then</span>\n</span><span class='line'>    <span class=\"nv\">INW</span><span class=\"o\">=</span><span class=\"s2\">&quot;inotifywait&quot;</span><span class=\"p\">;</span>\n</span><span class='line'>    <span class=\"nv\">EVENTS</span><span class=\"o\">=</span><span class=\"s2\">&quot;close_write,move,delete,create&quot;</span><span class=\"p\">;</span>\n</span><span class='line'>    <span class=\"nv\">INCOMMAND</span><span class=\"o\">=</span><span class=\"s2\">&quot;\\&quot;$INW\\&quot; -qr -e \\&quot;$EVENTS\\&quot; --exclude \\&quot;\\.git\\&quot; \\&quot;$TARGETDIR\\&quot;&quot;</span>\n</span><span class='line'><span class=\"k\">else</span> <span class=\"c\"># if Mac, use fswatch</span>\n</span><span class='line'>    <span class=\"nv\">INW</span><span class=\"o\">=</span><span class=\"s2\">&quot;fswatch&quot;</span><span class=\"p\">;</span>\n</span><span class='line'>    <span class=\"c\"># default events specified via a mask, see</span>\n</span><span class='line'>    <span class=\"c\"># https://emcrisostomo.github.io/fswatch/doc/1.14.0/fswatch.html/Invoking-fswatch.html#Numeric-Event-Flags</span>\n</span><span class='line'>    <span class=\"c\"># default of 414 = MovedTo + MovedFrom + Renamed + Removed + Updated + Created</span>\n</span><span class='line'>    <span class=\"c\">#                = 256 + 128+ 16 + 8 + 4 + 2</span>\n</span><span class='line'>    <span class=\"nv\">EVENTS</span><span class=\"o\">=</span><span class=\"s2\">&quot;--event=414&quot;</span>\n</span><span class='line'>    <span class=\"nv\">INCOMMAND</span><span class=\"o\">=</span><span class=\"s2\">&quot;\\&quot;$INW\\&quot; --recursive \\&quot;$EVENTS\\&quot; --exclude \\&quot;\\.git\\&quot; --one-event \\&quot;$TARGETDIR\\&quot;&quot;</span>\n</span><span class='line'><span class=\"k\">fi</span>\n</span><span class='line'>\n</span><span class='line'><span class=\"k\">for</span> cmd in <span class=\"s2\">&quot;git&quot;</span> <span class=\"s2\">&quot;$INW&quot;</span> <span class=\"s2\">&quot;timeout&quot;</span><span class=\"p\">;</span> <span class=\"k\">do</span>\n</span><span class='line'>    <span class=\"c\"># in OSX: `timeout` =&gt; brew install coreutils</span>\n</span><span class='line'>    <span class=\"c\"># in OSX: `fswatch` =&gt; brew install fswatch</span>\n</span><span class='line'>    is_command <span class=\"s2\">&quot;$cmd&quot;</span> <span class=\"o\">||</span> <span class=\"o\">{</span> stderr <span class=\"s2\">&quot;Error: Required command &#39;$cmd&#39; not found&quot;</span><span class=\"p\">;</span> <span class=\"nb\">exit </span>1<span class=\"p\">;</span> <span class=\"o\">}</span>\n</span><span class='line'><span class=\"k\">done</span>\n</span><span class='line'>\n</span><span class='line'><span class=\"nb\">cd</span> <span class=\"s2\">&quot;$TARGETDIR&quot;</span>\n</span><span class='line'><span class=\"nb\">echo</span> <span class=\"s2\">&quot;$INCOMMAND&quot;</span>\n</span><span class='line'>\n</span><span class='line'><span class=\"k\">while</span> <span class=\"nb\">true</span><span class=\"p\">;</span> <span class=\"k\">do</span>\n</span><span class='line'>    <span class=\"nb\">eval</span> <span class=\"s2\">&quot;timeout 600 $INCOMMAND&quot;</span> <span class=\"o\">||</span> <span class=\"nb\">true</span>\n</span><span class='line'><span class=\"nb\">    </span>git pull\n</span><span class='line'>    sleep 5\n</span><span class='line'>    <span class=\"nv\">STATUS</span><span class=\"o\">=</span><span class=\"k\">$(</span>git status -s<span class=\"k\">)</span>\n</span><span class='line'>    <span class=\"k\">if</span> <span class=\"o\">[</span> -n <span class=\"s2\">&quot;$STATUS&quot;</span> <span class=\"o\">]</span><span class=\"p\">;</span> <span class=\"k\">then</span>\n</span><span class='line'>        <span class=\"nb\">echo</span> <span class=\"s2\">&quot;$STATUS&quot;</span>\n</span><span class='line'>        <span class=\"nb\">echo</span> <span class=\"s2\">&quot;commit!&quot;</span>\n</span><span class='line'>        git add .\n</span><span class='line'>        git commit -m <span class=\"s2\">&quot;autocommit&quot;</span>\n</span><span class='line'>        git push origin\n</span><span class='line'>    <span class=\"k\">fi</span>\n</span><span class='line'><span class=\"k\">done</span>\n</span></code></pre></td></tr></table></div></figure></notextile></div>\n\n",
      "author" : {
        "name" : "Jake McCrary"
      }
    },
    
    {
      "id": "https://jakemccrary.com/blog/2020/01/11/reading-in-2019",
      "url": "https://jakemccrary.com/blog/2020/01/11/reading-in-2019/",
      "date_published": "2020-01-11T12:32:00-06:00",
      "title": "Reading in 2019",
      "summary": "This is my yearly reflection on my previous year of reading",
      "content_html": "<p>At the beginning of every year I reflect on the previous year of reading.\nI take a look at my records, fix errors, and think about reading goals for the upcoming year.</p>\n\n<p>Here are links to my previous end-of-year reflections: <a href=\"https://jakemccrary.com/blog/2014/01/01/using-incanter-to-review-my-2013-reading/\">2013</a>, <a href=\"https://jakemccrary.com/blog/2015/01/08/reading-in-2014/\">2014</a>, <a href=\"https://jakemccrary.com/blog/2016/03/13/reading-in-2015/\">2015</a>, <a href=\"https://jakemccrary.com/blog/2017/01/04/reading-in-2016/\">2016</a>, <a href=\"https://jakemccrary.com/blog/2018/03/03/reading-in-2017/\">2017</a>, and <a href=\"https://jakemccrary.com/blog/2019/01/21/reading-in-2018/\">2018</a>.</p>\n\n<p>I&rsquo;ve continued to keep track of my reading using <a href=\"http://goodreads.com\">Goodreads</a>.\nMy <a href=\"https://www.goodreads.com/user/show/3431614-jake-mccrary\">profile</a> has nearly the full list of the books I&rsquo;ve read since 2010.\n<a href=\"https://www.goodreads.com/review/list/3431614-jake-mccrary?shelf=read_2019\">This</a> is my 2019.</p>\n\n<h2>2019 Goal</h2>\n\n<blockquote><p>I have a stack of software and process books and I&rsquo;d like to read through at least some of them (others are more reference books). I&rsquo;m also going to bring over the 2018 goal of reading at least one book on writing. In a more general sense, I&rsquo;m hoping to put some practices together that help me gain more from the books I&rsquo;m reading. I&rsquo;m still thinking through what that means. - Me last year</p></blockquote>\n\n<p>That was my goal for 2019.\nIn list form it looks like this:</p>\n\n<ol>\n<li>Read some software or process books</li>\n<li>Read at least one book on writing</li>\n<li>Try to develop practices for getting more from books I&rsquo;ve read</li>\n</ol>\n\n\n<p>I read eight books related to the first goal and two (or three if I count an iffy one) related to the second.\nThat is enough where I feel pretty good about claiming I accomplished the first two goals.</p>\n\n<p>I mostly failed on the third goal.\nI was more aggressive about highlighting notes in my Kindle and I did occasionally look back at them.\nBeyond that I didn&rsquo;t do anything.</p>\n\n<h2>Highlights</h2>\n\n<p>Here are my five star books from 2019.\nThe titles are affiliate links to Amazon, so if you click one of those and make a purchase I get a small kickback<sup id=\"fnref:1\"><a href=\"#fn:1\" rel=\"footnote\">1</a></sup>.</p>\n\n<ul>\n<li><a href=\"https://amzn.to/2QFelCv\">Accelerate: Building and Scaling High-Performing Technology Organizations by Nicole Forsgren, Jez Humble, and Gene Kim</a> (<a href=\"https://www.goodreads.com/review/show/2411886698\">my review</a>)</li>\n<li><a href=\"https://amzn.to/39BjDHx\">Elements of Clojure by Zachary Tellman</a> (<a href=\"https://www.goodreads.com/review/show/2684688658\">my review</a>)</li>\n<li><a href=\"https://amzn.to/2FdqV6n\">A Tour of C++ by Bjarne Stroustrup</a> (<a href=\"https://www.goodreads.com/review/show/2822201641\">my review</a>)</li>\n<li><a href=\"https://amzn.to/2N5mLSL\">Developer Hegemony: The Future of Labor</a> (<a href=\"https://www.goodreads.com/review/show/2795008954\">my review</a>)</li>\n<li><a href=\"https://amzn.to/2MPwOed\">Digital Minimalism: Choosing a Focused Life in a Noisy World by Cal Newport</a></li>\n<li><a href=\"https://amzn.to/2QGW1Ja\">Effective Java by Joshua Bloch</a> (<a href=\"https://www.goodreads.com/review/show/2701581699\">my review</a>)</li>\n<li><a href=\"https://amzn.to/2rOgd3g\">21 Lessons for the 21st Century by Yuval Noah Harari</a> (<a href=\"https://www.goodreads.com/review/show/2562286276\">my review</a>)</li>\n<li><a href=\"https://amzn.to/2toADQZ\">Draft No. 4: On the Writing Process by John McPhee</a> (<a href=\"https://www.goodreads.com/review/show/2300752363\">my review</a>)</li>\n<li><a href=\"https://amzn.to/2MPuAeO\">The Push: A Climber&rsquo;s Journey of Endurance, Risk and Going Beyond Limits by Tommy Caldwell</a> (<a href=\"https://www.goodreads.com/review/show/2200390288\">my review</a>)</li>\n<li><a href=\"https://amzn.to/2rONP0V\">The Nickel Boys by Colson Whitehead</a></li>\n<li><a href=\"https://amzn.to/37sUGMK\">The Great Believers by Rebecca Makkai</a> (<a href=\"https://www.goodreads.com/review/show/3020415147\">my review</a>)</li>\n<li><a href=\"https://amzn.to/2tr2eRi\">The Bonfire of the Vanities by Tom Wolfe</a> (<a href=\"https://www.goodreads.com/review/show/2847590304\">my review</a>)</li>\n<li><a href=\"https://amzn.to/2tljYOf\">The Paper Menagerie and Other Stories by Ken Liu</a> (<a href=\"https://www.goodreads.com/review/show/1827462108\">my review</a>)</li>\n<li><a href=\"https://amzn.to/36kyAvO\">Exhalation: Stories by Ted Chiang</a> (<a href=\"https://www.goodreads.com/review/show/2804306157\">my review</a>)</li>\n<li><a href=\"https://amzn.to/36lAZGn\">Golden Son (Red Rising, #2) by Pierce Brown</a></li>\n<li><a href=\"https://amzn.to/2ZLAdjz\">Morning Star (Red Rising Saga, #3) by Pierce Brown</a></li>\n<li><a href=\"https://amzn.to/36fNKlU\">Iron Gold (Red Rising Saga, #4) by Pierce Brown</a> (<a href=\"https://www.goodreads.com/review/show/2760320870\">my review</a>)</li>\n<li><a href=\"https://amzn.to/36mab95\">Dark Age (Red Rising Saga #5) by Pierce Brown</a></li>\n<li><a href=\"https://amzn.to/2MPkjQ1\">Animal Farm by George Orwell</a> (<a href=\"https://www.goodreads.com/review/show/2811868686\">my review</a>)</li>\n</ul>\n\n\n<h4>Accelerate: Building and Scaling High-Performing Technology Organizations by Nicole Forsgren, Jez Humble, and Gene Kim</h4>\n\n<p>This is a stellar book on practices of technology organizations that help build high performing companies.\nIf you work at a company that produces software in any capacity, I&rsquo;d highly recommend this book.\nThis is a book that I&rsquo;ve recommended to any coworker looking, and some not looking, for book recommendations.</p>\n\n<h4>Elements of Clojure by Zachary Tellman</h4>\n\n<p>This book has Clojure in the title but it is applicable to more than that language.\nThe book was published a section at a time and as a result I&rsquo;ve read parts of it many times.\nThe content clearly shows that Zach has put a lot of thought into the topic.</p>\n\n<h4>A Tour of C++ by Bjarne Stroustrup</h4>\n\n<p>I&rsquo;ve written C++ off and on since I started programming nearly 20 years ago.\nOver those years, I&rsquo;ve seen C++ transform as new versions were released.\nEarlier in 2019, I was starting to write C++ again and this book was recommended by a coworker.\nI had last written C++ back in 2013 and this book was a perfect way to refresh my stuck in early 2013 knowledge.\nThere is no fluff in this book and it is full of useful information.</p>\n\n<h4>Developer Hegemony: The Future of Labor</h4>\n\n<p>This is a tough read.\nIt isn&rsquo;t tough because of difficult writing.\nIt is tough because it makes you depressed until you power through and reach the end.</p>\n\n<p>This book delivers a very cynical look at corporations.\nIt provides guidelines for getting ahead and climbing the corporate ladder.</p>\n\n<p>Then the book promotes an alternative approach, that of doing your own thing and going independent.\nIt makes a good case of it.</p>\n\n<p>Beware of this one, it might make you question what you are doing with your career and life.</p>\n\n<h4>Digital Minimalism: Choosing a Focused Life in a Noisy World by Cal Newport</h4>\n\n<p>There is a common theme of awareness throughout many of the books I read and this book hits that theme.\nThis book can help you become a more thoughtful user of technology.\nThere are many useful recommendations in this book.\nOne of them is the suggestion that you can use social media and other technology differently than how the creators want you to use it.\nIn 2019 I wrote about how I use <a href=\"https://jakemccrary.com/blog/2019/04/30/how-i-use-social-media/\">social media</a> which shows how I apply this idea.</p>\n\n<h4>Effective Java by Joshua Bloch</h4>\n\n<p>I&rsquo;ve read earlier editions in the past and decided to read the latest edition when it seemed like I&rsquo;d be writing Java again.\nThis book is still good and a must read if you work with Java.</p>\n\n<h4>21 Lessons for the 21st Century by Yuval Noah Harari</h4>\n\n<p>This book covers a lot of ground.</p>\n\n<p>Here is a quote from my friend <a href=\"https://twitter.com/deobald\">Steven Deobald</a> about this book.</p>\n\n<blockquote><p>Through stories and anecdotes woven into his almost unbelievably extensive research as a historian, &ldquo;21 Lessons&rdquo; is perhaps as entertaining and insightful as any other book I&rsquo;ve read. It is accessible to anyone and the ideas presented regarding the fate of our species are stitched together beautifully. The arc of the 21 chapters has a progressive, almost orchestral, quality to it. Each chapter builds on all those which precede it and although some chapters have surprisingly variable writing styles, none feels like Harari is attempting to showboat or to force his medium into the overly artistic.</p></blockquote>\n\n<h4>Draft No. 4: On the Writing Process by John McPhee</h4>\n\n<p>This was a pleasure to read.\nI like reading books about writing and this is a good one that talks about McPhee&rsquo;s approach towards creative non-fiction.</p>\n\n<h4>The Push: A Climber&rsquo;s Journey of Endurance, Risk and Going Beyond Limits by Tommy Caldwell</h4>\n\n<p>What can I say?\nI&rsquo;m a sucker for books on climbing and learning more about the icons of the sport I love.\nIf you&rsquo;ve watched the movie <a href=\"https://www.imdb.com/title/tt7286916/\">The Dawn Wall</a> then some of this will be familiar to you.</p>\n\n<h4>The Nickel Boys by Colson Whitehead</h4>\n\n<p>This is a great book.\nGo read the <a href=\"https://www.goodreads.com/book/show/42270835-the-nickel-boys\">Goodreads</a> page and pick it up.</p>\n\n<h4>The Great Believers by Rebecca Makkai</h4>\n\n<p>A friend of mine gave me a copy of this book and I&rsquo;m glad she did.\nIt tells the story of the AIDs epidemic in Chicago.\nThis is a great piece of writing.\nI&rsquo;m not surprised at all that it has won many awards.</p>\n\n<h4>The Bonfire of the Vanities by Tom Wolfe</h4>\n\n<p>This book is great.\nThe satire just drips off the pages.\nThere are passages in this book where you can just <em>feel</em> the anxiety of the characters.</p>\n\n<p>Every character is despicable and it is wonderful.</p>\n\n<h4>The Paper Menagerie and Other Stories by Ken Liu</h4>\n\n<p>This was my second time reading this book.\nIt is an excellent collection of short stories.</p>\n\n<p>The first time I read this book, in <a href=\"https://jakemccrary.com/blog/2017/01/04/reading-in-2016/\">2016</a>, I read the stories in order.\nThis time I took advantage of the Kindle&rsquo;s estimate of how long a chapter would take and I jumped around, picking out stories that fit how long I wanted to read.\nBoth ways of reading this collection were excellent.</p>\n\n<h4>Exhalation: Stories by Ted Chiang</h4>\n\n<p>I absolutely loved Ted Chiang&rsquo;s <em>Stories of Your Life and Others</em> and was excited when this collection of stories was published.\nI had high hopes for this collection and I was not disappointed.</p>\n\n<p>Some of the stories I had read prior to them being included in this collection but that didn&rsquo;t matter.\nI enjoyed reading the new stories and revisiting the previously published ones.</p>\n\n<blockquote><p>We don’t normally think of it as such, but writing is a technology, which means that a literate person is someone whose thought processes are technologically mediated. We became cognitive cyborgs as soon as we became fluent readers, and the consequences of that were profound.</p></blockquote>\n\n<p>That is a quote from a story in this collection.\nIt felt right to include it in an article about reading.</p>\n\n<h4>Golden Son, Morning Star, Iron Gold, and Dark Age by Pierce Brown</h4>\n\n<p>The four titles above are books two through five in Pierce Brown&rsquo;s <em>Red Rising</em> saga.\nI also read the first book in the series, Red Rising, in 2019 but it only earned a four star rating from me.\nI obviously enjoyed this series and devoured it.</p>\n\n<p>The books tell the story of a world full of inequality.\nThe world created is full of interesting characters and dilemmas.</p>\n\n<h4>Animal Farm by George Orwell</h4>\n\n<p>This was either my second or third time reading Animal Farm.\nIt is still good.\nReading it in 2019 and mapping in book behavior to the modern political climate was interesting.</p>\n\n<h3>Non-Five Star highlights</h3>\n\n<ul>\n<li><a href=\"https://amzn.to/2QFFkz5\">Irresistible: The Rise of Addictive Technology and the Business of Keeping Us Hooked by Adam Alter</a> (<a href=\"https://www.goodreads.com/review/show/1966643946\">my review</a>)</li>\n<li><a href=\"https://amzn.to/2FDh9e1\">Permanent Record by Edward Snowden</a> (<a href=\"https://www.goodreads.com/review/show/2983575511\">my review</a>)</li>\n<li><a href=\"https://amzn.to/2N9YYRC\">Atonement by Ian McEwan</a> (<a href=\"https://www.goodreads.com/review/show/1697924044\">my review</a>)</li>\n<li><a href=\"https://amzn.to/2sRX9Sp\">I Hear You by Michael S. Sorensen</a> (<a href=\"https://www.goodreads.com/review/show/2923747300\">my review</a>)</li>\n<li><a href=\"https://amzn.to/2t64fCF\">Recursion by Blake Crouch</a> (<a href=\"https://www.goodreads.com/review/show/2923743967\">my review</a>)</li>\n<li><a href=\"https://amzn.to/2NedZBE\">Version Control by Dexter Palmer</a> (<a href=\"https://www.goodreads.com/review/show/1827462266\">my review</a>)</li>\n</ul>\n\n\n<h4>Irresistible: The Rise of Addictive Technology and the Business of Keeping Us Hooked by Adam Alter</h4>\n\n<p>Yet another book that is at least somewhat about awareness.\nThis book talks about behavioral addiction but not just addictive technology.</p>\n\n<p>Is it the single book out of the handful of books I&rsquo;ve read in this space that I&rsquo;d recommend?\nNo, but it is a good addition to my collection on the topic.</p>\n\n<h4>Permanent Record by Edward Snowden</h4>\n\n<p>I consider myself fairly knowledgeable about Snowden and what he did but I still learned more through this book.\nOne part I particularly enjoyed was Snowden reflecting on what has changed since his actions.</p>\n\n<p>Another part I particularly enjoyed was Snowden&rsquo;s telling of the early Internet.\nThis was an Internet where identities online weren&rsquo;t necessarily tied to a real one.\nI&rsquo;m approximately the same age as Snowden and had similar experiences with being a young person during the early Internet days.\nIt was interesting to be reminded of that time while reading this book.</p>\n\n<p>I <a href=\"https://www.goodreads.com/notes/49833241-permanent-record/3431614-jake-mccrary?ref=bsop\">highlighted</a> a lot of passages and there are probably more I should have highlighted.</p>\n\n<h4>Atonement by Ian McEwan</h4>\n\n<p>This book was so close to being five stars.\nI started reading this book because I mistook the title for that of a science fiction book I&rsquo;ve been intending to read.\nI&rsquo;m glad I did.</p>\n\n<p>It took me a little while to get into the book but once I did I was hooked.</p>\n\n<p><a href=\"https://www.goodreads.com/review/show/1697596771?book_show_action=false\">Here</a> is a review from one of my friends that captures some of what I felt about this book.</p>\n\n<h4>I Hear You by Michael S. Sorensen</h4>\n\n<p>It provides some guidance towards being a more validating person.\nThe book is short and to the point.\nI&rsquo;ve managed to take some of its advice and I think it has been useful.</p>\n\n<h4>Recursion by Blake Crouch</h4>\n\n<p>This was really good.\nIt is action packed and an interesting concept.</p>\n\n<h4>Version Control by Dexter Palmer</h4>\n\n<p>I really enjoy this book.\nIt tells the story of a relationship with bits of science fiction.\nI really enjoyed my friend <a href=\"https://www.goodreads.com/review/show/2240581079?book_show_action=false\">Dan&rsquo;s</a> review.</p>\n\n<h2>Stats</h2>\n\n<p>The page count numbers for 2019 books are a bit screwed up so I&rsquo;m only doing a books per month graph this year.</p>\n\n<p><img src=\"https://jakemccrary.com/images/reading-by-month-2019.svg\" title=\"Number of books in each month\" alt=\"Book and pages count by month\" /></p>\n\n<p>Unsurprisingly, electronic books continue to be the dominate format.</p>\n\n<div class='bogus-wrapper'><notextile><figure class='code'><div class=\"highlight\"><table><tr><td class=\"gutter\"><pre class=\"line-numbers\"><span class='line-number'>1</span>\n<span class='line-number'>2</span>\n<span class='line-number'>3</span>\n<span class='line-number'>4</span>\n<span class='line-number'>5</span>\n</pre></td><td class='code'><pre><code class=''><span class='line'>|           | 2019 | 2018 | 2017 | 2016 | 2015 |\n</span><span class='line'>|-----------+------+------+------+------+------|\n</span><span class='line'>| ebook     |   43 |   37 |   37 |   56 |   47 |\n</span><span class='line'>| hardcover |    1 |    1 |    7 |    0 |    1 |\n</span><span class='line'>| paperback |    7 |    5 |    5 |    3 |    3 |</span></code></pre></td></tr></table></div></figure></notextile></div>\n\n\n<p>This year I read a noticeably higher amount of non-fiction books than in 2018.</p>\n\n<div class='bogus-wrapper'><notextile><figure class='code'><div class=\"highlight\"><table><tr><td class=\"gutter\"><pre class=\"line-numbers\"><span class='line-number'>1</span>\n<span class='line-number'>2</span>\n<span class='line-number'>3</span>\n<span class='line-number'>4</span>\n</pre></td><td class='code'><pre><code class=''><span class='line'>|             | 2019 | 2018 |\n</span><span class='line'>|-------------+------+------|\n</span><span class='line'>| fiction     |   28 |   29 |\n</span><span class='line'>| non-fiction |   23 |   14 |</span></code></pre></td></tr></table></div></figure></notextile></div>\n\n\n<h2>2020 Goals</h2>\n\n<p>I was encouraged by how many non-fiction books I read this year and how many of them ended up earning a five star rating.\nI&rsquo;d like to continue that trend of reading high-quality non-fiction books.</p>\n\n<p>I&rsquo;ve also been reading a lot of books but I haven&rsquo;t always been the best at trying to consciously apply the lessons from those books.\nI&rsquo;m going to try to improve that this year.</p>\n\n<p>Those are pretty fuzzy goals but I&rsquo;m alright with that.</p>\n<div class=\"footnotes\">\n<hr/>\n<ol>\n<li id=\"fn:1\">\n<p>I&rsquo;m not really sure why I bother doing this. I&rsquo;d write these posts without this incentive and I think my lifetime earnings are maybe in the double digits.<a href=\"#fnref:1\" rev=\"footnote\">&#8617;</a></p></li>\n</ol>\n</div>\n\n",
      "author" : {
        "name" : "Jake McCrary"
      }
    },
    
    {
      "id": "https://jakemccrary.com/blog/2019/10/12/building-an-atreus-keyboard",
      "url": "https://jakemccrary.com/blog/2019/10/12/building-an-atreus-keyboard/",
      "date_published": "2019-10-12T15:43:00-05:00",
      "title": "Building an Atreus keyboard",
      "summary": "I built an Atreus keyboard. Here are some details on the build.",
      "content_html": "<p>I recently built an <a href=\"https://atreus.technomancy.us\">Atreus keyboard</a>.\nThis keyboard is an extremely small keyboard with only 42 keys.\nBelow is the photo of my result.</p>\n\n<p><img src=\"https://jakemccrary.com/images/atreus/atreus-done.jpg\" alt=\"My completed Atreus keyboard\" /></p>\n\n<p>As you can see, it has a split layout and the keys are aligned vertically and staggered.\nThanks to using Ergodox keyboards since 2014, I&rsquo;m very used to this key layout and find it superior to traditional keyboards.</p>\n\n<p>The keyboard is very small.\nTo give you an idea of how small it is, here is a photo of it next to one of my Ergodox keyboards and with a bit of my fingers in the shot.</p>\n\n<p><img src=\"https://jakemccrary.com/images/atreus/atreus-with-ergodox.jpg\" alt=\"Atreus size comparison\" /></p>\n\n<p>Building the keyboard was pretty straight forward.\nThe included instructions are thorough and include plenty of photos.\nAll of the components are through-hole so the soldering is not difficult.\nThis would be a good first keyboard project.</p>\n\n<p>I already had USB cable, key switches, key caps, and a micro-controller so I purchased the partial kit from Phil.\nIt came with everything else, except for something to coat the wood, that you need to build the keyboard.\nI wanted to connect the keyboard to USB C ports, so I used a <a href=\"https://amzn.to/2IJqItO\">micro to USB C cable</a>.</p>\n\n<p>I enjoyed the color of the laser cut wood and appreciated the burn marks.\nI didn&rsquo;t want to lose the color or burns so I coated the wood with a water based clear polyurethane with a satin finish.\nThis was probably the most difficult part of the build, and it was pretty easy, simply because I lack experience finishing wood.</p>\n\n<p>When reading other build logs I noticed that someone else put a zip tie on their USB cable to help prevent it from tugging on the micro-controller.\nI have no idea how helpful this is but it seemed like a good thing to do so I also did it.\nTo do this you basically just wrap the cable with a zip tie and cram it against the case so that the zip tie prevents tugging on the micro-controller.\nYou can see it in the picture below.</p>\n\n<p><img src=\"https://jakemccrary.com/images/atreus/atreus-inside-zip-tie.jpg\" alt=\"My completed Atreus keyboard\" /></p>\n\n<p>I&rsquo;ve only been typing on the keyboard for basically this blog post but I&rsquo;ve already found myself adapting to it pretty quickly.\nI don&rsquo;t intend for it to replace my Ergodox for normal usage but I think it will be a great portable keyboard.</p>\n\n<p>Overall it was a fun project and I&rsquo;m glad I did it.\nI look forward to customizing the firmware to make the key layout fit my usage.</p>\n",
      "author" : {
        "name" : "Jake McCrary"
      },
      "image": "https://jakemccrary.com/images/atreus/atreus-done.jpg"
      
    },
    
    {
      "id": "https://jakemccrary.com/blog/2019/08/23/building-a-onewheel-stand",
      "url": "https://jakemccrary.com/blog/2019/08/23/building-a-onewheel-stand/",
      "date_published": "2019-08-23T20:34:00-05:00",
      "title": "Building a Onewheel stand",
      "summary": "I've owned a Onewheel XR for a year. Here is how I built my own stand.",
      "content_html": "<p>I&rsquo;ve owned a <a href=\"https://onewheel.com/products/xr\">Onewheel XR</a> for about a year now. It is a one-wheeled electric skateboard-like device that is super fun for zipping around Chicago.</p>\n\n<p>When I first got it, I purchased a <a href=\"https://amzn.to/31Z39Ez\">small guitar stand</a>. It worked but it was always a bit finicky and I was never satisfied with it. I had to sit the Onewheel on it just right to have it stay on it without causing the legs of the stand to spread too wide.</p>\n\n<p>This resulted in me buying a <a href=\"https://amzn.to/2NrrGOI\">second guitar stand</a> and trying that out. This one was even worse.</p>\n\n<p>I grew frustrated with these non-purpose built stands and started looking into purchasing a Onewheel stand. There are plenty of beautiful stands out there, both officially from <a href=\"https://onewheel.com/collections/onewheel-xr-accessories/products/onewheel-deep-shack-rack\">Future Motion</a> and from third party vendors like <a href=\"https://float-supply.com/product-category/stands/\">The Float Life</a>.</p>\n\n<p>Then I remembered that my old coworker, Tom Marsh, built his own and put the <a href=\"https://www.thingiverse.com/thing:3682716\">plans online</a>. This inspired me to go the DIY route.</p>\n\n<p>I thought that a stand made out of pipe would look pretty good and be easy to construct. It also gave me a good excuse to ride my Onewheel to Home Depot.</p>\n\n<p>I explored the plumbing section of Home Depot and bought a variety of pipe and pipe fittings and took them back home to experiment with putting them together.</p>\n\n<p>I ended up building the stand below.</p>\n\n<p><img src=\"https://jakemccrary.com/images/onewheel-pipe-stand.jpg\" title=\"Onewheel pipe stand\" alt=\"onewheel pipe stand\" /></p>\n\n<p><img src=\"https://jakemccrary.com/images/onewheel-in-pipe-stand.png\" title=\"Onewheel in pipe stand\" alt=\"onewheel in pipe stand\" /></p>\n\n<p>I think the above stand looks great and it was easy to build.</p>\n\n<p>Here is the part list:</p>\n\n<ul>\n<li>2 &frac12; inch x 8 inch nipple</li>\n<li>1 &frac12; inch x 6 inch nipple</li>\n<li>2 &frac12; inch x 3 inch nipple</li>\n<li>2 &frac12; inch 90 degree elbow</li>\n<li>2 &frac12; inch 3-way side outlet</li>\n<li>2 &frac12; inch cap</li>\n</ul>\n\n\n<p>I washed off the black coating using Goo Gone and then assembled the stand. This ups the risk of rust but I think that might actually look cool so I&rsquo;m not too worried about it. You could optionally coat the pipes for some protection.</p>\n\n<p>Once you have the parts the assembly is very straight forward. The only additional work I might do is to put some rubber feet on the bottom to prevent scratches to my floor.</p>\n",
      "author" : {
        "name" : "Jake McCrary"
      },
      "image": "https://jakemccrary.com/images/onewheel-in-pipe-stand.png"
      
    },
    
    {
      "id": "https://jakemccrary.com/blog/2019/08/15/switching-my-ergodox-to-qmk-firmware",
      "url": "https://jakemccrary.com/blog/2019/08/15/switching-my-ergodox-to-qmk-firmware/",
      "date_published": "2019-08-15T19:07:00-05:00",
      "title": "Switching my Ergodox to QMK firmware",
      "summary": "Here are some steps I followed for flashing my hand-built Ergodox to the QMK firmware.",
      "content_html": "<p>Last fall I started to work in an office again. I&rsquo;ve used a hand-built Ergodox for years now and really prefer working on it. This meant I needed another ergodox for the office. Luckily, now you don&rsquo;t have to build your own. I bought an <a href=\"https://ergodox-ez.com\">Ergodox EZ</a><sup id=\"fnref:1\"><a href=\"#fn:1\" rel=\"footnote\">1</a></sup>.</p>\n\n<p>The Ergodox EZ uses the <a href=\"https://github.com/qmk/qmk_firmware\">QMK</a> firmware. This has a lot of fancier options than the firmware I had been using on my hand-built ergodox.</p>\n\n<p>This mostly didn&rsquo;t matter and I just configured the Ergodox EZ to match my original Ergodox&rsquo;s layout. Then I started a new job and found myself programming in Scala using IntelliJ IDEA.</p>\n\n<p>Shockingly, after not using IntelliJ for years, I still remembered many of the keyboard shortcuts. This was great! Unfortunately, in my years since last using IntelliJ, I created some conflicting keyboard shortcuts for managing my window layout. These were mostly shortcuts that involved holding Command + Alt and pushing an arrow key. Luckily, the QMK firmware supports a <em>Meh</em> key.</p>\n\n<p>What is the <em>Meh</em> key? It is a key that presses Control + Alt + Shift all at the same time.</p>\n\n<p>This is great for setting up shortcuts that don&rsquo;t conflict with ones found in most normal programs. This let me <a href=\"https://github.com/jakemcc/cljs-phoenix/commit/fa2186589d99a4763c7bf79e1f795cb910063a4e\">change my window manger</a> shortcuts to use the <em>Meh</em> key and I was then conflict free.</p>\n\n<p>I can&rsquo;t handle having different shortcuts across different machines with the same OS, so I needed to needed to update my original Ergodox to use the QMK firmware so I could also have a <em>Meh</em> key at home. Luckily, the QMK firmware also works on it and, maybe even more luckily, the Ergodox EZ firmware just works with my original Ergodox.</p>\n\n<p>This actually means I can simply take the compiled Ergodox EZ firmware and flash it straight to my Ergodox. Any time I&rsquo;ve done this the keyboard keeps working.</p>\n\n<p>Unfortunately, the LEDs in my original Ergodox are mostly hidden by non-translucent keys. These LEDs indicate when I&rsquo;m not main layer and I find them really useful. I only have a single translucent keycap and would prefer only that LED to be used.</p>\n\n<p>Here are the steps I took to make that change.</p>\n\n<ol>\n<li>Use the <a href=\"https://config.qmk.fm/#/ergodox_ez/LAYOUT_ergodox\">graphical QMK Configurator</a> to visually configure my keyboard layout. In the <strong>Keymap Name</strong> field, put <code>jakemcc</code>.</li>\n<li>Click the <strong>Compile</strong> button in the above configurator.</li>\n<li>Download the full source.</li>\n<li>Unzip the source and edit <code>qmk_firmware/keyboards/ergodox_ez/keymaps/jakemcc/keymap.c</code> to include snippet of code below this list.</li>\n<li>In <code>qmk_firmware</code> run <code>make ergodox_ez:jakemcc</code>.</li>\n<li>Find <code>ergodox_ez_jakemcc.hex</code> and flash my original Ergodox.</li>\n</ol>\n\n\n<div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span></span></figcaption><div class=\"highlight\"><table><tr><td class=\"gutter\"><pre class=\"line-numbers\"><span class='line-number'>1</span>\n<span class='line-number'>2</span>\n<span class='line-number'>3</span>\n<span class='line-number'>4</span>\n<span class='line-number'>5</span>\n<span class='line-number'>6</span>\n<span class='line-number'>7</span>\n<span class='line-number'>8</span>\n</pre></td><td class='code'><pre><code class='c'><span class='line'><span class=\"kt\">uint32_t</span> <span class=\"nf\">layer_state_set_user</span><span class=\"p\">(</span><span class=\"kt\">uint32_t</span> <span class=\"n\">state</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n</span><span class='line'>  <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">biton32</span><span class=\"p\">(</span><span class=\"n\">state</span><span class=\"p\">)</span> <span class=\"o\">==</span> <span class=\"mi\">0</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n</span><span class='line'>    <span class=\"n\">ergodox_right_led_1_off</span><span class=\"p\">();</span>\n</span><span class='line'>  <span class=\"p\">}</span> <span class=\"k\">else</span> <span class=\"p\">{</span>\n</span><span class='line'>    <span class=\"n\">ergodox_right_led_1_on</span><span class=\"p\">();</span>\n</span><span class='line'>  <span class=\"p\">}</span>\n</span><span class='line'>  <span class=\"k\">return</span> <span class=\"n\">state</span><span class=\"p\">;</span>\n</span><span class='line'><span class=\"p\">}</span>\n</span></code></pre></td></tr></table></div></figure></notextile></div>\n\n\n<p>This snippet gets added to the bottom of the <code>keymap.c</code>. It only turns on led 1, which is the one under my translucent key, whenever my keyboard isn&rsquo;t on layer 0.</p>\n\n<p>Now, I can use the fancy <em>Meh</em> key to be conflict free and easily tell when I&rsquo;m not on my main layer. This is wonderful.</p>\n<div class=\"footnotes\">\n<hr/>\n<ol>\n<li id=\"fn:1\">\n<p>I bought one with Cherry MX Clear switches. I&rsquo;ve since switched them to Cherry MX Browns. The clears were too firm for me. I did not get Cherry MX Blues because I didn&rsquo;t want my fellow coworkers to be annoyed by the glorious clickty-clack of those switches.<a href=\"#fnref:1\" rev=\"footnote\">&#8617;</a></p></li>\n</ol>\n</div>\n\n",
      "author" : {
        "name" : "Jake McCrary"
      }
    },
    
    {
      "id": "https://jakemccrary.com/blog/2019/04/30/how-i-use-social-media",
      "url": "https://jakemccrary.com/blog/2019/04/30/how-i-use-social-media/",
      "date_published": "2019-04-30T17:50:00-05:00",
      "title": "How I use social media",
      "summary": "I selectively use social media. Here is how I use it.",
      "content_html": "<p>Over the years, I&rsquo;ve read many articles about the negative aspects of social media. You&rsquo;ve probably read articles extolling the benefits of cutting social media out of your life. These articles are abundant and easy to find through a search for <a href=\"https://www.google.com/search?q=stop+social+media\">&ldquo;stop social media&rdquo;</a> or <a href=\"https://www.google.com/search?q=quit+social+media\">&ldquo;quit social media&rdquo;</a>.</p>\n\n<p>Social media hasn&rsquo;t played a significant role in my life for a couple of years. I first started being more mindful of how I consumed social media in 2013. Back then, I temporarily switched to using a <a href=\"https://en.wikipedia.org/wiki/Feature_phone\">feature phone</a> (a non-smart phone) for a month and a half. This really reset my relationship with consuming media on a phone. Since my phone was my primary entry point into Twitter and Facebook, my usage of both plummeted.</p>\n\n<p>Since then, I&rsquo;ve continued to take a careful look at how I use social media and have made tweaks to get maximum enjoyment with minimal downsides. This has involved changing how I use the desktop web applications for both Twitter and Facebook<sup id=\"fnref:1\"><a href=\"#fn:1\" rel=\"footnote\">1</a></sup>.</p>\n\n<p>The following books have helped shape my thinking towards digital distractions. They&rsquo;ve put into words some of the practices I stumbled into. They&rsquo;ve affected how I use smart phones and how I approach social media.</p>\n\n<ul>\n<li><a href=\"https://amzn.to/2UJu1V7\">Deep Work</a> by Cal Newport</li>\n<li><a href=\"https://amzn.to/2WfLYMv\">Digital Minimalism</a> by Cal Newport</li>\n<li><a href=\"https://amzn.to/2XX6imC\">Essentialism</a> by Greg Mckeown</li>\n<li><a href=\"https://amzn.to/2WgdBVR\">The Distracted Mind</a> by Adam Gazzaley &amp; Larry D. Rosen</li>\n</ul>\n\n\n<p>One of the ideas in both <em>Digital Minimalism</em> and <em>Essentialism</em> is that you can pick and choose what you add to your life. This extends to individual features of products you use. This is something I arrived at prior to reading these books and it was nice hearing others putting this idea into words.</p>\n\n<p>Below is how I&rsquo;ve chosen to use various social media platforms.</p>\n\n<h2>Twitter</h2>\n\n<p>I only consume Twitter on my computer and I read it through <a href=\"https://tweetdeck.twitter.com/\">Tweetdeck</a>.</p>\n\n<p>I don&rsquo;t check my entire feed. Instead, I have Tweetdeck setup to display a few curated lists of accounts along with mentions and direct messages. One list is composed of close friends, another highlights some people in the software development space, and another contains some Twitter art projects.</p>\n\n<p>Because I focus on a limited number of accounts, I don&rsquo;t have an infinite list to scroll through. This focus keeps Twitter useful to me and allows me to check it every few days and still stay up to date on topics I care about.</p>\n\n<p>I rarely tweet but when I do it is usually to promote my own or another person&rsquo;s writing. I also occasionally tweet as an <a href=\"https://twitter.com/ErowidBobRoss\">art bot</a>.</p>\n\n<h2>Facebook</h2>\n\n<p>I only consume Facebook on my computer and mostly stopped using the website in 2016. The 2016 US presidential election made me realize I didn&rsquo;t find the Facebook news feed useful. It did not add positive value to my life.</p>\n\n<p>That is when I found the <a href=\"https://chrome.google.com/webstore/detail/news-feed-eradicator-for/fjcldmjmjhkklehbacihaiopjklihlgg?hl=en\">News Feed Eradicator</a> Chrome extension. This extension gets rid of the news feed. It is great.</p>\n\n<p>Without the news feed, I no longer open the site and mindlessly scroll through the firehose of updates. I no longer know what is going on in the curated lives of my friends that still use Facebook. That is ok. Now when I run into them in real life, I can catch up and learn about their kids and their lives. I can have an honest reaction to learning that someone got married instead of sort of already knowing it. Someone can tell me about a trip they took and can show me photos I&rsquo;ve never seen before.</p>\n\n<p>I haven&rsquo;t completely deleted my Facebook account because it does add value to my life through a couple of groups and Facebook messenger. Only using these features has reduced the frequency I visit Facebook to once every few days. That is more than enough to keep up with what is going in in the Chicago climbing community and events going on at local climbing gyms.</p>\n\n<p>I rarely post to Facebook but when I do it is often to promote something I&rsquo;ve written.</p>\n\n<h2>Goodreads</h2>\n\n<p>I&rsquo;m not really sure if Goodreads counts as a social media site. I use it to keep track books I want to read and books I&rsquo;ve already read. It isn&rsquo;t something that consumes any amount of my time mindlessly.</p>\n\n<h2>LinkedIn</h2>\n\n<p>I&rsquo;m not sure if you can consider my usage of LinkedIn to be actual usage. It mostly results in email in my inbox that almost immediately gets archived. It does keep me somewhat informed about what job opportunities are out there though recruiter outreach.</p>\n\n<p>I very rarely post anything to LinkedIn.</p>\n\n<h2>Instagram</h2>\n\n<p>I&rsquo;ll completely admit that this is the social media platform that I waste time on. It is the only social media app on my phone and that increases how frequently I use it.</p>\n\n<p>I signed up for Instagram in order to follow tattoo artists. This helped me learn what tattoo styles I enjoyed the most. This was a huge success and now I have a much better appreciation and eye for this art.</p>\n\n<p>Eventually, my usage of Instagram expanded to follow some friends, local Chicago artists, and professional rock climbers. Following each of these groups is slightly beneficial but I&rsquo;m not sure if it is an overall positive impact compared to the temptation to fill downtime with Instagram scrolling.</p>\n\n<p>I&rsquo;m approaching the point of deleting Instagram from my phone and experiencing that.</p>\n\n<p>I post occasionally to Instagram both using the story feature and normal posts. These are usually photos of some street art or stickers put up in Chicago. It is very infrequent.</p>\n\n<h1>End</h1>\n\n<p>So that is how I consume social media. It mostly happens on my computer and I use a subset of features a platform offers. I&rsquo;ve reached a point where I feel like I&rsquo;m getting a lot of the pros without too many of the cons.</p>\n\n<p>It is an area in which I&rsquo;ll keep experimenting. I&rsquo;d encourage you to as well. Try a different usage pattern for an extended period of time and then reflect on your changed behavior. Keep the changes that have made a positive impact.</p>\n<div class=\"footnotes\">\n<hr/>\n<ol>\n<li id=\"fn:1\">\n<p>Ignoring LinkedIn and Goodreads, I think Facebook and Twitter were the only social media platforms I used back then.<a href=\"#fnref:1\" rev=\"footnote\">&#8617;</a></p></li>\n</ol>\n</div>\n\n",
      "author" : {
        "name" : "Jake McCrary"
      }
    },
    
    {
      "id": "https://jakemccrary.com/blog/2019/03/20/breaking-change-and-more-in-lein-test-refresh-0-dot-24-dot-0",
      "url": "https://jakemccrary.com/blog/2019/03/20/breaking-change-and-more-in-lein-test-refresh-0-dot-24-dot-0/",
      "date_published": "2019-03-20T21:30:00-05:00",
      "title": "Breaking change and more in lein-test-refresh 0.24.1",
      "summary": "A bunch of new features arrived in version 0.24.1 of lein-test-refresh",
      "content_html": "<p>Today I released <a href=\"https://github.com/jakemcc/lein-test-refresh\">lein-test-refresh</a> <code>0.24.1</code><sup id=\"fnref:1\"><a href=\"#fn:1\" rel=\"footnote\">1</a></sup>. I don&rsquo;t always announce new lein-test-refresh versions with an article but this release breaks some existing behavior so I thought it was worth it.</p>\n\n<p>Each of these changes is the direct result of interacting with four different <code>lein-test-refresh</code> users. Some of this took place on GitHub and others through email. Thanks to all of you for taking the time to think about improvements and notice oddities and bring them to my attention.</p>\n\n<h3>Breaking change: Monitoring keystrokes to perform actions</h3>\n\n<p>Prior to this release, if you hit Ctrl-D then STDIN reads an EOF and <code>test-refresh</code> would quit. With version 0.24.1, <code>test-refresh</code> no longer does that. Instead, it stops monitoring for input and just keeps running tests. Since it stops monitoring for input it no longer notices when you hit Enter to cause your tests to rerun. You can still stop <code>lein test-refresh</code> by sending a SIGINT with Ctrl-C.</p>\n\n<p>This change was made because there is some combination of environments where if <code>test-refresh</code> execs <code>/bin/bash</code> then it receives an EOF on STDIN. Before this change, that means <code>test-refresh</code> would quit unexpectedly. Now it will keep going.</p>\n\n<p>Thanks <a href=\"https://github.com/cloojure\">Alan Thompson</a> for bringing this to my attention and taking the time to help diagnose the problem.</p>\n\n<h3>You can supply your own narrowing test selector</h3>\n\n<p>Being able to tell <code>test-refresh</code> to narrow its focus by adding <code>:test-refresh/focus</code> as metadata on a test or namespace has quickly become a favorite feature of many users. Now you can configure a shorter keyword by specifying configuration in your profile. See the <a href=\"https://github.com/jakemcc/lein-test-refresh/blob/1b5165660d9e40d9394809a95b148ec758a6d56b/sample.project.clj#L61-L65\">sample project.clj</a> for how to set this up.</p>\n\n<p>Thanks <a href=\"https://github.com/metametadata\">Yuri Govorushchenko</a> for the suggestion.</p>\n\n<h3>Experimental: Run in a repl</h3>\n\n<p>I&rsquo;ve turned down this feature in the past but a narrower request came up and I thought it seemed useful. <code>test-refresh</code> now exposes a function you can call in a repl to run <code>test-refresh</code> in that repl. This makes the repl useless for any other task. To do this, first add <code>lein-test-refresh</code> as a dependency instead of a plugin to your project.clj. Then, require the namespace and call the function passing in one or more paths to your test directories. Example below.</p>\n\n<div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span></span></figcaption><div class=\"highlight\"><table><tr><td class=\"gutter\"><pre class=\"line-numbers\"><span class='line-number'>1</span>\n<span class='line-number'>2</span>\n<span class='line-number'>3</span>\n<span class='line-number'>4</span>\n<span class='line-number'>5</span>\n</pre></td><td class='code'><pre><code class='clojure'><span class='line'><span class=\"nv\">user=&gt;</span> <span class=\"p\">(</span><span class=\"nf\">require</span> <span class=\"ss\">&#39;com.jakemccrary.test-refresh</span><span class=\"p\">)</span>\n</span><span class='line'><span class=\"nv\">nil</span>\n</span><span class='line'><span class=\"nv\">user=&gt;</span> <span class=\"p\">(</span><span class=\"nf\">com.jakemccrary.test-refresh/run-in-repl</span> <span class=\"s\">&quot;test&quot;</span><span class=\"p\">)</span>\n</span><span class='line'><span class=\"nv\">*********************************************</span>\n</span><span class='line'><span class=\"nv\">***************</span> <span class=\"nv\">Running</span> <span class=\"nv\">tests</span> <span class=\"nv\">***************</span>\n</span></code></pre></td></tr></table></div></figure></notextile></div>\n\n\n<p><a href=\"https://github.com/jakemcc/lein-test-refresh/issues/80\">This request</a> was done so that you can run it in Cursive&rsquo;s repl and gain the ability to click on stacktraces. Thanks <a href=\"https://github.com/klauswuestefeld\">Klaus Wuestefeld</a> for bringing this up again with a really solid and focused use case.</p>\n\n<h3>Better output on exceptions while reloading</h3>\n\n<p>This was a <a href=\"https://github.com/jakemcc/lein-test-refresh/pull/81\">pull request</a> from <a href=\"https://github.com/minhtuannguyen\">Minh Tuan Nguyen</a>. Now figuring out where to look for the error will be a little easier.</p>\n\n<h2>Thank you</h2>\n\n<p>Thanks to all the users of lein-test-refresh. I&rsquo;ve found it to be very valuable to the way I work and I&rsquo;m very happy that others do as well.</p>\n<div class=\"footnotes\">\n<hr/>\n<ol>\n<li id=\"fn:1\">\n<p>This was originally 0.24.0 but that had a bug in it. Sorry about that.<a href=\"#fnref:1\" rev=\"footnote\">&#8617;</a></p></li>\n</ol>\n</div>\n\n",
      "author" : {
        "name" : "Jake McCrary"
      }
    },
    
    {
      "id": "https://jakemccrary.com/blog/2019/02/13/testing-asynchronous-javascript-with-jasmine",
      "url": "https://jakemccrary.com/blog/2019/02/13/testing-asynchronous-javascript-with-jasmine/",
      "date_published": "2019-02-13T17:46:00-06:00",
      "title": "Testing asynchronous JavaScript with Jasmine",
      "summary": "I recently struggled to get some asynchronous JavaScript code under test. Here is my solution.",
      "content_html": "<p>I was recently adding a feature to an internal web UI that caught all unhandled JavaScript errors and reported them to the backend service. The implementation went smoothly with most of the effort spent figuring out how to test the code that was reporting the errors.</p>\n\n<p>If the error reporting failed, I didn&rsquo;t want to trigger reporting another error or completely lose that error. I decided to log a reporting error to the console. I wanted to write a test showing that errors reporting errors were handled so that a future me, or another developer, didn&rsquo;t accidentally remove this special error handling and enable a never ending cycle of of reporting failed reporting attempts.</p>\n\n<p>It took me a while to figure out how to do this. I searched the web and found various articles about using <a href=\"https://jasmine.github.io/\">Jasmine</a> to do async tests. They were helpful but I also wanted to mock out a function, <code>console.error</code>, and assert that it was called. None of the examples I found were explicit about doing something like this. I forget how many different approaches I tried, but it took a while to figure out the below solution.</p>\n\n<p>Here is the code I wanted to test.</p>\n\n<div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span></span></figcaption><div class=\"highlight\"><table><tr><td class=\"gutter\"><pre class=\"line-numbers\"><span class='line-number'>1</span>\n<span class='line-number'>2</span>\n<span class='line-number'>3</span>\n<span class='line-number'>4</span>\n<span class='line-number'>5</span>\n<span class='line-number'>6</span>\n<span class='line-number'>7</span>\n</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class=\"kd\">function</span> <span class=\"nx\">reportEvent</span><span class=\"p\">(</span><span class=\"nx\">event</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n</span><span class='line'>  <span class=\"k\">return</span> <span class=\"nx\">fetch</span><span class=\"p\">(</span><span class=\"s1\">&#39;/report-event&#39;</span><span class=\"p\">,</span> <span class=\"p\">{</span>\n</span><span class='line'>    <span class=\"nx\">method</span><span class=\"o\">:</span> <span class=\"s1\">&#39;POST&#39;</span><span class=\"p\">,</span>\n</span><span class='line'>    <span class=\"nx\">headers</span><span class=\"o\">:</span> <span class=\"p\">{</span><span class=\"s1\">&#39;Content-Type&#39;</span><span class=\"o\">:</span> <span class=\"s1\">&#39;application/json&#39;</span><span class=\"p\">},</span>\n</span><span class='line'>    <span class=\"nx\">body</span><span class=\"o\">:</span> <span class=\"nx\">JSON</span><span class=\"p\">.</span><span class=\"nx\">stringify</span><span class=\"p\">({</span><span class=\"nx\">name</span><span class=\"o\">:</span> <span class=\"s1\">&#39;ui name&#39;</span><span class=\"p\">,</span> <span class=\"p\">...</span><span class=\"nx\">event</span><span class=\"p\">})</span>\n</span><span class='line'>  <span class=\"p\">}).</span><span class=\"k\">catch</span><span class=\"p\">(</span><span class=\"kd\">function</span><span class=\"p\">(</span><span class=\"nx\">e</span><span class=\"p\">)</span> <span class=\"p\">{</span> <span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">error</span><span class=\"p\">(</span><span class=\"s1\">&#39;Problem reporting event:&#39;</span><span class=\"p\">,</span> <span class=\"nx\">e</span><span class=\"p\">)});</span>\n</span><span class='line'><span class=\"p\">}</span>\n</span></code></pre></td></tr></table></div></figure></notextile></div>\n\n\n<p>It takes an incoming <code>event</code> object and merges it with a default value and posts that to the backing service. <code>fetch</code> returns a Promise and the code handles errors by calling <code>catch</code> on it and logging.</p>\n\n<p>Below is what I eventually came up with for testing the error handling feature of <code>reportEvent</code>.</p>\n\n<div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span></span></figcaption><div class=\"highlight\"><table><tr><td class=\"gutter\"><pre class=\"line-numbers\"><span class='line-number'>1</span>\n<span class='line-number'>2</span>\n<span class='line-number'>3</span>\n<span class='line-number'>4</span>\n<span class='line-number'>5</span>\n<span class='line-number'>6</span>\n<span class='line-number'>7</span>\n<span class='line-number'>8</span>\n<span class='line-number'>9</span>\n<span class='line-number'>10</span>\n</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class=\"nx\">describe</span><span class=\"p\">(</span><span class=\"s1\">&#39;reporting events&#39;</span><span class=\"p\">,</span> <span class=\"kd\">function</span><span class=\"p\">()</span> <span class=\"p\">{</span>\n</span><span class='line'>  <span class=\"nx\">it</span><span class=\"p\">(</span><span class=\"s1\">&#39;logs errors&#39;</span><span class=\"p\">,</span> <span class=\"p\">(</span><span class=\"nx\">done</span><span class=\"p\">)</span> <span class=\"o\">=&gt;</span> <span class=\"p\">{</span>\n</span><span class='line'>    <span class=\"nx\">spyOn</span><span class=\"p\">(</span><span class=\"nx\">console</span><span class=\"p\">,</span> <span class=\"s1\">&#39;error&#39;</span><span class=\"p\">).</span><span class=\"nx\">and</span><span class=\"p\">.</span><span class=\"nx\">callFake</span><span class=\"p\">(()</span> <span class=\"o\">=&gt;</span> <span class=\"p\">{</span>\n</span><span class='line'>      <span class=\"nx\">expect</span><span class=\"p\">(</span><span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">error</span><span class=\"p\">).</span><span class=\"nx\">toHaveBeenCalled</span><span class=\"p\">();</span>\n</span><span class='line'>      <span class=\"nx\">done</span><span class=\"p\">();</span>\n</span><span class='line'>    <span class=\"p\">});</span>\n</span><span class='line'>    <span class=\"nx\">spyOn</span><span class=\"p\">(</span><span class=\"nb\">window</span><span class=\"p\">,</span> <span class=\"s1\">&#39;fetch&#39;</span><span class=\"p\">).</span><span class=\"nx\">and</span><span class=\"p\">.</span><span class=\"nx\">returnValue</span><span class=\"p\">(</span><span class=\"nx\">Promise</span><span class=\"p\">.</span><span class=\"nx\">reject</span><span class=\"p\">(</span><span class=\"s1\">&#39;error!&#39;</span><span class=\"p\">));</span>\n</span><span class='line'>    <span class=\"nx\">reportEvent</span><span class=\"p\">({</span><span class=\"nx\">level</span><span class=\"o\">:</span> <span class=\"s1\">&#39;WARN&#39;</span><span class=\"p\">,</span> <span class=\"nx\">msg</span><span class=\"o\">:</span> <span class=\"s1\">&#39;ERROR!&#39;</span><span class=\"p\">});</span>\n</span><span class='line'>  <span class=\"p\">});</span>\n</span><span class='line'><span class=\"p\">});</span>\n</span></code></pre></td></tr></table></div></figure></notextile></div>\n\n\n<p>This uses <code>spyOn</code> to mock out <code>fetch</code> and <code>console.error</code>. The <code>fetch</code> call is told to return a rejected Promise. The <code>console.error</code> spy is a bit more interesting.</p>\n\n<p>The <code>console.error</code> spy is told to call a fake function. That function asserts that the <code>console.error</code> spy has been called. More importantly, it also calls a <code>done</code> function. That <code>done</code> function is a callback passed to your test by Jasmine. Calling <code>done</code> signals that your async work is completed.</p>\n\n<p>If <code>done</code> is never called then Jasmine will fail the test after some amount of time. By calling <code>done</code> in our <code>console.error</code> fake, we&rsquo;re able to signal to Jasmine that we&rsquo;ve handled the rejected promise.</p>\n\n<p>You don&rsquo;t actually need the <code>expect(console.error).toHaveBeenCalled();</code> as <code>done</code> won&rsquo;t be called unless <code>console.error</code> has been called. If you don&rsquo;t have it though then Jasmine will complain there are no assertions in the test.</p>\n\n<p>So there we have it, an example of using some of Jasmine&rsquo;s asynchronous test features with spies. I wish I had found an article like this when I started this task. Hopefully it saves you, and future me, some time.</p>\n",
      "author" : {
        "name" : "Jake McCrary"
      }
    }
    
  ]
}
