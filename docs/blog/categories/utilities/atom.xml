<?xml version="1.0" encoding="UTF-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title><![CDATA[Jake McCrary's articles on utilities]]></title>
  <link href="https://jakemccrary.com/atom.xml" rel="self"/>
  <link href="https://jakemccrary.com/"/>
  <updated>2025-02-03T01:07:56+00:00</updated>
  <id>https://jakemccrary.com/</id>
  <author>
    <name><![CDATA[Jake McCrary]]></name>
  </author>
  <entry>
    <id>https://jakemccrary.com/blog/2020/08/31/utilities-i-like-selecta/index.html</id>
    <link href="https://jakemccrary.com/blog/2020/08/31/utilities-i-like-selecta/index.html"/>
    <title><![CDATA[Utilities I like: selecta]]></title>
    <updated>2020-08-31T23:59:59+00:00</updated>
    <content type="html"><![CDATA[<p><a href='https://github.com/garybernhardt/selecta'>Selecta</a> is a command-line utility that gives you the power to fuzzy select items from a list of text. What does that mean? It means you pipe <code>selecta</code> a list of text on stdin, it helps you make a choice from items in that list, and then <code>selecta</code> prints that choice to stdout.</p><p>Here is an example of me using it to help me narrow in on what file I'd like to pass to <code>wc</code>.</p><p><video autoplay loop muted playsinline>   <source src="/images/selecta-search.webm" type="video/webm">   <source src="/images/selecta-search.mp4" type="video/mp4"> </video></p><p>In this example, I search for markdown files using <code>ripgrep</code> (<code>rg</code>), type part of a filename, hit enter to select the match, and then see the <code>wc</code> stats of that file. This isn't the greatest example of using <code>selecta</code> but it adequately shows what it does.</p><p>Some number of years ago, I wrote a script called <code>connect-db</code>. This script used <code>selecta</code>, along with <code>grep</code>, <code>sed</code>, and <code>cut</code>, to provide a very pleasant command-line experience for connecting to known databases. My coworkers and I used this script frequently.</p><p>By combining <code>selecta</code> with other stdin/stdout friendly command-line tools you can build really enjoyable, time-saving tools. <a href='https://github.com/garybernhardt/selecta'>Selecta</a> is a useful utility to add to your toolkit.</p>]]></content>
  </entry>
  <entry>
    <id>https://jakemccrary.com/blog/2020/02/25/auto-syncing-a-git-repository/index.html</id>
    <link href="https://jakemccrary.com/blog/2020/02/25/auto-syncing-a-git-repository/index.html"/>
    <title><![CDATA[Auto-syncing a git repository]]></title>
    <updated>2020-02-25T23:59:59+00:00</updated>
    <content type="html"><![CDATA[<p>I'm currently keep notes on my computer using plain text and <a href='https://orgmode.org/'>Org mode</a>.</p><p>I keep my notes in a git repository in my home directory, <code>&#126;/org/</code>. I want my notes to be synced between my computers without me thinking about it. Historically, I've reached for something like Google Drive or Dropbox to do this but this time I reached for git and GitHub.</p><p>Below is the script that I ended up cobbling together from various sources found online. The script pushes and pulls changes from a remote repository and works on my macOS and linux machines.</p><p>The loop starting on line 38 does the work. Whenever a file-watcher notices a change or 10 minutes passes, the loop pulls changes from a remote repository, commits any local changes, and pushes to the remote repository. The lines before this are mostly checking that needed programs exist on the host.</p><p>I keep this running in a background terminal and I check periodically to confirm it is still running. I could do something fancier but this isn't a critical system and the overhead of checking every couple days is nearly zero. Most of the time checking happens by accident when I accidentally maximize the terminal that runs the script.</p><p>I've been using this script for a long time now and I've found it quite useful. I hope you do too.</p><pre><code class="language-bash">#!/bin/bash

set -e

TARGETDIR=&quot;$HOME/org/&quot;

stderr &#40;&#41; {
    echo &quot;$1&quot; &gt;&amp;2
}

is&#95;command&#40;&#41; {
    command -v &quot;$1&quot; &amp;&gt;/dev/null
}

if &#91; &quot;$&#40;uname&#41;&quot; != &quot;Darwin&quot; &#93;; then
    INW=&quot;inotifywait&quot;;
    EVENTS=&quot;close&#95;write,move,delete,create&quot;;
    INCOMMAND=&quot;\&quot;$INW\&quot; -qr -e \&quot;$EVENTS\&quot; --exclude \&quot;\.git\&quot; \&quot;$TARGETDIR\&quot;&quot;
else # if Mac, use fswatch
    INW=&quot;fswatch&quot;;
    # default events specified via a mask, see
    # https://emcrisostomo.github.io/fswatch/doc/1.14.0/fswatch.html/Invoking-fswatch.html#Numeric-Event-Flags
    # default of 414 = MovedTo + MovedFrom + Renamed + Removed + Updated + Created
    #                = 256 + 128+ 16 + 8 + 4 + 2
    EVENTS=&quot;--event=414&quot;
    INCOMMAND=&quot;\&quot;$INW\&quot; --recursive \&quot;$EVENTS\&quot; --exclude \&quot;\.git\&quot; --one-event \&quot;$TARGETDIR\&quot;&quot;
fi

for cmd in &quot;git&quot; &quot;$INW&quot; &quot;timeout&quot;; do
    # in OSX: `timeout` =&gt; brew install coreutils
    # in OSX: `fswatch` =&gt; brew install fswatch
    is&#95;command &quot;$cmd&quot; || { stderr &quot;Error: Required command '$cmd' not found&quot;; exit 1; }
done

cd &quot;$TARGETDIR&quot;
echo &quot;$INCOMMAND&quot;

while true; do
    eval &quot;timeout 600 $INCOMMAND&quot; || true
    git pull
    sleep 5
    STATUS=$&#40;git status -s&#41;
    if &#91; -n &quot;$STATUS&quot; &#93;; then
        echo &quot;$STATUS&quot;
        echo &quot;commit!&quot;
        git add .
        git commit -m &quot;autocommit&quot;
        git push origin
    fi
done
</code></pre>]]></content>
  </entry>
  <entry>
    <id>https://jakemccrary.com/blog/2017/05/29/using-comm-to-verify-matching-content/index.html</id>
    <link href="https://jakemccrary.com/blog/2017/05/29/using-comm-to-verify-matching-content/index.html"/>
    <title><![CDATA[Using comm to verify file content matches]]></title>
    <updated>2017-05-29T23:59:59+00:00</updated>
    <content type="html"><![CDATA[<p>I recently found myself in a situation where I needed to confirm that a process took in a tab separated file, did some processing, and then output a new file containing the original columns with some additional ones. The feature I was adding allowed the process to die and restart while processing the input file and pick up where it left off.</p><p>I needed to confirm the output had data for every line in the input. I reached to the command line tool <code>comm</code>.</p><p>Below is a made up input file.</p><pre><code>UNIQUE&#95;ID	USER
1	38101838
2	19183819
3	19123811
4	10348018
5	19881911
6	29182918
</code></pre><p>And here is some made up output.</p><pre><code>UNIQUE&#95;ID	USER	MESSAGE
1	38101838	A01
2	19183819	A05
3	19123811	A02
4	10348018	A01
5	19881911	A02
6	29182918	A05
</code></pre><p>With files this size, it would be easy enough to check visually. In my testing, I was dealing with files that had thousands of lines. This is too many to check by hand. It is a perfect amount for <code>comm</code>.</p><p><a href='https://en.wikipedia.org/wiki/Comm'>comm</a> reads two files as input and then outputs three columns. The first column contains lines found only in the first file, the second column contains lines only found in the second, and the last column contains lines in both. If it is easier for you to think about it as set operations, the first two columns are similar to performing two set differences and the third is similar to set intersection. Below is an example adapted from Wikipedia showing its behavior. </p><pre><code>$ cat foo.txt
apple
banana
eggplant
$ cat bar.txt
apple
banana
banana
zucchini
$ comm foo.txt bar.txt
                  apple
                  banana
          banana
eggplant
          zucchini
</code></pre><p>So how is this useful? Well, you can also tell <code>comm</code> to suppress outputting specific columns.  If we send the common columns from the input and output file to <code>comm</code> and suppress <code>comm</code>'s third column then anything printed to the screen is a problem. Anything printed to the screen was found in one of the files and not the other. We'll select the common columns using cut and, since comm expects input to be sorted, then sort using <code>sort</code>. Let's see what happens.</p><pre><code>$ comm -3 &lt;&#40;cut -f 1,2 input.txt | sort&#41; &lt;&#40;cut -f 1,2 output.txt | sort&#41;
$
</code></pre><p>Success! Nothing was printed to the console, so there is nothing unique in either file.</p><p><code>comm</code> is a useful tool to have in your command line toolbox.</p>]]></content>
  </entry>
  <entry>
    <id>https://jakemccrary.com/blog/2016/09/28/better-command-history-in-your-shell/index.html</id>
    <link href="https://jakemccrary.com/blog/2016/09/28/better-command-history-in-your-shell/index.html"/>
    <title><![CDATA[Better command history in your shell]]></title>
    <updated>2016-09-28T23:59:59+00:00</updated>
    <content type="html"><![CDATA[<p>My ideal command history would let me search the history of every shell but when I hit the up arrow it would only cycle through my current shell's history. In February, I was able to achieve this setup in large part because of a utility called <a href='https://github.com/dvorka/hstr'>hstr</a>.</p><h2>What is <code>hstr</code>?</h2><p>hstr is a neat Bash and Zsh utility that lets you easily search, view, and manage your command history. hstr provides a tool named <code>hh</code> that provides a text interface for manipulating your command history. To see what it looks like check out the <a href='https://github.com/dvorka/hstr/blob/master/README.md'>README</a> and this <a href='https://www.youtube.com/watch?v=sPF29NyXe2U'>video</a> tutorial. If you are running OS X and use Homebrew you can install it by running `brew install hh`.</p><h2>Making global history searchable but arrows cycle through local history</h2><p>hstr is a neat tool but my favorite part of my setup is how the global command history is searchable but only a shell's local history is cycled through with the arrow keys. This is achieved by manipulating where history is written and tweaking some environment variables.</p><p>The first step is to change your <code>$PROMPT&#95;COMMAND</code> to append your shell's history to a global history file. Below is the snippet that does this from my <code>.bashrc</code> file.</p><pre><code># Whenever a command is executed, write it to a global history
PROMPT&#95;COMMAND=&quot;history -a &#126;/.bash&#95;history.global; $PROMPT&#95;COMMAND&quot;
</code></pre><p>The next step is to bind a keystroke to run <code>hh</code>, which is what hstr provides, with <code>$HISTFILE</code> pointing to <code>&#126;/.bash&#95;history.global</code>. I wanted to fully replace the default command history searching (and I use Emacs style keyboard shortcuts) so I've bound these actions to ctrl-r.</p><pre><code class="language-bash"># On C-r set HISTFILE and run hh
bind -x '&quot;\C-r&quot;: &quot;HISTFILE=&#126;/.bash&#95;history.global hh&quot;'
</code></pre><p>With those two additions to my <code>.bashrc</code> I've achieved my ideal command history searching. When I hit ctrl-r I'm searching all of my history and yet I only cycle through a shell's local history with the arrow keys. This small addition<a href='#fn-1' id='fnref1'><sup>1</sup></a> made my command line productivity higher.</p><ol class='footnotes'><li id='fn-1'>My setup was inspired by <a href='https://unix.stackexchange.com/questions/200225/search-history-from-multiple-bash-session-only-when-ctrl-r-is-used-not-when-a'>this</a> StackExchange post.<a href='#fnref1'>&#8617;</a></li></ol>]]></content>
  </entry>
</feed>
