<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: linux | Jake McCrary]]></title>
  <link href="https://jakemccrary.com/blog/categories/linux/atom.xml" rel="self"/>
  <link href="https://jakemccrary.com/"/>
  <updated>2024-12-01T08:52:12-06:00</updated>
  <id>https://jakemccrary.com/</id>
  <author>
    <name><![CDATA[Jake McCrary]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Scheduling cron tasks in mixed time zones]]></title>
    <link href="https://jakemccrary.com/blog/2024/06/16/scheduling-cron-tasks-in-mixed-time-zones/"/>
    <updated>2024-06-16T13:32:00-05:00</updated>
    <id>https://jakemccrary.com/blog/2024/06/16/scheduling-cron-tasks-in-mixed-time-zones</id>
    <content type="html"><![CDATA[<p>Have you ever needed to schedule a repeating task on a Linux host?
If so, you&rsquo;ve probably reached for cron.
cron is widely available and reliable; it is a great choice for scheduling tasks.</p>

<p>Sometimes you find yourself scheduling a task and, ideally, you&rsquo;d be scheduling that task referencing a different time zone.
This is a common need if your programs are interacting with systems hosted in different areas of the world.
If one system you interact with starts up at 7 AM <code>Europe/London</code> and another at 8 AM <code>America/New_York</code>, it would be much better to schedule your program to run using times specified in those time zones.</p>

<p>Why is that preferred?</p>

<ul>
<li>If you schedule in your host time zone, you have to convert from the other time zone to your own. This is error prone.</li>
<li>Different time zones have different Daylights savings shifts. Having to adjust your schedule when your host or target time zone shifts is error prone.</li>
</ul>


<p>Luckily, you can do this with cron!
At least, with the cronie implementation.</p>

<p>You do this by specifying the time zone in the crontab with the <code>CRON_TZ</code> variable.
Any line after a <code>CRON_TZ</code> specification is scheduled in the specified time zone.
This persists until the next <code>CRON_TZ</code> value is specified.</p>

<p>Below is a sample crontab that schedules four tasks.
One is scheduled in the host time zone, two in <code>America/New_York</code>, and one in <code>Europe/London</code>.</p>

<pre><code>0 7 * * * echo "run at 7 AM in the host time zone"

CRON_TZ=America/New_York
0 7 * * * echo "Run at 7 AM New York"
10 7 * * * echo "Run at 7:10 AM New York"

CRON_TZ=Europe/London
* 8 * * * echo "Run at 8 AM London"
</code></pre>

<p>The one gotcha with this is that cronie&rsquo;s behavior is unspecified if the scheduled time ends up in the daylights savings shift of the host machine<sup id="fnref:1"><a href="#fn:1" rel="footnote">1</a></sup>.
So make sure you don&rsquo;t do that.</p>

<p>My team at work has been taking advantage of this feature since early 2023 for scheduling all of our processes start and end times.
It has been working great.
Prior to figuring<sup id="fnref:2"><a href="#fn:2" rel="footnote">2</a></sup> this out, the fall and spring time shifts were sources of issues as various countries shifted on different days.
That entire source of problems has been solved through scheduling tasks in the proper time zone.</p>
<div class="footnotes">
<hr/>
<ol>
<li id="fn:1">
We have unit tests that confirm someone hasn&rsquo;t configured a task to run within one of these periods.<a href="#fnref:1" rev="footnote">&#8617;</a></li>
<li id="fn:2">
Figuring this out was a bit of a chore. Even the Linux experts I talked to weren&rsquo;t aware of being able to do this. Digging through the source of cronie was how I figured this out. Hopefully this article makes it easier for the next person. Though, now that I know the <code>CRON_TZ</code> solution, it is pretty easy to search and find other folks talking about this.<a href="#fnref:2" rev="footnote">&#8617;</a></li>
</ol>
</div>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Utilities I like: selecta]]></title>
    <link href="https://jakemccrary.com/blog/2020/08/31/utilities-i-like-selecta/"/>
    <updated>2020-08-31T22:24:00-05:00</updated>
    <id>https://jakemccrary.com/blog/2020/08/31/utilities-i-like-selecta</id>
    <content type="html"><![CDATA[<p><a href="https://github.com/garybernhardt/selecta">Selecta</a> is a command-line utility that gives you the power to fuzzy select items from a list of text.
What does that mean?
It means you pipe <code>selecta</code> a list of text on stdin, it helps you make a choice from items in that list, and then <code>selecta</code> prints that choice to stdout.</p>

<p>Here is an example of me using it to help me narrow in on what file I&rsquo;d like to pass to <code>wc</code>.</p>

<p><video autoplay loop muted playsinline>
  <source src="https://jakemccrary.com/images/selecta-search.webm" type="video/webm">
  <source src="https://jakemccrary.com/images/selecta-search.mp4" type="video/mp4">
</video></p>

<p>In this example, I search for markdown files using <code>ripgrep</code> (<code>rg</code>), type part of a filename, hit enter to select the match, and then see the <code>wc</code> stats of that file.
This isn&rsquo;t the greatest example of using <code>selecta</code> but it adequately shows what it does.</p>

<p>Some number of years ago, I wrote a script called <code>connect-db</code>.
This script used <code>selecta</code>, along with <code>grep</code>, <code>sed</code>, and <code>cut</code>, to provide a very pleasant command-line experience for connecting to known databases.
My coworkers and I used this script frequently.</p>

<p>By combining <code>selecta</code> with other stdin/stdout friendly command-line tools you can build really enjoyable, time-saving tools.
<a href="https://github.com/garybernhardt/selecta">Selecta</a> is a useful utility to add to your toolkit.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Using Bash-Preexec for monitoring the runtime of your last command]]></title>
    <link href="https://jakemccrary.com/blog/2020/04/21/using-bash-preexec-for-monitoring-the-runtime-of-your-last-command/"/>
    <updated>2020-04-21T18:22:00-05:00</updated>
    <id>https://jakemccrary.com/blog/2020/04/21/using-bash-preexec-for-monitoring-the-runtime-of-your-last-command</id>
    <content type="html"><![CDATA[<p>My article on <a href="/blog/2015/05/03/put-the-last-commands-run-time-in-your-bash-prompt/">putting the runtime of your last command into your bash prompt</a> is one of my most surfaced-by-google articles.
Why is this a great to your prompt?
To quote my previous article:</p>

<blockquote><p>I’m fairly certain the following scenario has happened to every terminal user. You run a command and, while it is running, realize you should have prefixed it with <code>time</code>. You momentarily struggle with the thought of killing the command and rerunning it with <code>time</code>. You decide not to and the command finishes without you knowing how long it took. You debate running it again.</p>

<p>For the last year I’ve lived in a world without this problem. Upon completion, a command’s approximate run time is displayed in my prompt. It is awesome.</p></blockquote>

<p>I&rsquo;ve been living without the above problem since sometime in 2014 and not having that problem is still awesome.</p>

<p>I have made some changes since 2014.</p>

<p>One change was switching to using <a href="https://github.com/rcaloras/bash-preexec">Bash-Preexec</a> instead of directly using <code>trap</code> and <code>$PROMPT_COMMAND</code> for calling functions to start and stop tracking runtime.
Bash-Preexec lets you trigger a function (or multiple) right after a command has been read and right before each prompt.</p>

<p>The usage is pretty straight forward.
In the most basic case, you source <code>bash-preexec.sh</code> and then provide functions named <code>preexec</code>, which is invoked right before a command is executed, and/or <code>precmd</code>, which is invoked just before each prompt.
<code>bash-preexec.sh</code> can be downloaded from <a href="https://github.com/rcaloras/bash-preexec/">its repo</a>.
The changes required to move to Bash-Preexec pretty <a href="https://github.com/jakemcc/dotfiles/commit/46fc3dc9d4d7d0d73152c77b7383645af42b3d5d">pretty minimal</a>.</p>

<p>The other change was introducing the script, <a href="https://github.com/jakemcc/dotfiles/blob/9c8c0315f35b55df6cef7e21261e3dcbbfac86e1/home/.bin/format-duration#L3-L4">format-duration</a> by <a href="https://twitter.com/gfredericks_">Gary Fredericks</a>, to humanely format the time.
This script converts seconds into a more readable string (example: 310 to <code>5m10s</code>)</p>

<p>Here is a screenshot of everything in action (with a reduced prompt, my normal one includes git and other info).</p>

<p><img src="/images/runtime-humane-example.png" width="320" height="150" title="&ldquo;Command line prompt showing runtimes of previous commands&rdquo; &ldquo;Command line prompt showing runtimes of previous commands&rdquo;" ></p>

<p>Below is a simplified snippet from my <code>.bashrc</code> that provides runtimes using both of these additions.</p>

<pre><code class="bash">preexec() {
  if [ "UNSET" == "${timer}" ]; then
    timer=$SECONDS
  else 
    timer=${timer:-$SECONDS}
  fi 
}

precmd() {
  if [ "UNSET" == "${timer}" ]; then
     timer_show="0s"
  else 
    the_seconds=$((SECONDS - timer))
    # use format-duration to make time more human readable
    timer_show="$(format-duration seconds $the_seconds)" 
  fi
  timer="UNSET"
}

# Add $last_show to the prompt.
PS1='[last: ${timer_show}s][\w]$ '

# a bunch more lines until the end of my .bashrc
# where I include .bash-preexec.sh
[[ -f "$HOME/.bash-preexec.sh" ]] &amp;&amp; source "$HOME/.bash-preexec.sh"
</code></pre>

<p>No more wondering about the runtime of commands is great.
Introducing <code>format-duration</code> made reading the time easier while Bash-Preexec made reading the implementation easier.
I highly recommend setting up something similar for your shell.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Auto-syncing a git repository]]></title>
    <link href="https://jakemccrary.com/blog/2020/02/25/auto-syncing-a-git-repository/"/>
    <updated>2020-02-25T21:09:00-06:00</updated>
    <id>https://jakemccrary.com/blog/2020/02/25/auto-syncing-a-git-repository</id>
    <content type="html"><![CDATA[<p>I&rsquo;m currently keep notes on my computer using plain text and <a href="https://orgmode.org/">Org mode</a>.</p>

<p>I keep my notes in a git repository in my home directory, <code>~/org/</code>.
I want my notes to be synced between my computers without me thinking about it.
Historically, I&rsquo;ve reached for something like Google Drive or Dropbox to do this but this time I reached for git and GitHub.</p>

<p>Below is the script that I ended up cobbling together from various sources found online.
The script pushes and pulls changes from a remote repository and works on my macOS and linux machines.</p>

<p>The loop starting on line 38 does the work.
Whenever a file-watcher notices a change or 10 minutes passes, the loop pulls changes from a remote repository, commits any local changes, and pushes to the remote repository.
The lines before this are mostly checking that needed programs exist on the host.</p>

<p>I keep this running in a background terminal and I check periodically to confirm it is still running.
I could do something fancier but this isn&rsquo;t a critical system and the overhead of checking every couple days is nearly zero.
Most of the time checking happens by accident when I accidentally maximize the terminal that runs the script.</p>

<p>I&rsquo;ve been using this script for a long time now and I&rsquo;ve found it quite useful. I hope you do too.</p>

<pre><code class="bash">#!/bin/bash

set -e

TARGETDIR="$HOME/org/"

stderr () {
    echo "$1" &gt;&amp;2
}

is_command() {
    command -v "$1" &amp;&gt;/dev/null
}

if [ "$(uname)" != "Darwin" ]; then
    INW="inotifywait";
    EVENTS="close_write,move,delete,create";
    INCOMMAND="\"$INW\" -qr -e \"$EVENTS\" --exclude \"\.git\" \"$TARGETDIR\""
else # if Mac, use fswatch
    INW="fswatch";
    # default events specified via a mask, see
    # https://emcrisostomo.github.io/fswatch/doc/1.14.0/fswatch.html/Invoking-fswatch.html#Numeric-Event-Flags
    # default of 414 = MovedTo + MovedFrom + Renamed + Removed + Updated + Created
    #                = 256 + 128+ 16 + 8 + 4 + 2
    EVENTS="--event=414"
    INCOMMAND="\"$INW\" --recursive \"$EVENTS\" --exclude \"\.git\" --one-event \"$TARGETDIR\""
fi

for cmd in "git" "$INW" "timeout"; do
    # in OSX: `timeout` =&gt; brew install coreutils
    # in OSX: `fswatch` =&gt; brew install fswatch
    is_command "$cmd" || { stderr "Error: Required command '$cmd' not found"; exit 1; }
done

cd "$TARGETDIR"
echo "$INCOMMAND"

while true; do
    eval "timeout 600 $INCOMMAND" || true
    git pull
    sleep 5
    STATUS=$(git status -s)
    if [ -n "$STATUS" ]; then
        echo "$STATUS"
        echo "commit!"
        git add .
        git commit -m "autocommit"
        git push origin
    fi
done
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Using comm to verify file content matches]]></title>
    <link href="https://jakemccrary.com/blog/2017/05/29/using-comm-to-verify-matching-content/"/>
    <updated>2017-05-29T10:45:00-05:00</updated>
    <id>https://jakemccrary.com/blog/2017/05/29/using-comm-to-verify-matching-content</id>
    <content type="html"><![CDATA[<p>I recently found myself in a situation where I needed to confirm that a process took in a tab separated file, did some processing, and then output a new file containing the original columns with some additional ones. The feature I was adding allowed the process to die and restart while processing the input file and pick up where it left off.</p>

<p>I needed to confirm the output had data for every line in the input. I reached to the command line tool <code>comm</code>.</p>

<p>Below is a made up input file.</p>

<pre><code>UNIQUE_ID   USER
1   38101838
2   19183819
3   19123811
4   10348018
5   19881911
6   29182918
</code></pre>

<p>And here is some made up output.</p>

<pre><code>UNIQUE_ID   USER    MESSAGE
1   38101838    A01
2   19183819    A05
3   19123811    A02
4   10348018    A01
5   19881911    A02
6   29182918    A05
</code></pre>

<p>With files this size, it would be easy enough to check visually. In my testing, I was dealing with files that had thousands of lines. This is too many to check by hand. It is a perfect amount for <code>comm</code>.</p>

<p><a href="https://en.wikipedia.org/wiki/Comm">comm</a> reads two files as input and then outputs three columns. The first column contains lines found only in the first file, the second column contains lines only found in the second, and the last column contains lines in both. If it is easier for you to think about it as set operations, the first two columns are similar to performing two set differences and the third is similar to set intersection. Below is an example adapted from Wikipedia showing its behavior.</p>

<pre><code>$ cat foo.txt
apple
banana
eggplant
$ cat bar.txt
apple
banana
banana
zucchini
$ comm foo.txt bar.txt
                  apple
                  banana
          banana
eggplant
          zucchini
</code></pre>

<p>So how is this useful? Well, you can also tell <code>comm</code> to suppress outputting specific columns.  If we send the common columns from the input and output file to <code>comm</code> and suppress <code>comm</code>&rsquo;s third column then anything printed to the screen is a problem. Anything printed to the screen was found in one of the files and not the other. We&rsquo;ll select the common columns using cut and, since comm expects input to be sorted, then sort using <code>sort</code>. Let&rsquo;s see what happens.</p>

<pre><code>$ comm -3 &lt;(cut -f 1,2 input.txt | sort) &lt;(cut -f 1,2 output.txt | sort)
$
</code></pre>

<p>Success! Nothing was printed to the console, so there is nothing unique in either file.</p>

<p><code>comm</code> is a useful tool to have in your command line toolbox.</p>
]]></content>
  </entry>
  
</feed>
