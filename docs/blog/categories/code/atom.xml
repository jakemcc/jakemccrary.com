<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: code | Jake McCrary]]></title>
  <link href="https://jakemccrary.com/blog/categories/code/atom.xml" rel="self"/>
  <link href="https://jakemccrary.com/"/>
  <updated>2020-07-03T18:38:55-05:00</updated>
  <id>https://jakemccrary.com/</id>
  <author>
    <name><![CDATA[Jake McCrary]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Continuous testing with Clojure and expectations]]></title>
    <link href="https://jakemccrary.com/blog/2011/12/16/continuous-testing-with-clojure-and-expectations/"/>
    <updated>2011-12-16T09:30:00-06:00</updated>
    <id>https://jakemccrary.com/blog/2011/12/16/continuous-testing-with-clojure-and-expectations</id>
    <content type="html"><![CDATA[<p>I&rsquo;ve recently started using <a href="http://jayfields.com/">Jay Fields'</a> Clojure testing library, <a href="https://github.com/jaycfields/expectations"><code>expectations</code></a>. I&rsquo;m not going to explain <code>expectations</code>, Jay already did a great job on his <a href="http://blog.jayfields.com/2011/11/clojure-expectations-introduction.html">blog</a>, but I will quote its <a href="https://github.com/jaycfields/expectations">Github</a> page.</p>

<blockquote><p>expectations is a minimalist&rsquo;s testing framework</p></blockquote>

<p>The above quote is absolutely true, which is one of the major reasons I&rsquo;m liking <code>expectations</code>. It hasn&rsquo;t been all sunshine though, when I first started using it I had a major problem. It slowed down my usual Clojure workflow.</p>

<p>Up until this point I had stuck to using <code>clojure.test</code>. Combined with emacs, slime, swank, and <code>clojure-test-mode</code> I found the time between making a change to code and running tests to be minimal.</p>

<p>When I switched to <code>expectations</code> the time it took between making a code change and running tests increased. With <code>expectations</code> I couldn&rsquo;t reevaluate my buffer to get the new tests in my repl environment. Doing so caused the new tests to be there along with the old tests. This meant I needed to switch to the command line to run my tests. This caused me to incur the startup costs of the jvm simply to run my expectations (tests). This was a huge cost compared to what I was used to before.</p>

<h2>Introducing <code>lein-autoexpect</code></h2>

<p>To fix my problem I wrote <a href="https://github.com/jakemcc/lein-autoexpect"><code>lein-autoexpect</code></a>. <code>lein-autoexpect</code> is a <a href="https://github.com/technomancy/leiningen/"><code>Leiningen</code></a> plugin that monitors a project&rsquo;s source and test directory and when a Clojure file changes it reloads the affected namespaces and runs all the expectations. Using this plugin my turn around time from modifying code to running all of my expectations is practically nothing. Without the cost of the jvm startup there is practically no time wasted between when code is saved and tests are run.</p>

<p>To use <code>lein-autoexpect</code> simply add <code>[lein-autoexpect "0.0.2"]</code> to your <code>project.clj</code> file and fetch the dependency. Then at the command line run <code>lein autoexpect</code>. You&rsquo;ll see your tests run and then it will just hang there, eagerly waiting for code to change.</p>

<pre><code class="bash">    $ lein autoexpect
    *********************************************
    *************** Running tests ***************
    Ran 3 tests containing 3 assertions in 16 msecs
    0 failures, 0 errors.
</code></pre>

<p>Next time you end up saving you&rsquo;ll see your tests run again and the following example output appears.</p>

<pre><code class="bash">    *********************************************
    *************** Running tests ***************
    Ran 4 tests containing 4 assertions in 3 msecs
    0 failures, 0 errors.
</code></pre>

<p><code>lein-autoexpect</code> tries to clearly delimit each test session with the banner made of <code>*</code>. This helps keep different runs separate when scrolling through your terminal.</p>

<p>This style of testing is called <a href="http://blog.objectmentor.com/articles/2007/09/20/continuous-testing-explained">continuous testing</a>. If you haven&rsquo;t tried it, I would highly recommend giving it a shot. Even just using it for the last few days changed how I think testing should be done.</p>

<p>Source can be found on <a href="https://github.com/jakemcc/lein-autoexpect">Github</a>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Command line arguments in Clojure]]></title>
    <link href="https://jakemccrary.com/blog/2011/04/12/command-line-arguments-in-clojure/"/>
    <updated>2011-04-12T20:00:00-05:00</updated>
    <id>https://jakemccrary.com/blog/2011/04/12/command-line-arguments-in-clojure</id>
    <content type="html"><![CDATA[<p><em>This post is now out of date. The library recommended by this post is now a contrib library. Check out <a href="https://github.com/clojure/tools.cli">tools.cli</a> for great documentation about handling command line arguments in Clojure.</em></p>

<hr />

<p>Write enough Clojure and eventually you will need to handle command line arguments. There are numerous ways of doing this. Keep reading for a brief introduction to three.</p>

<h3>Using built-in features</h3>

<p>There exists a sequence named <code>*command-line-args*</code> which contains the arguments to your application. Using it is simple, it is just a sequence after all, and it is always available to you. No need to pull in external dependencies that others may not be familiar with.</p>

<p>This simplicity is also a downside. Because only a sequence is provided for you it is up to you to actually figure out the arguments. If you want to do any sort of verification that certain arguments are supplied you write the code that does the verifying. If you want to move away from positional arguments to using command line flags once again it is up to you to write it.</p>

<p>Because of the amount of code required to do any sort of advanced argument handling I tend to use <code>*command-line-args*</code> only for applications that take a single type of argument, for example a file path, and require one or more of this type of argument.</p>

<h3>Setup for next two sections</h3>

<p>For the next two sections I&rsquo;m using version 1.5.0 of Leiningen and the specified versions of libraries as stated in the below <code>project.clj</code> file.</p>

<pre><code class="clojure">    (defproject blogpost "1.0.0-SNAPSHOT"
      :dependencies [[org.clojure/clojure "1.2.0"]
                     [org.clojure/clojure-contrib "1.2.0"]
                     [clargon "1.0.0"]]
      :dev-dependencies [[swank-clojure "1.2.1"]]
      :run-aliases {:clargon clargon-example
                    :cc command-line-example})
</code></pre>

<p>I&rsquo;m using <code>lein run</code> to run the examples. <code>lein run :cc</code> runs the clojure.contrib example. Likewise, running <code>lein run :clargon</code> will run the clargon examples. Both of these commands can be followed by additional arguments that get passed to the application.</p>

<h3>Using clojure.contrib.command-line</h3>

<p>The next step after using <code>*command-line-args*</code> is to use the library <code>clojure.contrib.command-line</code>. This library provides the function <code>with-command-line</code> that allows you specify requirements and then handles the parsing of the command line arguments for you.</p>

<p>Positives of using <code>clojure.contrib.command-line</code>:
* Part of <code>clojure.contrib</code>. Probably extremely low friction to start using it.
* No longer need to write your own command line parsing code.
* Responds to <code>-h</code> and <code>--help</code>.</p>

<p>A negative of using <code>clojure.contrib.command-line</code> is that the documentation is pretty sparse. This can lead to some fumbling around as you learn how to use it. Another downside is that there isn&rsquo;t a way of specifying whether an argument is required or optional. This means you must manually check for required arguments and give appropriate error messages to the user.</p>

<p>Below is an example of using <code>clojure.contrib.command-line</code>. It specifies a few different arguments. The <code>--cow</code> argument has a default value of &ldquo;cow&rdquo;. <code>--chicken</code> has no default value, if it is left unspecified it will be <code>nil</code>. The line with <code>milk?</code> specifies a boolean value. If <code>--milk</code> (or <code>-m</code> because of the <code>m?</code> specification) is specified at the command line then <code>milk?</code> will be true. <code>extras</code> will collect any additional arguments.</p>

<pre><code class="clojure">    (ns command-line-example
      (:require [clojure.contrib.command-line :as ccl]))

    (defn -main [&amp; args]
      (ccl/with-command-line args
        "Command line demo"
        [[cow "This is the cows name" "cow"]
         [chicken "This specifies the chickens name"]
         [milk? m? "Should you milk the cow?"]
         extras]
        (println "cow's name: " cow)
        (println "chicken's name: " chicken)
        (println "milk?: " milk?)
        (println "extra args: " extras)))
</code></pre>

<p>And here is an example of calling that <code>-main</code> function from the repl.</p>

<pre><code class="bash">    $ lein run :cc --cow Herb --milk other args
    cow's name:  Herb
    chicken's name:  nil
    milk?:  true
    extra args:  [other args]
</code></pre>

<h3>Using some other library</h3>

<p>Another option is to use some library that isn&rsquo;t found in <code>clojure.contrib</code>. One example of this is <a href="https://github.com/gar3thjon3s/clargon">clargon</a>. Clargon is a library that <a href="http://blog.gaz-jones.com/">Gaz Jones</a> (his blog post <a href="http://blog.gaz-jones.com/post/2528825514/command-line-applications-in-clojure">here</a>) wrote. The documentation (both in his blog post and through the github page and tests) is the primary reason I started using it.</p>

<p>Pros of clargon:
* Great documentation. Makes it quick to get started.
* Can specify functions to transform arguments prior to gaining access to them
* You specify if an argument is required or optional.
* Responds to <code>-h</code> and <code>--help</code>.</p>

<p>One potential negative of using clargon is that it isn&rsquo;t a <code>clojure.contrib</code> library. This means there is slightly more friction to start using it on your project as, unlike <code>clojure.contrib</code>, you are probably not already depending on it.</p>

<p>Below is an example similar to the above <code>clojure.contrib.command-line</code> example. One important difference is that some arguments are now specified as either required or optional. If a required argument is not specified then an error is printed and execution stops.</p>

<pre><code class="clojure">    (ns clargon-example
      (:require [clargon.core :as c]))

    (defn -main
      [&amp; args]
      (let [opts
            (c/clargon
             args
             (c/optional ["--cow" "Specify the cow's name" :default "cow"])
             (c/required ["--chicken" "Chicken's name"])
             (c/optional ["-m?" "--milk?" "should you milk the cow?"]))]
        (println args)
        (println opts)))
</code></pre>

<p><code>optional</code> and <code>required</code> both take a vector that defines the specification of a flag. Starting with the first element in that vector, each element that is a string and starts with a &lsquo;-&rsquo; is considered a potential flag for that argument. The last flag is stripped of leading &lsquo;-&rsquo; characters and is considered the name of that flag (unless a <code>:name</code> option is specified later). The name is used to look up the value of the argument in the option map that is returned by the <code>clargon</code> function. If the next element after the last flag is a string then it is considered the documentation for that flag. When clargon runs into a non-string element then it and everything after it are considered options and should be specified as key value pairs. Options that do something are <code>:default</code>, <code>:name</code>, and <code>:required</code>.</p>

<p><code>optional</code> and <code>required</code> both can take a function as a second argument. This function will be passed the argument for that flag and should return a transformed version of it. Below is an example using this functionality to specify a required flag that takes a comma separated list of files. These comma separated files are split apart and stuck into a vector.</p>

<pre><code class="clojure">    (ns clargon-example
      (:require [clargon.core :as c]))

    (defn -main
      [&amp; args]
      (let [opts (c/clargon
                  args
                  (c/required ["--files" "Files to process"]
                              #(vec (.split % ","))))]
        (println "Parsed opts: " opts)))
</code></pre>

<p>Below is the above example being ran.</p>

<pre><code class="clojure">    $ lein run :clargon --files one.txt,two.txt,three.txt
    Parsed opts:  {:files [one.txt two.txt three.txt]}
</code></pre>

<p>Clargon supports some more advanced nested argument handling that I&rsquo;m not going to go into here. If you want to know more about clargon I&rsquo;d recommend reading reading Gaz&rsquo;s <a href="http://blog.gaz-jones.com/post/2528825514/command-line-applications-in-clojure">blog post</a> and the <a href="https://github.com/gar3thjon3s/clargon">clargon</a> readme and tests.</p>

<h3>End</h3>

<p>There are many more ways to handle command line parsing in Clojure. You are not limited to any of the three above. I&rsquo;ve personally found clargon to hit all of my needs and plan on continuing to use it.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Creating a SQL table with a composite primary key in Clojure]]></title>
    <link href="https://jakemccrary.com/blog/2011/01/19/creating-sql-table-with-composite-key-in-clojure/"/>
    <updated>2011-01-19T00:00:00-06:00</updated>
    <id>https://jakemccrary.com/blog/2011/01/19/creating-sql-table-with-composite-key-in-clojure</id>
    <content type="html"><![CDATA[<p>I was interacting with a SQL database using Clojure and needed to create a table so I turned to <code>create-table</code> from <a href="http://clojure.github.com/clojure-contrib/sql-api.html">clojure.contrib.sql</a>. Looking at the <a href="http://clojure.github.com/clojure-contrib/sql-api.html#clojure.contrib.sql/create-table">docs</a> for <code>create-table</code> it seemed pretty straight forward. To create a table with columns <em>date</em>, <em>id</em>, <em>symbol</em>, <em>price</em>, and <em>quantity</em> you would write the following.</p>

<pre><code class="clojure">    (create-table "orders"
                  [:date     "date"]
                  [:id       "integer"]
                  [:symbol   "char(10)"]
                  [:price    "integer"]
                  [:quantity "integer"])
</code></pre>

<p>The above works. I also wanted to specify that columns <em>date</em> and <em>id</em> to form a composite primary key. I wasn&rsquo;t sure how to specify a composite primary key with <code>create-table</code> and ended up diving into its <a href="https://github.com/clojure/clojure-contrib/blob/b8d2743d3a89e13fc9deb2844ca2167b34aaa9b6/src/main/clojure/clojure/contrib/sql.clj#L103">code</a>.</p>

<pre><code class="clojure">    (defn create-table
      "Creates a table on the open database connection given a table name and
      specs. Each spec is either a column spec: a vector containing a column
      name and optionally a type and other constraints, or a table-level
      constraint: a vector containing words that express the constraint. All
      words used to describe the table may be supplied as strings or keywords."
      [name &amp; specs]
      (do-commands                                              
       (format "CREATE TABLE %s (%s)"                           
               (as-str name)
               (apply str                                       
                 (map as-str                                    
                  (apply concat                                 
                   (interpose [", "]                            
                    (map (partial interpose " ") specs))))))))  
</code></pre>

<p>Looking at <code>create-table</code> we can see it creates a SQL statement which is then executed by <code>do-commands</code>. In order to have a composite key we need <code>do-commands</code> to execute a SQL statement that looks similar to below.</p>

<pre><code class="sql">    CREATE TABLE track(
      date date,
      id integer,
      symbol char(10),
      price integer,
      quantity integer,
      PRIMARY KEY (date, id)
    )
</code></pre>

<p>Let&rsquo;s break down <code>create-table</code> to figure out what we need to pass it to make <code>do-commands</code> run the above statement. The code for <code>create-table</code> is repeated below with comments pointing out what step lines up the code.</p>

<pre><code class="clojure">    (defn create-table
      [name &amp; specs]
      (do-commands                                              ; step 7
       (format "CREATE TABLE %s (%s)"                           ; step 6
               (as-str name)
               (apply str                                       ; step 5
                 (map as-str                                    ; step 4
                  (apply concat                                 ; step 3
                   (interpose [", "]                            ; step 2
                    (map (partial interpose " ") specs))))))))  ; step 1
</code></pre>

<ol>
<li>First <code>create-table</code> takes the sequences in <code>specs</code> and puts a space between each element in each sequence.</li>
<li>The result of step 1 then has a vector containing a comma and a space interposed between each element of it.</li>
<li><code>concat</code> combined with <code>apply</code> is used to combine each element of the result of step 2 into a single sequence.</li>
<li><code>as-str</code> (from <a href="http://clojure.github.com/clojure-contrib/string-api.html#clojure.contrib.string/as-str">c.c.string</a>) is mapped over the result of step 3 to make sure every element is a string.</li>
<li><code>str</code> is used to make one string out of the sequence of strings from step 4.</li>
<li><code>format</code> is used to substitute in <code>name</code> and the result of step 5 to create the SQL statement.</li>
<li><code>do-commands</code> executes the statement created in step 6.</li>
</ol>


<p>Knowing how <code>create-table</code> works now allows us to specify the arguments that will create the orders table with the composite primary key of <em>date</em> and <em>id</em>.</p>

<pre><code class="clojure">    (create-table "orders"
                  [:date     "date"]
                  [:id       "integer"]
                  [:symbol   "char(10)"]
                  [:price    "integer"]
                  [:quantity "integer"]
                  ["PRIMARY KEY" "(date, id)")
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Generating test cases in Clojure]]></title>
    <link href="https://jakemccrary.com/blog/2011/01/18/generating-test-cases-in-clojure/"/>
    <updated>2011-01-18T00:00:00-06:00</updated>
    <id>https://jakemccrary.com/blog/2011/01/18/generating-test-cases-in-clojure</id>
    <content type="html"><![CDATA[<p>Recently I was writing some data mining Clojure code which needed to parse a log file and do some transforms of the data. Some of the transforms were dependent on data found across multiple lines. There was no ordering or proximity guarantees to these lines.</p>

<p>This required the code to handle a variety of situations. After writing a couple simple tests and getting those passing I wanted to more extensively test my solution. I was lazy though and did not want to hand code all of the potential orderings.  Enter <code>permutations</code>.</p>

<p><code>permutations</code> is a function out of <a href="http://clojure.github.com/clojure-contrib/combinatorics-api.html">clojure.contrib.combinatorics</a>. As the name suggests, you give it a collection and it returns a lazy sequence containing all the different permutations of the elements in that collection. An example is below.</p>

<pre><code class="clojure">    user&gt;(ns generate)
    generate&gt;(use '[clojure.contrib.combinatorics :only [permutations]])
    nil
    generate&gt; (permutations [:a :b :c])
    ((:a :b :c) (:a :c :b) (:b :a :c) (:b :c :a) (:c :a :b) (:c :b :a))
</code></pre>

<p>You can already see where this is going. I was able to use <code>permutations</code> to generate all the potential different orderings of the input. This saved me the trouble of having to do that by hand.</p>

<p>One difficulty of generating test inputs pragmatically is telling what sort of inputs caused it to fail. To get around this I used the rarely used (at least in code I&rsquo;m working on) second argument of <a href="http://clojure.github.com/clojure/clojure.test-api.html#clojure.test/is">clojure.test&rsquo;s</a> <code>is</code>. This second argument is a message that prints on a failure.</p>

<p>Below is a contrived example of using <code>permutations</code> to test an obviously wrong <code>silly-add</code> function. <code>silly-add</code> is defined below.</p>

<pre><code class="clojure">    generate&gt; (defn silly-add
                  [x &amp; xs]
                  (if (zero? x)
                      (apply + 40 xs)
                      (apply + x xs)))
    #'generate/silly-add
</code></pre>

<p>Below is a test that uses <code>permutations</code> to exercise <code>silly-add</code> with all the potential orderings three input numbers. Note that it takes advantage of the second argument to <code>is</code>. Without this we would not know what input caused the failure.</p>

<pre><code class="clojure">    generate&gt; (use 'clojure.test)
    nil
    generate&gt; (deftest generate-some-tests
                (doseq [input (permutations [1 0 9])]
                       (is (= 10 (apply silly-add input))
                           (str "Failed on input: " (seq input)))))
    #'generate/generate-some-tests
</code></pre>

<p>Running the test we see that there is clearly an error.</p>

<pre><code class="clojure">    generate&gt; (run-tests)
    Testing generate

    FAIL in (generate-some-tests) (NO_SOURCE_FILE:1)
    Failed on input: (0 1 9)
    expected: (= 10 (apply silly-add input))
      actual: (not (= 10 50))

    FAIL in (generate-some-tests) (NO_SOURCE_FILE:1)
    Failed on input: (0 9 1)
    expected: (= 10 (apply silly-add input))
      actual: (not (= 10 50))
</code></pre>

<p><code>permutations</code> saved me a bit of time and let me test some situations that I otherwise would not have tested. This actually exposed a subtle bug in my code. Hopefully it can do the same for you.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Trampolining through mutual recursion with Clojure]]></title>
    <link href="https://jakemccrary.com/blog/2010/12/06/trampolining-through-mutual-recursion/"/>
    <updated>2010-12-06T00:00:00-06:00</updated>
    <id>https://jakemccrary.com/blog/2010/12/06/trampolining-through-mutual-recursion</id>
    <content type="html"><![CDATA[<p>The other day I stumbled across some <a href="http://clojure.org">Clojure</a> code that used <a href="http://en.wikipedia.org/wiki/Mutual_recursion">mutual recursion</a>. Mutual recursion can be a valuable tool when solving a problem. Unfortunately because of the lack of <a href="http://en.wikipedia.org/wiki/Tail_call">tail call optimization</a> on the JVM this can be a dangerous technique when writing Clojure code. It can be easy to forget about this limitation and end up writing code that blows the stack.</p>

<p>Take the classic even/odd checking code from the <a href="http://en.wikipedia.org/wiki/Mutual_recursion">Wikipedia</a> page. If we just translate it to Clojure it will cause a <a href="http://en.wikipedia.org/wiki/Stack_overflow">stack overflow</a> error when we pass in a large number. The massive number of function calls require before returning causes too much memory to be consumed.</p>

<pre><code class="clojure">    (declare my-odd?)

    (defn my-even? [n]
      (if (zero? n)
        true
        (my-odd? (dec (Math/abs n)))))

    (defn my-odd? [n]
      (if (zero? n)
        false
        (my-even? (dec (Math/abs n)))))

    user&gt; (my-even? 1000000)
    ; Evaluation aborted. &lt;- this is a result of java.util.StackOverflowError
</code></pre>

<p>Luckily since Clojure 1.0 there has been a useful function for dealing with this. <code>trampoline</code>, with minor modifications to your code, can be used to get around the lack of tail call optimizations (<a href="http://clojure.github.com/clojure/clojure.core-api.html#clojure.core/trampoline">docs here</a>).</p>

<p><code>trampoline</code> takes a function (and, if needed, arguments to pass into the function) and calls it. If the function returns a function then <code>trampoline</code> calls that. As long as functions are returned <code>trampoline</code> will continue calling them. When a non-function value is returned <code>trampoline</code> returns, passing through the value.</p>

<p>To make our sample code work with <code>trampoline</code> we simply change our functions to return a closure which wraps the call that was previously being executed. This just entails putting a <code>#</code> before the final s-exp. This takes advantage of Clojure&rsquo;s anonymous function syntax to change the function call into a closure which is returned.</p>

<pre><code class="clojure">    (defn my-even? [n]
      (if (zero? n)
        true
        #(my-odd? (dec (Math/abs n)))))

    (defn my-odd? [n]
      (if (zero? n)
        false
        #(my-even? (dec (Math/abs n)))))
</code></pre>

<p>By doing this we&rsquo;ve changed how the caller interacts with <code>my-even?</code> and <code>my-odd?</code>. It now needs to be called by <code>trampoline</code>.</p>

<pre><code class="clojure">    user&gt; (trampoline my-even? 1000000)
    true
</code></pre>

<p>Now we no longer suffer from the stack overflow error.</p>

<p>I think we can still do better though, because now the caller of <code>my-even?</code> and <code>my-odd?</code> suffers since they are forced to remember to use <code>trampoline</code>. By forcing this on the caller, we&rsquo;ve pushed what should be hidden implementations details into the callers code. We can fix this by pushing the use of <code>trampoline</code> into our functions.</p>

<pre><code class="clojure">    (defn my-even? [n]
      (letfn [(e? [n]
                  (if (zero? n)
                    true
                    #(o? (dec (Math/abs n)))))
              (o? [n]
                  (if (zero? n)
                    false
                    #(e? (dec (Math/abs n)))))]
        (trampoline e? n)))

    (defn my-odd? [n]
      (not (my-even? n)))

    user&gt; (my-even? 1000000)
    true
    user&gt; (my-odd? 1000000)
    false
</code></pre>

<p>Now we have the best of both worlds. Mutual recursion without the worry of a stack overflow and functions that don&rsquo;t force the caller to be aware of the implementation details.</p>
]]></content>
  </entry>
  
</feed>
