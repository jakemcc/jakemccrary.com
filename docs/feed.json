{"version":"https://jsonfeed.org/version/1.1","title":"Jake McCrary's articles","home_page_url":"https://jakemccrary.com/","feed_url":"https://jakemccrary.com/feed.json","favicon":"https://jakemccrary.com/favicon.png","author":{"name":"Jake McCrary"},"items":[{"id":"https://jakemccrary.com/blog/a-couple-tiny-elisp-functions-for-improving-living-in-emacs/index.html","url":"https://jakemccrary.com/blog/a-couple-tiny-elisp-functions-for-improving-living-in-emacs/index.html","content_text":"<p>I've been using Emacs for nearly twenty years but have struggled to quickly knock out tiny elisp functions for making my experience nicer. Despite that, I've written elisp to enhance my Emacs experience but I often don't bother fixing small annoyances that are solved relatively easily in other ways. Now that LLMs exist and are reasonably good, they have lowered the bar for creating small quality of life enhancements. Below are two such enhancements.</p><p>These have only been tested and used in Emacs 29.4 on macOS.</p><h2>Quickly change font sizes</h2><p>I find myself working on a variety of monitor sizes and resolutions. This function lets me quickly switch between font sizes.</p><pre><code class=\"language-lisp\">&#40;defun jm/choose-font-size &#40;&#41;\n  &quot;Choose between three different font sizes: 16, 18, and 20.&quot;\n  &#40;interactive&#41;\n  &#40;set-face-attribute 'default nil :height\n                      &#40;&#42; 10 &#40;string-to-number\n                             &#40;completing-read &quot;Choose font size: &quot;\n                                              &#40;mapcar #'number-to-string '&#40;16 18 20&#41;&#41;&#41;&#41;&#41;&#41;&#41;\n</code></pre><h2>Change window split orientation</h2><p>First some definitions from the Emacs manual.</p><blockquote><p> A frame is a screen object that contains one or more Emacs windows (see Windows). It is the kind of object called a “window” in the terminology of graphical environments; but we can’t call it a “window” here, because Emacs uses that word in a different way.<br /><ul><li><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Frames.html'>Emacs manual</a><blockquote><p></li></ul><p> A window is an area of the screen that can be used to display a buffer (see Buffers). Windows are grouped into frames (see Frames). Each frame contains at least one window; the user can subdivide a frame into multiple, non-overlapping windows to view several buffers at once.  </p></blockquote></p><blockquote><p><ul><li><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Basic-Windows.html'>Emacs manual</a></li></ul></p></blockquote><p>I primarily work in a single frame split into at most two windows. I haven't found a setup that I like for working with more than two windows, so I avoid it. Often, I'll want to change the split from vertical to horizontal or horizontal to vertical. I hear a picture is worth a thousand words and a gif even more so below is a demo and and the enabling code.</p><p><img src=\"/images/toggle-window-orientation.gif\" alt=\"Demo of toggling window orientation\" /> </p><pre><code class=\"language-lisp\">&#40;defun jm/toggle-window-split &#40;&#41;\n  &quot;Toggle between horizontal and vertical split for two windows. Thanks ChatGPT.&quot;\n  &#40;interactive&#41;\n  &#40;if &#40;= &#40;count-windows&#41; 2&#41;\n      &#40;let&#42; &#40;&#40;this-win-buffer &#40;window-buffer&#41;&#41;\n             &#40;next-win-buffer &#40;window-buffer &#40;next-window&#41;&#41;&#41;\n             &#40;this-win-edges &#40;window-edges &#40;selected-window&#41;&#41;&#41;\n             &#40;next-win-edges &#40;window-edges &#40;next-window&#41;&#41;&#41;\n             &#40;this-win-2nd &#40;not &#40;and &#40;&lt;= &#40;car this-win-edges&#41;\n                                         &#40;car next-win-edges&#41;&#41;\n                                     &#40;&lt;= &#40;cadr this-win-edges&#41;\n                                         &#40;cadr next-win-edges&#41;&#41;&#41;&#41;&#41;\n             &#40;splitter\n              &#40;if &#40;= &#40;car this-win-edges&#41;\n                     &#40;car &#40;window-edges &#40;next-window&#41;&#41;&#41;&#41;\n                  'split-window-horizontally\n                'split-window-vertically&#41;&#41;&#41;\n        &#40;delete-other-windows&#41;\n        &#40;let &#40;&#40;first-win &#40;selected-window&#41;&#41;&#41;\n          &#40;funcall splitter&#41;\n          &#40;if this-win-2nd &#40;other-window 1&#41;&#41;\n          &#40;set-window-buffer &#40;selected-window&#41; this-win-buffer&#41;\n          &#40;set-window-buffer &#40;next-window&#41; next-win-buffer&#41;\n          &#40;select-window first-win&#41;\n          &#40;if this-win-2nd &#40;other-window 1&#41;&#41;&#41;&#41;&#41;&#41;\n</code></pre><h2>End</h2><p>Could those functions be written better? I don't know, maybe. If I had to read the documentation and write these entirely on my down, these functions wouldn't exist because the return on investment just wouldn't be there. These only exist because the time to generate them<a href='#fn-1' id='fnref1'><sup>1</sup></a> is so small that it becomes worth it. AI tools drastically lower the bar for making small routine operations more efficient.</p><p><a href='https://xkcd.com/1205'><img src=\"https://imgs.xkcd.com/comics/is_it_worth_the_time.png\" alt=\"xkcd: Is It Worth The Time?\" /></a></p><ol class='footnotes'><li id='fn-1'>And test and make minor edits as needed.<a href='#fnref1'>&#8617;</a></li></ol>","title":"A couple tiny elisp functions for improving living in Emacs","author":{"name":"Jake McCrary"},"date_published":"2025-02-17T23:59:59+00:00"},{"id":"https://jakemccrary.com/blog/reading-in-2024/index.html","url":"https://jakemccrary.com/blog/reading-in-2024/index.html","content_text":"<p>At the beginning of every year, I take the time to update my records of what I've read the previous year and write up a summary.</p><p>Previous summaries: <a href='/blog/2014/01/01/using-incanter-to-review-my-2013-reading/'>2013</a>, <a href='/blog/2015/01/08/reading-in-2014/'>2014</a>, <a href='/blog/2016/03/13/reading-in-2015/'>2015</a>, <a href='/blog/2017/01/04/reading-in-2016/'>2016</a>, <a href='/blog/2018/03/03/reading-in-2017/'>2017</a>, <a href='/blog/2019/01/21/reading-in-2018/'>2018</a>, <a href='/blog/2020/01/11/reading-in-2019/'>2019</a>, <a href='/blog/2021/01/24/reading-in-2020/'>2020</a>, <a href='/blog/2022/01/02/reading-in-2021/'>2021</a>, <a href='/blog/2023/01/14/reading-in-2022/'>2022</a>, <a href='/blog/2024/02/18/reading-in-2023/'>2024</a>.</p><p>I've continued to keep track of my reading using <a href='http://goodreads.com'>Goodreads</a>. My <a href='https://www.goodreads.com/user/show/3431614-jake-mccrary'>profile</a> has nearly the full list of the books I've read since 2010.</p><h2>2024 Goals</h2><blockquote><p> I'd like to maintain a regular reading practice.  I think this means having a similar number of pages read this year. </p></blockquote><p>Ehh, I don't think I succeeded in this goal, despite not being too far off the number of pages I read in 2023.</p><blockquote><p> I have a massive stack of books at home that I haven't read through yet, I'd like to whittle that down some. </p></blockquote><p>I'm pretty sure there is a universal law that a stack of unread books can only grow and my coffee table is proof it is true.</p><h2>Highlights</h2><p>Below are the highlights from 2024. Any title link will bring you to Goodreads.</p><h3>Five-star books</h3><h4><a href='https://www.goodreads.com/book/show/158875813-prophet-song'>Prophet Song</a> by Paul Lynch</h4><p>This book was beautiful. I cried. The writing is lyrical, the subject matter is tough, and you'll probably tear up too.</p><p>You may have heard that reading fiction can help you be more empathetic. I could feel this book do that to me.</p><p>Go read it.</p><h4><a href='https://www.goodreads.com/book/show/197828937-all-fours'>All Fours</a> by Miranda July</h4><p>This book is fantastic. I literally laughed out loud multiple times. Miranda July's writing tickles me in just the right way.</p><h4><a href='https://www.goodreads.com/book/show/145625425-day'>Day</a> by Michael Cunningham</h4><p>I guess I haven't gotten sick of books that deal with the COVID-19 pandemic. Maybe that is because I've only read stories on the topic from really solid authors.</p><p>This book gives you a glimpse into the lives of a family on three different days (April 5 2019, 2020 and 2021). It has been nearly a year since I've read this and unfortunately I don't remember what I enjoyed so much about this book.</p><h4><a href='https://www.goodreads.com/book/show/6567453-looking-for-alaska'>Looking for Alaska</a> by John Green</h4><p>I don't know, sometimes you read a young adult book and it just makes an impact. I doubt others will enjoy this as much as I did at the time I read it.</p><h4><a href='https://www.goodreads.com/book/show/157998171-supercommunicators'>Supercommunicators</a> by Charles Duhigg</h4><p>I'm projecting but I'd guess that most folks would be better off if they became better communicators. And that is exactly what this book says it will do.</p><p>I enjoyed reading this and will benefit by going back through and trying to apply the lessons found in this book.</p><h3>Other highlights</h3><h4><a href='https://www.goodreads.com/book/show/91288912-the-zen-of-climbing'>The Zen of Climbing</a> by Francis Sanzaro</h4><p>Some parts were great; some parts were so-so. Seeing Zen principles applied to climbing was thought-provoking.</p><h4>Ada Palmer's <a href='https://www.goodreads.com/series/166200-terra-ignota'>Terra Ignota</a> series</h4><p>The right reader will absolutely love this series. Unfortunately, I'm not that reader. Still, I enjoyed the series quite a bit. The world built by Ada Palmer is fascinating. I'll admit though, I think about this world quite often. This book made an impact.</p><h4><a href='https://www.goodreads.com/book/show/59016923-small-things-like-these'>Small Things Like These</a> by Claire Keegan</h4><p>A short and powerful book.</p><h4>Jasper Fforde's <a href='https://www.goodreads.com/series/51553-shades-of-grey'>Shades of Grey</a> series</h4><p>At the time of writing this, I think there are only two books in the series and those are the two that I've read.</p><p>This series puts you into a world of rules and structure, with society being built on top of hierarchies based on how much color you can see. It is an interesting coming of age story as the main character learns to navigate this world. This is a fun and interesting world and I hope more books come out in the series.</p><h4><a href='https://www.goodreads.com/book/show/204193039-i-m-starting-to-worry-about-this-black-box-of-doom'>I'm Starting to Worry About This Black Box of Doom</a> by Jason Pargin</h4><p>This book calls out our modern world and our addiction to outrage-as-entertainment, addiction to screens, and the information bubbles we live in.</p><p>I really enjoyed all of that. In a way, this book takes non-fiction books, such as Hans Rosling's Factfulness (a book about how much better the world has become) and books on social media, filter bubbles, and polarization, and packages it up into a fiction tale demonstrating how it the Internet warps how we perceive each other and our modern world. Some readers might not enjoy characters going on rants and arguments about these topics but I really enjoyed it.</p><p>This book is a good reminder that we're really more similar than we are different and that modern media (social, news, etc) really divides us and both makes the world seem worse and actually be worse.</p><h4><a href='https://www.goodreads.com/book/show/204079049-rejection'>Rejection</a> by Tony Tulathimutte</h4><p>A collection of stories about rejection that are loosely connected. It is fun satire. I probably could have given this one five stars.</p><h2>Stats</h2><p>I read 35 books in 2024.</p><pre><code class=\"language-org\">| Year | # of Pages | # of Books |\n|------+------------+------------|\n| 2024 |      12919 |         37 |\n| 2023 |      14956 |         53 |\n| 2022 |      10127 |         35 |\n| 2021 |      19564 |         57 |\n| 2020 |      12093 |         43 |\n| 2019 |      15994 |         42 |\n| 2018 |      13538 |         36 |\n| 2017 |      18317 |         48 |\n| 2016 |      22790 |         59 |\n| 2015 |      21689 |         51 |\n| 2014 |      24340 |         71 |\n| 2013 |      19815 |         60 |\n| 2012 |      14208 |         44 |\n| 2011 |       9179 |         19 |\n| 2010 |      14667 |         46 |\n</code></pre><p><img src=\"/images/reading-by-month-2024.svg\" alt=\"Book and pages count by month\" title=\"Number of books and pages for each month\" /></p><p>Electronic books continue to dominate.</p><pre><code class=\"language-org\">|           | 2024 | 2023 | 2022 | 2021 | 2020 | 2019 | 2018 | 2017 | 2016 | 2015 |\n|-----------+------+------+------+------+------+------+------+------+------+------|\n| audiobook |    0 |    0 |    0 |    0 |    1 |    0 |    0 |    0 |    0 |    0 |\n| ebook     |   35 |   51 |   34 |   56 |   41 |   43 |   37 |   37 |   56 |   47 |\n| hardcover |    1 |    0 |    1 |    0 |    0 |    1 |    1 |    7 |    0 |    1 |\n| paperback |    1 |    2 |    0 |    1 |    1 |    7 |    5 |    5 |    3 |    3 |\n</code></pre><p>I did not read many non-fiction books last year.</p><pre><code class=\"language-org\">|                           |   2024 |  2023 | 2022 |   2021 |   2020 |   2019 |   2018 |\n|---------------------------+--------+-------+------+--------+--------+--------+--------|\n| fiction                   |     33 |    47 |   28 |     46 |     26 |     28 |     29 |\n| non-fiction               |      4 |     6 |    7 |     11 |     17 |     23 |     14 |\n| fiction:non-fiction ratio | 8.25:1 | 7.8:1 |  4:1 | 4.18:1 | 1.53:1 | 1.22:1 | 2.07:1 |\n\n</code></pre><p>Here is the star rating distribution.</p><pre><code class=\"language-org\">|             | 3 stars | 4 stars | 5 stars |\n|-------------+---------+---------+---------|\n| fiction     |      17 |      12 |       4 |\n| non-fiction |       1 |       2 |       1 |\n</code></pre><h2>2025 goals</h2><p>For the last month or so, I've been better about reading with a regular cadence. I'd like to keep that up.</p>","title":"Reading in 2024","author":{"name":"Jake McCrary"},"date_published":"2025-02-13T23:59:59+00:00"},{"id":"https://jakemccrary.com/blog/2024/06/16/scheduling-cron-tasks-in-mixed-time-zones/index.html","url":"https://jakemccrary.com/blog/2024/06/16/scheduling-cron-tasks-in-mixed-time-zones/index.html","content_text":"<p>Have you ever needed to schedule a repeating task on a Linux host? If so, you've probably reached for cron. cron is widely available and reliable; it is a great choice for scheduling tasks.</p><p>Sometimes you find yourself scheduling a task and, ideally, you'd be scheduling that task referencing a different time zone. This is a common need if your programs are interacting with systems hosted in different areas of the world. If one system you interact with starts up at 7 AM <code>Europe/London</code> and another at 8 AM <code>America/New&#95;York</code>, it would be much better to schedule your program to run using times specified in those time zones.</p><p>Why is that preferred?</p><ul><li>If you schedule in your host time zone, you have to convert from the other time zone to your own. This is error prone.</li><li>Different time zones have different Daylights savings shifts. Having to adjust your schedule when your host or target time zone shifts is error prone.</li></ul><p>Luckily, you can do this with cron! At least, with the cronie implementation.</p><p>You do this by specifying the time zone in the crontab with the <code>CRON&#95;TZ</code> variable. Any line after a <code>CRON&#95;TZ</code> specification is scheduled in the specified time zone. This persists until the next <code>CRON&#95;TZ</code> value is specified.</p><p>Below is a sample crontab that schedules four tasks. One is scheduled in the host time zone, two in <code>America/New&#95;York</code>, and one in <code>Europe/London</code>.</p><pre><code>0 7 &#42; &#42; &#42; echo &quot;run at 7 AM in the host time zone&quot;\n\nCRON&#95;TZ=America/New&#95;York\n0 7 &#42; &#42; &#42; echo &quot;Run at 7 AM New York&quot;\n10 7 &#42; &#42; &#42; echo &quot;Run at 7:10 AM New York&quot;\n\nCRON&#95;TZ=Europe/London\n&#42; 8 &#42; &#42; &#42; echo &quot;Run at 8 AM London&quot;\n</code></pre><p>The one gotcha with this is that cronie's behavior is unspecified if the scheduled time ends up in the daylights savings shift of the host machine<a href='#fn-1' id='fnref1'><sup>1</sup></a>. So make sure you don't do that.</p><p>My team at work has been taking advantage of this feature since early 2023 for scheduling all of our processes start and end times. It has been working great. Prior to figuring<a href='#fn-2' id='fnref2'><sup>2</sup></a> this out, the fall and spring time shifts were sources of issues as various countries shifted on different days. That entire source of problems has been solved through scheduling tasks in the proper time zone.</p><ol class='footnotes'><li id='fn-1'>We have unit tests that confirm someone hasn't configured a task to run within one of these periods.<a href='#fnref1'>&#8617;</a></li><li id='fn-2'>Figuring this out was a bit of a chore. Even the Linux experts I talked to weren't aware of being able to do this. Digging through the source of cronie was how I figured this out. Hopefully this article makes it easier for the next person. Though, now that I know the <code>CRON&#95;TZ</code> solution, it is pretty easy to search and find other folks talking about this.<a href='#fnref2'>&#8617;</a></li></ol>","title":"Scheduling cron tasks in mixed time zones","author":{"name":"Jake McCrary"},"date_published":"2024-06-16T23:59:59+00:00"},{"id":"https://jakemccrary.com/blog/2024/02/18/reading-in-2023/index.html","url":"https://jakemccrary.com/blog/2024/02/18/reading-in-2023/index.html","content_text":"<p>At the beginning of every year (not so much the beginning this year), I take the time to update my records of what I've read the previous year and write up a summary.</p><p>Previous summaries: <a href='/blog/2014/01/01/using-incanter-to-review-my-2013-reading/'>2013</a>, <a href='/blog/2015/01/08/reading-in-2014/'>2014</a>, <a href='/blog/2016/03/13/reading-in-2015/'>2015</a>, <a href='/blog/2017/01/04/reading-in-2016/'>2016</a>, <a href='/blog/2018/03/03/reading-in-2017/'>2017</a>, <a href='/blog/2019/01/21/reading-in-2018/'>2018</a>, <a href='/blog/2020/01/11/reading-in-2019/'>2019</a>, <a href='/blog/2021/01/24/reading-in-2020/'>2020</a>, <a href='/blog/2022/01/02/reading-in-2021/'>2021</a>, <a href='/blog/2023/01/14/reading-in-2022/'>2022</a>.</p><p>I've continued to keep track of my reading using <a href='http://goodreads.com'>Goodreads</a>. My <a href='https://www.goodreads.com/user/show/3431614-jake-mccrary'>profile</a> has nearly the full list of the books I've read since 2010.</p><h2>2023 Goals</h2><p>Last year I wrote: </p><blockquote><p> I’d like to do a better job of keeping track of my reading. This should be pretty easy to do. </p></blockquote><blockquote><p> I don’t feel too bad about the reduction in reading but I’d like to read more this year. Some of my reading time has been replaced with worthwhile endeavors but not always. </p></blockquote><blockquote><p> Reading rejuvenates me. I need to keep it a regular part of my life. </p></blockquote><p>Well, I don't remember how poorly I did in 2022 of keeping tack of reading but I don't think I did a great job in 2023. Was it better than 2022?  Perhaps.</p><p>I didn't write many reviews for specific books nor did I send out any emails about what I was reading throughout the year. But I did do fewer corrections of the data I had in Goodreads.</p><p>I did read more than I did last year.</p><p>If I were grading myself on how well I achieved my goal, I'd give myself a B.</p><h2>Highlights</h2><p>Below are the highlights from 2023. Any title link will bring you to Goodreads.</p><h3>Five-star books</h3><h4><a href='https://www.goodreads.com/book/show/58601245-sea-of-tranquility'>Sea of Tranquility</a> by Emily St. John Mandel</h4><p>I started off the year with this book and really enjoyed it. It is a pandemic story that has characters spanning hundreds of years.</p><p>It is a little weird and beautiful. It did an excellent job of conveying feeling.</p><p>This is one of the few books that I did a mini-review of when I finished it. That review: </p><blockquote><p> A beautiful novel. While reading, I found myself rereading parts. Not because the sentences were confusing but because they expressed such a clear feeling. </p></blockquote><p>I highly recommend this book.</p><h4><a href='https://www.goodreads.com/book/show/53440834-the-first-bad-man'>The First Bad Man</a> by Miranda July</h4><p>This book is real weird and fantastic. The main character is extremely interesting. I had a blast reading this.</p><h4><a href='https://www.goodreads.com/book/show/52381770-network-effect'>Network Effect</a> by Martha Wells</h4><p>I really enjoy this series and thought this as an excellent addition to it.</p><h4><a href='https://www.goodreads.com/book/show/58916147-tomorrow-and-tomorrow-and-tomorrow'>Tomorrow, and Tomorrow, and Tomorrow</a> by Gabrielle Zevin</h4><p>This was an excellent book about friendship and creative, collaborative pursuits.</p><h4><a href='https://www.goodreads.com/book/show/61351606-how-to-live'>How to Live: 27 conflicting answers and one weird conclusion</a> by Derek Sivers</h4><p>A friend offered to send copies of this books to anyone who was up to reading it and I'm glad I spoke up and asked. Each chapter presents a philosophy. And the next chapter usually presents a different, conflicting philosophy. Every chapter is small, so it is easy to read a bit and take some time to reflect.</p><h4><a href='https://www.goodreads.com/book/show/18652778-the-little-book-of-talent'>The Little Book of Talent: 52 Tips for Improving Your Skills</a> by Daniel Coyle</h4><p>A bunch of distilled ideas around improvement. No fluff, just tips.</p><h4><a href='https://www.goodreads.com/book/show/13453029-wool-omnibus'>Wool Omnibus</a> by Hugh Howey</h4><p>I have mixed feelings about including this book on the list. I reread this series when I was debating watching the television show. Even on a second read, I still enjoyed this story.</p><p>Is it complex and view shattering science fiction? Nahh, not really.</p><p>Is it entertaining? Yep.</p><h3>Other highlights</h3><h4><a href='https://www.goodreads.com/book/show/61618096-chain-gang-all-stars'>Chain-Gang All-Stars</a> by Nana Kwame Adjei-Brenyah</h4><p>This is a really well done book that explores a modern gladiator system of punishment for criminals. It is dark and creative and a solid commentary on modern society.</p><p>Maybe this should have been five-stars.</p><h4><a href='https://www.goodreads.com/book/show/35162756-the-sparrow'>The Sparrow</a> by Mary Doria Russell</h4><p>I knew nothing about it going in and thought this was a interesting take on first contact with aliens.</p><h2>Stats</h2><p>I read 53 books in 2023.</p><pre><code class=\"language-org\">| Year | # of Pages | # of Books |\n|------+------------+------------|\n| 2023 |      14956 |         53 |\n| 2022 |      10127 |         35 |\n| 2021 |      19564 |         57 |\n| 2020 |      12093 |         43 |\n| 2019 |      15994 |         42 |\n| 2018 |      13538 |         36 |\n| 2017 |      18317 |         48 |\n| 2016 |      22790 |         59 |\n| 2015 |      21689 |         51 |\n| 2014 |      24340 |         71 |\n| 2013 |      19815 |         60 |\n| 2012 |      14208 |         44 |\n| 2011 |       9179 |         19 |\n| 2010 |      14667 |         46 |\n</code></pre><p>There are definitely some spiky months in the data.</p><p><img src=\"/images/reading-by-month-2023.svg\" alt=\"Book and pages count by month\" title=\"Number of books and pages for each month\" /></p><p>Unsurprisingly, electronic books are still the dominate format.</p><pre><code class=\"language-org\">|           | 2023 | 2022 | 2021 | 2020 | 2019 | 2018 | 2017 | 2016 | 2015 |\n|-----------+------+------+------+------+------+------+------+------+------|\n| audiobook |    0 |    0 |    0 |    1 |    0 |    0 |    0 |    0 |    0 |\n| ebook     |   51 |   34 |   56 |   41 |   43 |   37 |   37 |   56 |   47 |\n| hardcover |    0 |    1 |    0 |    0 |    1 |    1 |    7 |    0 |    1 |\n| paperback |    2 |    0 |    1 |    1 |    7 |    5 |    5 |    3 |    3 |\n</code></pre><p>Fiction continued to dominate the book count this year. If I did this by page count I think it would tell a different story, as I read quite a few short stories published as Kindle books and this skewed my fiction book count high.</p><pre><code class=\"language-org\">|                           |  2023 | 2022 |   2021 |   2020 |   2019 |   2018 |\n|---------------------------+-------+------+--------+--------+--------+--------|\n| fiction                   |    47 |   28 |     46 |     26 |     28 |     29 |\n| non-fiction               |     6 |    7 |     11 |     17 |     23 |     14 |\n| fiction:non-fiction ratio | 7.8:1 |  4:1 | 4.18:1 | 1.53:1 | 1.22:1 | 2.07:1 |\n\n</code></pre><p>Here is the star rating distribution.</p><pre><code class=\"language-org\">|             | 2 stars | 3 stars | 4 stars | 5 stars |\n|-------------+---------+---------+---------+---------|\n| fiction     |       0 |      21 |      22 |       4 |\n| non-fiction |       0 |       1 |       3 |       2 |\n</code></pre><h2>2024 goals</h2><p>I'd like to maintain a regular reading practice. I think this means having a similar number of pages read this year.</p><p>I have a massive stack of books at home that I haven't read through yet, I'd like to whittle that down some.</p>","title":"Reading in 2023","author":{"name":"Jake McCrary"},"date_published":"2024-02-18T23:59:59+00:00"},{"id":"https://jakemccrary.com/blog/2023/01/14/reading-in-2022/index.html","url":"https://jakemccrary.com/blog/2023/01/14/reading-in-2022/index.html","content_text":"<p>At the beginning of every year, I look back at my records and reflect on the books I read the previous year.</p><p>Previous years: <a href='/blog/2014/01/01/using-incanter-to-review-my-2013-reading/'>2013</a>, <a href='/blog/2015/01/08/reading-in-2014/'>2014</a>, <a href='/blog/2016/03/13/reading-in-2015/'>2015</a>, <a href='/blog/2017/01/04/reading-in-2016/'>2016</a>, <a href='/blog/2018/03/03/reading-in-2017/'>2017</a>, <a href='/blog/2019/01/21/reading-in-2018/'>2018</a>, <a href='/blog/2020/01/11/reading-in-2019/'>2019</a>, <a href='/blog/2021/01/24/reading-in-2020/'>2020</a>, <a href='/blog/2022/01/02/reading-in-2021/'>2021</a>.</p><p>I've continued to keep track of my reading using <a href='http://goodreads.com'>Goodreads</a>. My <a href='https://www.goodreads.com/user/show/3431614-jake-mccrary'>profile</a> has nearly the full list of the books I've read since 2010.</p><p>This year I did a poor job of keeping Goodreads updated. I had somewhat stopped updating Goodreads, or at least caring if I did it accurately, because I thought they were killing the ability to export your data. Luckily, that feature hasn't been removed so I'm going to continue using the service.</p><h2>2022 goals</h2><p>Last year I wrote:</p><blockquote><p> I used to be pretty good at capturing some thoughts upon completion of a book.  I haven't been doing a great job of that.  I'd like to do better this year. </p></blockquote><blockquote><p> We'll see what that entails but it might take the form of having more discipline around sending out some thoughts in the <a href='{{' title=site.subscribe_email }}>newsletter</a>. </p></blockquote><p>I accomplished absolutely nothing related to the goals I wrote at the beginning of 2022.</p><p>I didn't write down thoughts on books closer to when I finished them. I didn't keep my Goodreads data updated. I didn't send out updates to my newsletter.</p><h2>Highlights</h2><p>Below are some highlights from 2022. The titles link to Goodreads.</p><p>I didn't write many reviews on Goodreads this year and did not write detailed reviews in this article. I'd encourage you to click the links and read reviews on Goodreads.</p><h3>Five-star books</h3><h4><a href='https://www.goodreads.com/book/show/61033655-liberation-day'>Liberation Day: Stories</a> by George Saunders</h4><p>I love George Saunders' writing and especially enjoy his short stories. This collection delivered.</p><h4><a href='https://www.goodreads.com/book/show/53513520-the-lathe-of-heaven'>The Lathe of Heaven</a> by Ursula K. Le Guin</h4><p>A science fiction classic that deserves to be read.</p><h4><a href='https://www.goodreads.com/book/show/55742688-four-thousand-weeks'>Four Thousand Weeks: Time Management for Mortals</a> by Oliver Burkeman</h4><p>Gist of the book: Life is short and you won't be able to accomplish everything you desire.</p><p>I enjoyed reading this and would benefit from reading it (or at least the Goodread's reviews) again. This <a href='https://www.goodreads.com/review/show/4224854256?book_show_action=true'>review</a> on Goodreads is excellent.</p><h4><a href='https://www.goodreads.com/book/show/51202930-breath'>Breath: The New Science of a Lost Art</a> by James Nestor</h4><p>I found this book fascinating and it made me interested in breathing. It was a nice mix of self-experimentation and reporting on studies. The history of the shape of our faces and how it affects breathing really hooked me into this book.</p><p>I enjoyed the book enough that I also listened to a significant portion of it while on a road trip so my partner could also consume it.</p><h3>Other Highlights</h3><h4><a href='https://www.goodreads.com/book/show/61741867-mount-chicago'>Mount Chicago: A Novel</a> by Adam Levin</h4><p>This probably could have been rated five stars. It is a ridiculous and long novel that rewards the reader for paying attention.</p><p>Probably the highlights for me were the chapters from the perspective of a pet.</p><p>I thought a couple sections dragged a bit and are what held me back from five stars.</p><h4><a href='https://www.goodreads.com/book/show/60387334-novelist-as-a-vocation'>Novelist as a Vocation</a> by Haruki Murakami</h4><p>To say I like Murakami's writing would be an understatement, so reading a collection of essays by him about his writing was a pleasure. I learned a bunch about Murakami and his journey to becoming an internationally renowned author. At least as presented by Murakami, aspects of his life seem as surreal as some of his books.</p><p>This didn't earn five stars because I found myself just not caring about some of the topics. But overall, solid book, especially for someone that enjoys Murakami and enjoys reading about writing.</p><h3>Octavia Butler's <a href='https://www.goodreads.com/series/55489-patternmaster'>Patternmaster</a> series.</h3><p>Octavia Butler is one of my favorite authors and I devoured the first three books in this series. I enjoyed the first book, Wild Seed, the best.</p><p>I didn't realize until writing this up that there is a fourth book in the series and I've immediately queued up reading it.</p><h2>Stats</h2><p>Compared to my usual number of books and pages read, this was a low reading year. I read 35 books in 2022.</p><pre><code class=\"language-org\">| Year | # of Pages | # of Books |\n|------+------------+------------|\n| 2022 |      10127 |         35 |\n| 2021 |      19564 |         57 |\n| 2020 |      12093 |         43 |\n| 2019 |      15994 |         42 |\n| 2018 |      13538 |         36 |\n| 2017 |      18317 |         48 |\n| 2016 |      22790 |         59 |\n| 2015 |      21689 |         51 |\n| 2014 |      24340 |         71 |\n| 2013 |      19815 |         60 |\n| 2012 |      14208 |         44 |\n| 2011 |       9179 |         19 |\n| 2010 |      14667 |         46 |\n</code></pre><p>Here is a breakdown of books finished by month. There were even a couple months where I allegedly didn't finish a single book, though I wonder if that is actually true or of it is a data issue.</p><p><img src=\"/images/reading-by-month-2022.svg\" alt=\"Book and pages count by month\" title=\"Number of books and pages for each month\" /></p><p>Electronic books continue to be the dominant format. Audio book could be 0.5 for how much I listened to Breath while on a road trip.</p><pre><code class=\"language-org\">|           | 2022 | 2021 | 2020 | 2019 | 2018 | 2017 | 2016 | 2015 |\n|-----------+------+------+------+------+------+------+------+------|\n| audiobook |    0 |    0 |    1 |    0 |    0 |    0 |    0 |    0 |\n| ebook     |   34 |   56 |   41 |   43 |   37 |   37 |   56 |   47 |\n| hardcover |    1 |    0 |    0 |    1 |    1 |    7 |    0 |    1 |\n| paperback |    0 |    1 |    1 |    7 |    5 |    5 |    3 |    3 |\n</code></pre><p>Fiction dominated this year.</p><pre><code class=\"language-org\">|                           | 2022 |   2021 |   2020 |   2019 |   2018 |\n|---------------------------+------+--------+--------+--------+--------|\n| fiction                   |   28 |     46 |     26 |     28 |     29 |\n| non-fiction               |    7 |     11 |     17 |     23 |     14 |\n| fiction:non-fiction ratio |  4:1 | 4.18:1 | 1.53:1 | 1.22:1 | 2.07:1 |\n\n</code></pre><p>Here is the star rating distribution.</p><pre><code class=\"language-org\">|             | 2 stars | 3 stars | 4 stars | 5 stars |\n|-------------+---------+---------+---------+---------|\n| fiction     |       2 |      10 |      14 |       2 |\n| non-fiction |       0 |       0 |       5 |       2 |\n</code></pre><h2>2023 goals</h2><p>I'd like to do a better job of keeping track of my reading. This should be pretty easy to do.</p><p>I don't feel too bad about the reduction in reading but I'd like to read more this year. Some of my reading time has been replaced with worthwhile endeavors but not always.</p><p>Reading rejuvenates me. I need to keep it a regular part of my life.</p><p>Have any book recommendations? Please shoot me an email or leave a comment.</p>","title":"Reading in 2022","author":{"name":"Jake McCrary"},"date_published":"2023-01-14T23:59:59+00:00"},{"id":"https://jakemccrary.com/blog/2022/11/13/bookmarklets-on-mobile-are-useful/index.html","url":"https://jakemccrary.com/blog/2022/11/13/bookmarklets-on-mobile-are-useful/index.html","content_text":"<p>Bookmarklets, little snippets of JavaScript that you keep around as a bookmark, are useful. They let you execute some JavaScript to perform almost any action you want on a website.</p><p>Some bookmarklets I use on my desktop browser include:</p><ol><li>A collection of bookmarklets that let you change the playback speed of most embedded videos.</li><li>A bookmarklet to manipulate the URL of the page you're visiting.</li><li>A <a href='https://pinboard.in/howto/'>bookmarklet</a> to save the current page's URL to pinboard.in.</li></ol><p>For years, I thought I was restricted to only using bookmarklets in my desktop web browser. I hadn't effectively used mobile bookmarks before and thought that clicking them would be a huge pain.</p><p>It turns out, I was wrong! I recently learned that if you start typing a bookmark's title into your mobile browser's location bar, it will let you select the bookmark. This means you can easily execute a bookmarklet just by starting to type its name and clicking it when it appears. This \"search for bookmark in location bar\" technique works with at least Google Chrome and Brave running in Android.</p><p>Below are the two bookmarklets I use regularly on my phone. They exist to bypass paywalls.</p><p>This one prepends <code>http://archive.is/</code> to the current URL:</p><pre><code class=\"language-javascript\">javascript:&#40;function&#40;&#41; {window.location=&quot;http://archive.is/&quot;+window.location.toString&#40;&#41;;}&#40;&#41;&#41;\n</code></pre><p>This one changes <code>theatlantic.com</code> to <code>theatlantic.com.</code> (though it no longer gets around their paywall):</p><pre><code class=\"language-javascript\">javascript:&#40;function&#40;&#41; {window.location=window.location.href.replace&#40;/theatlantic.com/, 'theatlantic.com.'&#41;;}&#40;&#41;&#41;\n</code></pre><p>To get them onto my phone, I added them a bookmarks on my laptop's Chrome and synced them to my mobile phone. Once in my mobile Chrome, I edited the bookmark in mobile Chrome, copied the code, and pasted it into a bookmark in Brave.</p><p>I type three characters into my mobile browser's location bar before I can select either of these bookmarklets. That is quicker than editing the URLs by hand and has improved the experience of reading articles on my phone.</p>","title":"Bookmarklets on mobile are useful","author":{"name":"Jake McCrary"},"date_published":"2022-11-13T23:59:59+00:00"},{"id":"https://jakemccrary.com/blog/2022/01/02/reading-in-2021/index.html","url":"https://jakemccrary.com/blog/2022/01/02/reading-in-2021/index.html","content_text":"<p>At the beginning of every year, I reflect on books I've read in the previous year. I take a look at my records, fix errors, and think about reading goals for the upcoming year.</p><p>Here are links to my previous end-of-year reflections: <a href='/blog/2014/01/01/using-incanter-to-review-my-2013-reading/'>2013</a>, <a href='/blog/2015/01/08/reading-in-2014/'>2014</a>, <a href='/blog/2016/03/13/reading-in-2015/'>2015</a>, <a href='/blog/2017/01/04/reading-in-2016/'>2016</a>, <a href='/blog/2018/03/03/reading-in-2017/'>2017</a>, <a href='/blog/2019/01/21/reading-in-2018/'>2018</a>, <a href='/blog/2020/01/11/reading-in-2019/'>2019</a>, and <a href='/blog/2021/01/24/reading-in-2020/'>2020</a>.</p><p>I've continued to keep track of my reading using <a href='http://goodreads.com'>Goodreads</a>. My <a href='https://www.goodreads.com/user/show/3431614-jake-mccrary'>profile</a> has nearly the full list of the books I've read since 2010. <a href='https://www.goodreads.com/review/list/3431614-jake-mccrary?shelf=read_2021'>Here</a> is my 2021.</p><h2>2021 Goals</h2><p>Last year I wrote:</p><blockquote><p> I have quite a few unread books sitting on my virtual and physical bookshelf.  This feels like setting a really low-bar but this year I'd like to read some of these unread-but-owned books. </p></blockquote><blockquote><p> I'm also planning on reading at least one book on writing and one book on climbing.<br /> This goal is almost a subset of the above goal as I have books on both these topics sitting on my shelf. </p></blockquote><p>Did I achieve those goals? No.</p><p>Looking through my list of read books, I think only one of those a book I owned at the beginning of 2021. I did not read <i>some</i> already owned books; I read a single already owned book.</p><p>I did read a book on writing, George Saunders' <i>A Swim in a Pond in the Rain</i>, and multiple climbing books, <i>Rock Climbing Technique</i> by John Kettle and <i><a href='https://www.goodreads.com/book/show/57691814-rock-climbing-in-kentucky-s-red-river-gorge'>Rock Climbing in Kentucky's Red River Gorge</a></i> by James Maples.</p><p>Early in 2020, at the request of some readers of this site, I started a <a href='{{' title=site.subscribe_email }}>mailing list</a>. During 2020 I used this newsletter as a way to notify subscribers of new articles posted to this website and write up short blurbs on books I had finished. Except for a single email, I also didn't send out any updates to the newsletter.</p><p>This is partially because I didn't write many articles last year. I generally try to write about one article a month but I did not do that in 2021. We'll see if I pick back up this habit in 2022.</p><h2>Highlights</h2><p>Below are some highlights from 2021. The titles link to Goodreads.</p><p>I didn't write many reviews on Goodreads this year and did not write detailed reviews in this article. I'd encourage you to click the links and read reviews on Goodreads.</p><h3>Five-star books</h3><h4><a href='https://www.goodreads.com/book/show/44767458-dune'>Dune</a> by Frank Herbert</h4><p>This was my third time reading Dune. I read it in preparation for seeing the 2021 film.</p><p>I'm a huge fan of Dune but parts of it definitely haven't aged well. I think the story manages to be complex and have plenty of movement but somehow isn't overwhelming. I thought the film did a pretty good job of capturing that.</p><p>The first time I read Dune, I also made the very first <a href='https://jakemcc.gumroad.com/l/dune-dictionary'>Kindle Dune Dictionary</a>. If you are reading on a Kindle and haven't read the book before, I'd recommend purchasing the dictionary. I didn't find it useful  on my third time through the book but it made my first read through better.</p><h4><a href='https://www.goodreads.com/book/show/12621704-memory'>Memory</a> by Lois McMaster Bujold</h4><p>In August and September, I pretty much devoured the entire <a href='https://www.goodreads.com/series/98250-vorkosigan-saga-publication-order'>Vorkosigan Saga</a>. I read all these books pretty much back to back and can barely distinguish them.</p><p>I'd recommend the series. It was a fun series and there are quite a few books in it. For some reason, this book stood out and is the only one I gave five stars.</p><h4><a href='https://www.goodreads.com/book/show/39873472-a-memory-called-empire'>A Memory Called Empire</a> and <a href='https://www.goodreads.com/book/show/45154547-a-desolation-called-peace'>A Desolation Called Peace</a> by Arkady Martine</h4><p>These are two incredible books. Arkady Martine built a great world. Politics, aliens, and poetry all show up in these books and it is great.</p><p>Go read some reviews (perhaps <a href='https://www.goodreads.com/review/show/2754542016?book_show_action=true'>this</a> and <a href='https://www.goodreads.com/review/show/3361651782?book_show_action=true'>this</a>) and then go start this series.</p><h4><a href='https://www.goodreads.com/book/show/36075657-the-overstory'>The Overstory</a> by Richard Powers</h4><p>The book starts with what feels like a collection of short stories and grows into a story of struggle, triumph, and failure. I can't point to what made this book stand out to me but a I really enjoyed it. It might have had some moments that dragged a bit but I still loved it.</p><h4><a href='https://www.goodreads.com/book/show/55710260-this-is-how-you-lose-the-time-war'>This Is How You Lose the Time War</a> by Amal El-Mohtar</h4><p>I went into this book knowing nothing about it and found it beautiful. The writing is lyrical and the way the story is told worked really well.</p><p>The book isn't that long and I absolutely devoured it.</p><h4><a href='https://www.goodreads.com/book/show/55612579-zikora'>Zikora</a> by Chimamanda Ngozi Adichie</h4><p>This is a 35 page short story. Go spend the short time it takes to read it. And then go read the rest of Adichie's writing.</p><h4><a href='https://www.goodreads.com/book/show/53487237-a-swim-in-a-pond-in-the-rain'>A Swim in a Pond in the Rain: In Which Four Russians Give a Master Class on Writing, Reading, and Life</a> by George Saunders</h4><p>This book is fantastic. Generally, the format of the book is that you read a short story and then read George Saunders' thoughts about that story.</p><p>This book slightly changed how I think about stories.</p><h4><a href='https://www.goodreads.com/book/show/19635587-dept-of-speculation'>Dept. of Speculation</a> by Jenny Offill</h4><p>This is a relatively short, beautiful book. I experienced a full range of emotions while reading it.</p><h4><a href='https://www.goodreads.com/book/show/55614248-think-again'>Think Again: The Power of Knowing What You Don't Know</a> by Adam M. Grant</h4><p>A solid book on the benefits of rethinking your positions. A very short summary is that it is good to update your beliefs and be curious. There is little benefit to being wrong longer. Learn how to rejoice in correcting your beliefs and embrace updating your viewpoints.</p><p>There is a some overlap of concepts in this book and the book Moral Tribes. If you are also well-versed in cognitive biases, parts of this book will be a repeat.</p><h4><a href='https://www.goodreads.com/book/show/32605769-the-devops-handbook'>The DevOps Handbook: How to Create World-Class Agility, Reliability, and Security in Technology Organizations</a> by Gene Kim</h4><p>I think a second edition came out immediately after I finished reading the first edition. Hopefully the second edition has high quality updates as the original edition of this book is pretty solid. I've lived the vision promoted by this book and it is a good place to be.</p><h4><a href='https://www.goodreads.com/book/show/40526042-rock-climbing-technique'>Rock Climbing Technique: The Practical Guide to Movement Mastery</a> by John Kettle</h4><p>A short book full of specific drills that are intended to improve your skill in climbing. This book isn't about improving your strength, flexibility, or endurance. It is all about getting better at movement and paying attention to your movement patterns.</p><p>I've taken some of these drills and incorporated them into my climbing practice. I plan on digging back into this book and incorporating more of them.</p><h4><a href='https://www.goodreads.com/book/show/54965614-drug-use-for-grown-ups'>Drug Use for Grown-Ups: Chasing Liberty in the Land of Fear</a> by Carl L. Hart</h4><p>This book is a mix of the author's personal experience, policy, and science and makes the argument that drugs should be legal. Probably worth reading if you have any sort of reaction to that last sentence.</p><p>Reading some reviews on Goodreads gives a fairly balanced view of what this book is about. Even if I personally gave this book five stars, I find myself agreeing with a wide range of reviews by others.</p><h3>Other Highlights</h3><h4><a href='https://www.goodreads.com/book/show/40864002-a-psalm-for-the-wild-built'>A Psalm for the Wild-Built</a> by Becky Chambers</h4><p>A couple other reviews (<a href='https://www.goodreads.com/review/show/3567191782?book_show_action=true'>one</a>, <a href='https://www.goodreads.com/review/show/3762535675?book_show_action=true'>two</a>) described this book as comforting science fiction. I think that is a great description.</p><p>The world feels cozy. It is full of generally nice folks going about their lives and interacting with each other over tea. This main character in this book is non-binary and you get to hang out with them as they live their life. It feels like a nice place to be with reasonable folks and respect between humans, nature, and robots.</p><p>It is a relaxing read that feels like a gentle fable that muses on life and what it means to exist.</p><h4><a href='https://www.goodreads.com/book/show/57691814-rock-climbing-in-kentucky-s-red-river-gorge'>Rock Climbing in Kentucky's Red River Gorge</a> by James Maples</h4><p>This book has a very narrow audience. If you have heard about the Red River Gorge, rock climb, and are interested in the history of the area you should read this book.</p><p>I learned a lot about one of my favorite places to rock climb.</p><h4><a href='https://www.goodreads.com/book/show/56247202-crossroads'>Crossroads</a> by Jonathan Franzen</h4><p>There is a really good chance I should have given this book five stars. It was great. This book tells the story of the Hildebrandt family through interweaving perspectives of the family's members. The characters are complex and the perspectives are interesting. I hope Franzen can continue to deliver this level of story in the sequels.</p><p>This <a href='https://www.goodreads.com/review/show/4264230041?book_show_action=true'>goodreads review</a> does a great job of selling the book.</p><h4><a href='https://www.goodreads.com/book/show/38466356-the-art-of-gathering'>The Art of Gathering</a> by Priya Parker</h4><p>This book does a wonderful job of describing what makes a gathering great. It was a bit hopeful to read this book early in 2021.</p><h4><a href='https://www.goodreads.com/book/show/32758901-all-systems-red'>All Systems Red</a> by Martha Wells</h4><p>A fun novella told from the perspective of an android.</p><h4><a href='https://www.goodreads.com/book/show/54250259-klara-and-the-sun'>Klara and the Sun</a> by Kazuo Ishiguro</h4><p>This book was beautiful. It manages to feel slightly off and this is completely appropriate given the narrator. This leads to some really amusing bits of writing.</p><h2>Stats</h2><p>I thought I had read less this year than I had in recent years but I was wrong. I read 57 books and 19,564 pages in 2021.</p><pre><code class=\"language-org\">| Year | # of Pages | # of Books |\n|------+------------+------------|\n| 2021 |      19564 |         57 |\n| 2020 |      12093 |         43 |\n| 2019 |      15994 |         42 |\n| 2018 |      13538 |         36 |\n| 2017 |      18317 |         48 |\n| 2016 |      22790 |         59 |\n| 2015 |      21689 |         51 |\n| 2014 |      24340 |         71 |\n| 2013 |      19815 |         60 |\n| 2012 |      14208 |         44 |\n| 2011 |       9179 |         19 |\n| 2010 |      14667 |         46 |\n</code></pre><p>Here is a breakdown of books finished by month. I can tell from looking at August and September that I started and finished the Vorkosigan series during those months.</p><p><img src=\"/images/reading-by-month-2021.png\" alt=\"Book and pages count by month\" title=\"Number of books and pages for each month\" /></p><p>Electronic books continue to be the dominant format.</p><pre><code class=\"language-org\">|           | 2021 | 2020 | 2019 | 2018 | 2017 | 2016 | 2015 |\n|-----------+------+------+------+------+------+------+------|\n| audiobook |    0 |    1 |    0 |    0 |    0 |    0 |    0 |\n| ebook     |   56 |   41 |   43 |   37 |   37 |   56 |   47 |\n| hardcover |    0 |    0 |    1 |    1 |    7 |    0 |    1 |\n| paperback |    1 |    1 |    7 |    5 |    5 |    3 |    3 |\n</code></pre><p>Fiction dominated this year.</p><pre><code class=\"language-org\">|                           |   2021 |   2020 |   2019 |   2018 |\n|---------------------------+--------+--------+--------+--------|\n| fiction                   |     46 |     26 |     28 |     29 |\n| non-fiction               |     11 |     17 |     23 |     14 |\n| fiction:non-fiction ratio | 4.18:1 | 1.53:1 | 1.22:1 | 2.07:1 |\n\n</code></pre><p>Here is the star rating distribution.</p><pre><code class=\"language-org\">|             | 2 stars | 3 stars | 4 stars | 5 stars |\n|-------------+---------+---------+---------+---------|\n| fiction     |       2 |      17 |      19 |       8 |\n| non-fiction |       1 |       2 |       3 |       5 |\n</code></pre><h2>2022 goals</h2><p>I used to be pretty good at capturing some thoughts upon completion of a book. I haven't been doing a great job of that. I'd like to do better this year.</p><p>We'll see what that entails but it might take the form of having more discipline around sending out some thoughts in the <a href='{{' title=site.subscribe_email }}>newsletter</a>.</p><p>Have any book recommendations? Please shoot me an email or leave a comment.</p>","title":"Reading in 2021","author":{"name":"Jake McCrary"},"date_published":"2022-01-02T23:59:59+00:00"},{"id":"https://jakemccrary.com/blog/2021/09/11/tests-can-act-as-living-documentation/index.html","url":"https://jakemccrary.com/blog/2021/09/11/tests-can-act-as-living-documentation/index.html","content_text":"<p>Tests can serve many purposes.</p><p>You might write tests as a way of driving the design of your software. Other tests might be written in response to a discovered bug and, if written first, those tests you know when you've fixed the bug and act as guardrails preventing the reintroduction of that bug. Tests can also be used to confirm you haven't changed behavior while refactoring.</p><p>Tests can also be used as documentation. Unlike non-executable documentation, tests will always match the implementation's behavior.</p><p>An example in a comment or other documentation deserves to be in a test. Take the following sketch of a Clojure function:</p><pre><code class=\"language-clojure\">&#40;defn confobulate\n  &quot;Takes a string and transforms it to the confobulated form. Examples:\n  - \\&quot;alice\\&quot; -&gt; \\&quot;EcilA\\&quot;\n  - \\&quot;//yolo1\\&quot; -&gt; \\&quot;//oneOloY\\&quot;\n  &quot;\n  &#91;s&#93;\n  &#40;-&gt; s\n      ;; insert some work here, not going to implement this\n      &#41;&#41;\n</code></pre><p>The docstring has examples in it to aid humans in understanding its behavior. These examples are useful! But they stop being useful and start being dangerous when they stop being accurate.</p><p>We can use unit tests to keep examples like this correct. You can write comments near the assertions letting future readers know about the documentation that needs to be updated if behavior changes.</p><pre><code class=\"language-clojure\">&#40;deftest confobulate-should-ignore-slashes\n  ;; If this assertion changes the docstring needs to be updated\n  &#40;is &#40;= &quot;//oneOloY&quot; &#40;confobulate &quot;//yolo1&quot;&#41;&#41;&#41;&#41;\n\n&#40;deftest confobulate-reverses-and-capitalizes\n  ;; If this assertion changes the docstring needs to be updated\n  &#40;is &#40;= &quot;alice&quot; &#40;confobulate &quot;EcilA&quot;&#41;&#41;&#41;&#41;\n</code></pre><p>Any example in a comment or other non-executable documentation should be an assertion in a unit test. You've already taken the time to document the behavior; take the time to figure out how to document it in a way that will fail if the behavior changes.</p>","title":"Tests are living documentation","author":{"name":"Jake McCrary"},"date_published":"2021-09-11T23:59:59+00:00"},{"id":"https://jakemccrary.com/blog/2021/08/07/improve-your-tests-by-picking-better-constants/index.html","url":"https://jakemccrary.com/blog/2021/08/07/improve-your-tests-by-picking-better-constants/index.html","content_text":"<p>The constants you use in unit tests matter. Like test and variable names, they can improve the readability of your code and make it easier to understand test failures.</p><p>Imagine the following.</p><p>A new developer joins your team and asks a question about how the code resolves config values. You are unsure of the details so you pair up with the new teammate to dig into the code.</p><p>You know the codebase uses a relatively simple key-value pair concept for configuration. It reads keys and values from a known files and, based on some rules, either ignores or overrides values when keys are duplicated across files.</p><p><code>config-value</code> is the function that looks up the value for a particular configuration key, represented as a <code>string</code>. This function takes three arguments: an in-memory representation of the configuration files, the key to lookup, and the mode to operate in. You know the mode is important in influencing how config resolution works but you don't remember the details.</p><p>Luckily for you and your pair, the codebase has plenty of unit tests. The two of you dive in and look at some tests, hoping to understand how config resolution works.</p><pre><code class=\"language-clojure\">&#40;def config {&quot;scratch.conf&quot; {&quot;a&quot; &quot;1&quot;}\n\n             &quot;development.conf&quot; {&quot;a&quot; &quot;2&quot;\n                                 &quot;b&quot; &quot;2&quot;}\n\n             &quot;application.conf&quot; {&quot;a&quot; &quot;3&quot;\n                                 &quot;b&quot; &quot;3&quot;\n                                 &quot;c&quot; &quot;3&quot;}}&#41;\n\n&#40;deftest handles-overrides-in-dev-mode\n  &#40;is &#40;= &quot;1&quot; &#40;config-value config &quot;a&quot; :dev&#41;&#41;&#41;\n  &#40;is &#40;= &quot;2&quot; &#40;config-value config &quot;b&quot; :dev&#41;&#41;&#41;\n  &#40;is &#40;= &quot;3&quot; &#40;config-value config &quot;c&quot; :dev&#41;&#41;&#41;&#41;\n\n&#40;deftest handles-overrides-in-prod-mode\n  &#40;is &#40;= &quot;3&quot; &#40;config-value config &quot;a&quot; :prod&#41;&#41;&#41;\n  &#40;is &#40;= &quot;3&quot; &#40;config-value config &quot;b&quot; :prod&#41;&#41;&#41;\n  &#40;is &#40;= &quot;3&quot; &#40;config-value config &quot;c&quot; :prod&#41;&#41;&#41;&#41;\n</code></pre><p>It is great that these tests exist but they could be clearer. They aren't terrible but you have to work a bit understand what is happening.</p><p>When reading <code>&#40;= &quot;2&quot; &#40;config-value config &quot;b&quot; :dev&#41;&#41;</code>, what does <code>&quot;2&quot;</code> represent? What does <code>&quot;b&quot;</code> mean? You have to either keep the value of <code>config</code> in your brain or keep glancing up in the file to recall what it is.</p><p>This isn't great. This adds cognitive overhead that doesn't need to be there.</p><p>There are a few ways these tests could be improved One way is through using better constants. Let's do a quick rewrite.</p><pre><code class=\"language-clojure\">&#40;def config {&quot;scratch.conf&quot; {&quot;in dev+app+scratch&quot; &quot;from scratch&quot;}\n\n             &quot;development.conf&quot; {&quot;in dev+app+scratch&quot; &quot;from development&quot;\n                                 &quot;in dev+app&quot; &quot;from development&quot;}\n\n             &quot;application.conf&quot; {&quot;in dev+app+scratch&quot; &quot;from application&quot;\n                                 &quot;in dev+app&quot; &quot;from application&quot;\n                                 &quot;in app&quot; &quot;from application&quot;}}&#41;\n\n&#40;deftest handles-overrides-in-dev-mode\n  &#40;is &#40;= &quot;from scratch&quot; &#40;config-value config &quot;in dev+app+scratch&quot; :dev&#41;&#41;&#41;\n  &#40;is &#40;= &quot;from development&quot; &#40;config-value config &quot;in dev+app&quot; :dev&#41;&#41;&#41;\n  &#40;is &#40;= &quot;from application&quot; &#40;config-value config &quot;in app&quot; :dev&#41;&#41;&#41;&#41;\n\n&#40;deftest handles-overrides-in-prod-mode\n  &#40;is &#40;= &quot;from application&quot; &#40;config-value config &quot;in dev+app+scratch&quot; :prod&#41;&#41;&#41;\n  &#40;is &#40;= &quot;from application&quot; &#40;config-value config &quot;in dev+app&quot; :prod&#41;&#41;&#41;\n  &#40;is &#40;= &quot;from application&quot; &#40;config-value config &quot;in app&quot; :prod&#41;&#41;&#41;&#41;\n</code></pre><p>These are the same tests but with different constants. Those constants make a huge difference. This change has made the tests more legible. You no longer need to remember the value of <code>config</code> or keep glancing up at it to understand the assertions in a test.</p><p>You can read <code>&#40;= &quot;from development&quot; &#40;config-value config &quot;in dev+app&quot; :dev&#41;&#41;</code> and have a pretty solid idea that you are looking up a key found in both <code>development.conf</code> and <code>application.conf</code> and while in <code>:dev</code> mode expect the value from <code>development.conf</code>.</p><p>The new constants provide clues about what the test expects. You can read and understand the assertions without keeping much state in your head.</p><p>This increases the legibility of the tests and is useful when a test fails. Which of the following is clearer?</p><pre><code>FAIL in &#40;handles-overrides-in-dev-mode&#41;\nexpected: &quot;2&quot;\n  actual: &quot;3&quot;\n    diff: - &quot;2&quot;\n          + &quot;3&quot;\n</code></pre><pre><code>FAIL in &#40;handles-overrides-in-dev-mode&#41;\nexpected: &quot;from development&quot;\n  actual: &quot;from application&quot;\n    diff: - &quot;from development&quot;\n          + &quot;from application&quot;\n</code></pre><p>The second one is clearer. You can read it and form a hypothesis about what might be broken.</p><p>Well chosen constants reduce the state a person needs to keep in their head. This makes tests easier to understand. Good constants also make test failures easier to understand. Just like good variable names, good constants increase the readability of our tests.</p><p>It is well worth placing some extra thought into the constants found in your tests.</p>","title":"Improve your tests by picking better constants","author":{"name":"Jake McCrary"},"date_published":"2021-08-07T23:59:59+00:00"},{"id":"https://jakemccrary.com/blog/2021/01/24/reading-in-2020/index.html","url":"https://jakemccrary.com/blog/2021/01/24/reading-in-2020/index.html","content_text":"<p>At the beginning of every year I reflect on my reading from the previous year. I take a look at my records, fix errors, and think about reading goals for the upcoming year.</p><p>Here are links to my previous end-of-year reflections: <a href='/blog/2014/01/01/using-incanter-to-review-my-2013-reading/'>2013</a>, <a href='/blog/2015/01/08/reading-in-2014/'>2014</a>, <a href='/blog/2016/03/13/reading-in-2015/'>2015</a>, <a href='/blog/2017/01/04/reading-in-2016/'>2016</a>, <a href='/blog/2018/03/03/reading-in-2017/'>2017</a>, <a href='/blog/2019/01/21/reading-in-2018/'>2018</a>, and <a href='/blog/2020/01/11/reading-in-2019/'>2019</a>.</p><p>I've continued to keep track of my reading using <a href='http://goodreads.com'>Goodreads</a>. My <a href='https://www.goodreads.com/user/show/3431614-jake-mccrary'>profile</a> has nearly the full list of the books I've read since 2010. <a href='https://www.goodreads.com/review/list/3431614-jake-mccrary?shelf=read_2020'>Here</a> is my 2020.</p><h2>2020 Goals</h2><p>Last year I wrote:</p><blockquote><p> I was encouraged by how many non-fiction books I read this year and how many of them ended up earning a five star rating. I'd like to continue that trend of reading high-quality non-fiction books. </p></blockquote><blockquote><p> I've also been reading a lot of books but I haven't always been the best at trying to consciously apply the lessons from those books. I'm going to try to improve that this year. </p></blockquote><blockquote><p> Those are pretty fuzzy goals but I'm alright with that. </p></blockquote><p>I'll come back at the end of this article and reflect on if I hit it or not.</p><h2>Highlights</h2><p>Here are my five star books from 2020. The titles are Amazon.</p><p>If I wrote a review on Goodreads then the <code>my review</code> link will take you there. In the last couple of years, I've been writing fewer reviews on Goodreads than in the past so many books do not have a review there.</p><p>If you're missing these reviews, I have started sending out an email every month or two and it frequently includes small reviews of what I've read since the previous email. You can subscribe to that <a href='{{' title=site.subscribe_email }}>here</a>.</p><p>Here are the 2020 five star books:</p><ul><li><a href='https://www.amazon.com/Hard-Truth-Simple-Become-Climber/dp/1734103604'>The Hard Truth: Simple Ways to Become a Better Climber</a> by Kris Hampton (<a href='https://www.goodreads.com/review/show/3315020265'>my review</a>)</li><li><a href='https://www.amazon.com/Body-Keeps-Score-Healing-Trauma/dp/0143127748'>The Body Keeps the Score: Brain, Mind, and Body in the Healing of Trauma</a> by Bessel A. van der Kolk</li><li><a href='https://www.amazon.com/Come-You-Are-Surprising-Transform/dp/1476762090'>Come as You Are: The Surprising New Science that Will Transform Your Sex Life</a> by Emily Nagoski</li><li><a href='https://www.amazon.com/Change-Your-Mind-Consciousness-Transcendence/dp/0735224153'>How to Change Your Mind: What the New Science of Psychedelics Teaches Us About Consciousness, Dying, Addiction, Depression, and Transcendence</a> by Michael Pollan</li><li><a href='https://www.amazon.com/Longer-Talking-White-People-About-ebook/dp/B06WWPX2YF'>Why I’m No Longer Talking to White People About Race</a> by Reni Eddo-Lodge</li><li><a href='https://www.amazon.com/Ijeawele-Feminist-Manifesto-Fifteen-Suggestions/dp/0525434801'>Dear Ijeawele; or, A Feminist Manifesto in Fifteen Suggestions</a> by Chimamanda Ngozi Adichie</li><li><a href='https://www.amazon.com/Americanah-Ala-Notable-Books-Adults-ebook/dp/B00A9ET4MC'>Americanah</a> by Chimamanda Ngozi Adichie</li><li><a href='https://www.amazon.com/Half-Yellow-Chimamanda-Ngozi-Adichie/dp/1400095204'>Half of a Yellow Sun</a> by Chimamanda Ngozi Adichie</li><li><a href='https://www.amazon.com/Diamond-Age-Illustrated-Primer-Spectra-ebook/dp/B000FBJCKI'>The Diamond Age</a> by Neal Stephenson (<a href='https://www.goodreads.com/review/show/94072683'>my review</a>)</li><li>Parable of the Sower (Earthseed, #1) by Octavia E. Butler</li><li><a href='https://www.amazon.com/Parable-Sower-Octavia-Butler/dp/1538732181'>Parable of the Talents (Earthseed, #2)</a> by Octavia E. Butler</li></ul><h4>The Hard Truth: Simple Ways to Become a Better Climber by Kris Hampton</h4><p>This is an excellent dose of wisdom about climbing and improving your performance. It does this through suggestions of how to change your mental relationship with climbing. Improving is about putting in the work, reflecting, and trying hard.</p><h4>The Body Keeps the Score: Brain, Mind, and Body in the Healing of Trauma by Bessel A. van der Kolk</h4><p>I really enjoyed this book and made hundreds of highlights while reading it on my Kindle. I'd suggest reading reviews on <a href='https://www.goodreads.com/book/show/22268254-the-body-keeps-the-score'>Goodreads</a> and seeing if it is something that would be interesting for you.</p><h4>Come as You Are: The Surprising New Science that Will Transform Your Sex Life by Emily Nagoski</h4><p>This was a good book that, unlike what the subtitle claims, did not transform my sex life. But I didn't go into it expecting that. I'm not the main audience for this book but still got some value from it. I particularly enjoyed the parts that talked about stress, responses to stress, and emotional systems.</p><h4>How to Change Your Mind by Michael Pollan</h4><p>This book is about psychedelics, such as LSD and psilocybin. It combines the history of these substances, old and new research being done with them, and sort of a travelogue of Michael Pollan's growing experience with these substances.</p><h4>Why I’m No Longer Talking to White People About Race by Reni Eddo-Lodge</h4><p>I'll just link to a <a href='https://www.goodreads.com/review/show/2697985490?book_show_action=false'>friend's review</a> of this book.</p><h4>The author Chimamanda Ngozi Adichie</h4><p>I devoured all of her writing this year, both fiction and non-fiction, and the highlights are above. None of her writing earned less than four stars.</p><p>Between starting and finishing writing this article, I learned she published a new short story, <i>Zikora</i>, and immediately read it. It was pretty great.</p><p>One of the reasons I enjoy reading fiction is that it provides a window into the experiences of others. Chimamanda Ngozi Adichie's writing does exactly this and does it with beautiful prose and compelling stories.</p><h4>The Diamond Age by Neal Stephenson</h4><p>This was a reread of the first Neal Stephenson book I read. I wanted to reread this book as I had been recommending it as a relatively short introduction to Neal Stephenson's writing but I was second guessing how much I enjoyed it.</p><p>I was wrong to second guess that. This story was still great the second time through. This book covers so much and feels prescient despite being read 25 years after it was originally published (February 1995).</p><h4>Parable of the Sower and Parable of the Talents by Octavia E. Butler</h4><p>Octavia Butler builds a new religion in this series and, honestly, that religion is tempting. These are fantastic science fiction reads that explore human connections and what we could be as a species.</p><h3>Other notable reads</h3><p>These are books that for some reason I didn't give five stars but I still think they are worth recommending. All links below are to Goodreads.</p><h4><a href='https://www.goodreads.com/book/show/52702097-piranesi'>Piranesi</a> by Susanna Clark</h4><p>This book was weird and I enjoyed it. You follow a character that lives in a weird, infinite building made of corridors lined with statues.</p><h4><a href='https://www.goodreads.com/book/show/52655150-why-we-re-polarized'>Why We're Polarized</a> by Ezra Klein</h4><p>This covers the American political system and how we got to our modern form with deeply polarized parties. I thought it was a pretty interesting read.</p><h4><a href='https://www.goodreads.com/book/show/6656720-the-will-to-change'>The Will to Change: Men, Masculinity, and Love</a> by bell hooks</h4><p>I read this at the very beginning of 2020 and think that everyone should read it. I highlighted a ton of passages and plan on going back and reviewing those passages.</p><h4><a href='https://www.goodreads.com/book/show/52355815-you-re-not-listening'>You're Not Listening: What You're Missing and Why It Matters</a> by Kate Murphy</h4><p>I read this at the very beginning of 2020 and highlighted a ton of passages. The book is about listening and how we do a bad job at it. It includes suggestions about how to get better.</p><p>Pair this book with <a href='https://www.goodreads.com/book/show/35522033-i-hear-you'>I hear you</a>, a book I read last year, and you'll have the tools to become a better listener.</p><h4><a href='https://www.goodreads.com/book/show/18886790-diaspora'>Diaspora</a> by Greg Egan</h4><p>This was a stupendous science fiction read. It takes you on a wild journey into a far future where sentient beings can exist in software.</p><p>This was very close to receiving five stars but I kept getting bogged down in some of the explanations. I know this is why some folks enjoy hard science fiction but that isn't why I'm reading these stories. This book delivers an interesting, complex, and very speculative far future. If the blurb sounds interesting to you and you're willing to put up some with advanced theoretical (real? fake? I don't know) physics then pick this book up.</p><h2>Stats</h2><p>I read 43 books and 12,093 pages in 2020. The data also doesn't capture three books that I've started but have yet to finish.</p><pre><code class=\"language-org\">| Year | # of Pages | # of Books |\n|------+------------+------------|\n| 2020 |      12093 |         43 |\n| 2019 |      15994 |         42 |\n| 2018 |      13538 |         36 |\n| 2017 |      18317 |         48 |\n| 2016 |      22790 |         59 |\n| 2015 |      21689 |         51 |\n| 2014 |      24340 |         71 |\n| 2013 |      19815 |         60 |\n| 2012 |      14208 |         44 |\n| 2011 |       9179 |         19 |\n| 2010 |      14667 |         46 |\n</code></pre><p>Last year marks a decade of me tracking my reading and it was the second lowest page count in that decade. For many reasons 2020 was an unforgettable year and one where I spent a lot of time at home.</p><p>I would have thought that would have lead to a large number of pages read but I think much of my time ended up being taken up by non-book reading activities. For better or worse (probably worse), a lot of my time was spent reading articles about the on-going global pandemic, the USA election, and the other non-stop news cycle of 2020. Between that and the increase in newsletters and podcasts I'm consuming, I'm not that surprised my book reading has taken a hit.</p><p>Here is a breakdown of books finished by month.</p><p><img src=\"/images/reading-2020/books-by-month-2020.png\" alt=\"Book and pages count by month\" title=\"Number of books and pages for each month\" /></p><p>This graph tells a slightly different story than the one I presented above. I did not finish many pages in January through March, the pre-pandemic time period in the United States.</p><p>Those months I was extremely dedicated to training for climbing and was starting a new relationship. I'm very happy both of those took up my non-working hours during those months.</p><p>I was still commuting to an office from January till mid-March and would have expected more pages finished on the train. I'll blame podcasts for that as this year I did start listening to those while commuting, since I can enjoy those while walking to and from the train as well.</p><p>The number of books read in February is high because I read a short story collection where each story was published individually on Amazon.</p><p>Unsurprisingly, electronic books continue to be the dominant format.</p><pre><code class=\"language-org\">|           | 2020 | 2019 | 2018 | 2017 | 2016 | 2015 |\n|-----------+------+------+------+------+------+------|\n| audiobook |    1 |    0 |    0 |    0 |    0 |    0 |\n| ebook     |   41 |   43 |   37 |   37 |   56 |   47 |\n| hardcover |    0 |    1 |    1 |    7 |    0 |    1 |\n| paperback |    1 |    7 |    5 |    5 |    3 |    3 |\n</code></pre><p>Below is the breakdown of fiction vs non-fiction books. Fiction started to regain its dominance after having non-fiction catch up in 2019.</p><pre><code class=\"language-org\">|                           |   2020 |   2019 |   2018 |\n|---------------------------+--------+--------+--------|\n| fiction                   |     26 |     28 |     29 |\n| non-fiction               |     17 |     23 |     14 |\n| fiction:non-fiction ratio | 1.53:1 | 1.22:1 | 2.07:1 |\n\n</code></pre><p>Here is the star rating distribution.</p><pre><code class=\"language-org\">|             | 2 stars | 3 stars | 4 stars | 5 stars |\n|-------------+---------+---------+---------+---------|\n| fiction     |       1 |       8 |      12 |       5 |\n| non-fiction |       0 |       4 |       7 |       6 |\n</code></pre><h2>Did I hit my 2020 goals?</h2><p>I succeeded in reading a solid number of non-fiction books that earned a high rating. I read fewer non-fiction books than fiction but managed to have more 5 star ratings. I'm going to count this as successfully hitting the non-fiction part of my 2020 goal.</p><p>Did I get better at applying the lessons from books? Not at all and I barely even tried to do so. Definite failure here.</p><h2>2021 goals</h2><p>I have quite a few unread books sitting on my virtual and physical bookshelf. This feels like setting a really low-bar but this year I'd like to read some of these unread-but-owned books.</p><p>I'm also planning on reading at least one book on writing and one book on climbing. This goal is almost a subset of the above goal as I have books on both these topics sitting on my shelf.</p><p>It is interesting to have been collecting this data for a decade now. I haven't done much in the way around looking at multi-year trends but I think it might be interesting to do so.</p><p>If you have a book recommendation, feel free to reach out and contact me.</p>","title":"Reading in 2020","author":{"name":"Jake McCrary"},"date_published":"2021-01-24T23:59:59+00:00"},{"id":"https://jakemccrary.com/blog/2020/12/30/speeding-up-magit-with-the-native-comp-branch-of-emacs/index.html","url":"https://jakemccrary.com/blog/2020/12/30/speeding-up-magit-with-the-native-comp-branch-of-emacs/index.html","content_text":"<p>In my last article, <a href='/blog/2020/11/14/speeding-up-magit/'>Speeding up Magit</a>, I showed how removing elements from Magit's status buffer drastically reduces the time it takes to refresh this buffer when working in a large repository (from 4 seconds to around 0.348 seconds). In a <a href='https://www.reddit.com/r/emacs/comments/k3xfa1/speeding_up_magit/ge5o0e0/?utm_source=reddit&utm_medium=web2x&context=3'>comment on r/emacs</a>, someone wondered if the <code>native-comp</code> feature of Emacs might improve the Magit status refresh time.</p><p>This reddit thread was the first time I had heard of the <code>native-comp</code> feature. This feature lives on the <code>feature/native-comp</code> branch of the Emacs repository and it compiles Elisp code into native code. Many users have reported noticeable speed improvements using it. The <a href='http://akrl.sdf.org/gccemacs.html'>official development log</a> and <a href='https://www.emacswiki.org/emacs/GccEmacs'>Emacs Wiki</a> have more information about it.</p><p>I'll provide more information about getting <code>native-comp</code> working on macOS after I answer the Magit speed question.</p><h2>How did it change refresh times of the Magit status buffer?</h2><p>The quick answer is that running Emacs with <code>native-comp</code> improved the refresh times of the Magit status buffer. Below is a table of the various times.</p><pre><code>| Experiment                              | magit-status refresh time |\n|-----------------------------------------+---------------------------|\n| full magit-status with native-comp      | 3.152 seconds             |\n| full magit-status without native-comp   | 4.003 seconds             |\n| magit-status with many sections removed | 0.348 seconds             |\n</code></pre><p>Using <code>native-comp</code>, we've cut off about 0.85 seconds. That is a pretty solid improvement. Even still, that isn't fast enough for how often I use Magit so I'll be sticking with my <a href='/blog/2020/11/14/speeding-up-magit/'>Magit setup</a> with many sections removed.</p><p>As a caveat, the timing with <code>native-comp</code> also includes upgrading Emacs from <code>26.3</code> to <code>28.0.50</code> (so I could have <code>native-comp</code>) and Magit from <code>20201111.1436</code> to <code>20201212.929</code>. As a result, the comparison to <code>full magit-status without native-comp</code> isn't entirely fair as multiple variables have changed. The comparison to time with sections removed is fair as I'm still using that setup (but with native-comp) and the timing is pretty much the same.</p><h2>Getting <code>native-comp</code> on macOS</h2><p>To enable <code>native-comp</code> you need to build Emacs from source. I've done this before on Linux systems but this was the first time I've done this on macOS.</p><p>When browsing reddit, I found the <a href='https://github.com/jimeh/build-emacs-for-macos'>build-emacs-for-macos</a> project which has some helpful instructions for doing this. I followed the instructions from the readme and picked the latest known good commit from <a href='https://github.com/jimeh/build-emacs-for-macos/issues/6'>this issue</a> (at the time I did this <code>be907b0ba82c2a65e0468d50653cae8a7cf5f16b</code>). I then updated my <a href='https://github.com/jakemcc/emacs.d/commit/72cf37a497b72b8990956395e2eaa87285ea7c81'>init.el</a> based on instructions from in the <code>build-emacs-for-macos</code> project.</p><p>I haven't had any issues since switching to this very new Emacs. I don't have numbers to back this up but it does feel faster.</p><h2>Recommendation</h2><p>I'd recommend giving the <code>native-comp</code> feature of Emacs a shot. It wasn't terribly challenging to get setup and it is nice to get a glimpse of what the future of Emacs might be. That future is a bit snappier.</p>","title":"Speeding up Magit with the native-comp branch of Emacs","author":{"name":"Jake McCrary"},"date_published":"2020-12-30T23:59:59+00:00"},{"id":"https://jakemccrary.com/blog/2020/11/14/speeding-up-magit/index.html","url":"https://jakemccrary.com/blog/2020/11/14/speeding-up-magit/index.html","content_text":"<p><a href='https://github.com/magit/magit'>Magit</a> is a great Emacs tool and by far my favorite way of interacting with git repositories. I use Magit nearly every day.</p><p>Unfortunately, refreshing the <code>magit-status</code> buffer is sluggish when you are working in a large repository.</p><p>A few months ago, I became sick of waiting and investigated how to speed up refreshing the status buffer. After doing some research, I learned about the <code>magit-refresh-verbose</code> variable.</p><p>Setting <code>magit-refresh-verbose</code> to true causes Magit to print some very useful output to your <code>&#42;Messages&#42;</code> buffer. This output shows how many seconds each step of <code>magit-status</code> takes.</p><p>Here is the output for the large repo that caused me to look into this.</p><pre><code>Refreshing buffer ‘magit: example-repo’...\n  magit-insert-error-header                          1e-06\n  magit-insert-diff-filter-header                    2.3e-05\n  magit-insert-head-branch-header                    0.026227\n  magit-insert-upstream-branch-header                0.014285\n  magit-insert-push-branch-header                    0.005662\n  magit-insert-tags-header                           1.7119309999999999\n  magit-insert-status-headers                        1.767466\n  magit-insert-merge-log                             0.005947\n  magit-insert-rebase-sequence                       0.000115\n  magit-insert-am-sequence                           5.1e-05\n  magit-insert-sequencer-sequence                    0.000105\n  magit-insert-bisect-output                         5.3e-05\n  magit-insert-bisect-rest                           1.1e-05\n  magit-insert-bisect-log                            1e-05\n  magit-insert-untracked-files                       0.259485\n  magit-insert-unstaged-changes                      0.031528\n  magit-insert-staged-changes                        0.017763\n  magit-insert-stashes                               0.028514\n  magit-insert-unpushed-to-pushremote                0.911193\n  magit-insert-unpushed-to-upstream-or-recent        0.497709\n  magit-insert-unpulled-from-pushremote              7.2e-05\n  magit-insert-unpulled-from-upstream                0.446168\nRefreshing buffer ‘magit: example-repo’...done &#40;4.003s&#41;\n</code></pre><p>The total time is found in the last line and we can see it took four seconds. Four seconds is an incredibly long time to wait before interacting with Magit.</p><p>You can change how much work Magit does by removing functions from the <code>magit-status-sections-hook</code> with <code>remove-hook</code>. I looked at the timings and and tried removing anything I decided was slow and something I didn't think I'd miss. For me, that list includes <code>magit-insert-tags-header</code>, <code>magit-insert-status-headers</code>, <code>magit-insert-unpushed-to-pushremote</code>, <code>magit-insert-unpushed-to-upstream-or-recent</code>, and <code>magit-insert-unpulled-from-upstream</code>. I also removed <code>magit-insert-unpulled-from-pushremote</code>.</p><p>You remove a function from a hook by adding elisp similar to <code>&#40;remove-hook 'magit-status-sections-hook 'magit-insert-tags-header&#41;</code> to your Emacs configuration.</p><p>I use <a href='https://github.com/jwiegley/use-package'>use-package</a> to configure mine and below is what my <code>magit</code> section looks like.</p><p>Lines 20-25 remove the hooks. I also hard-code <code>magit-git-executable</code> to be the full path of the <code>git</code> executable on line 5 because folks said this made a difference on macOS.</p><pre><code class=\"language-lisp\">&#40;use-package magit\n  :ensure t\n  :bind &#40;&quot;C-c g&quot; . magit-status&#41;\n  :custom\n  &#40;magit-git-executable &quot;/usr/local/bin/git&quot;&#41;\n  :init\n  &#40;use-package with-editor :ensure t&#41;\n\n  ;; Have magit-status go full screen and quit to previous\n  ;; configuration.  Taken from\n  ;; http://whattheemacsd.com/setup-magit.el-01.html#comment-748135498\n  ;; and http://irreal.org/blog/?p=2253\n  &#40;defadvice magit-status &#40;around magit-fullscreen activate&#41;\n    &#40;window-configuration-to-register :magit-fullscreen&#41;\n    ad-do-it\n    &#40;delete-other-windows&#41;&#41;\n  &#40;defadvice magit-quit-window &#40;after magit-restore-screen activate&#41;\n    &#40;jump-to-register :magit-fullscreen&#41;&#41;\n  :config\n  &#40;remove-hook 'magit-status-sections-hook 'magit-insert-tags-header&#41;\n  &#40;remove-hook 'magit-status-sections-hook 'magit-insert-status-headers&#41;\n  &#40;remove-hook 'magit-status-sections-hook 'magit-insert-unpushed-to-pushremote&#41;\n  &#40;remove-hook 'magit-status-sections-hook 'magit-insert-unpulled-from-pushremote&#41;\n  &#40;remove-hook 'magit-status-sections-hook 'magit-insert-unpulled-from-upstream&#41;\n  &#40;remove-hook 'magit-status-sections-hook 'magit-insert-unpushed-to-upstream-or-recent&#41;&#41;\n</code></pre><p>After this change, my <code>magit-status</code> buffer refreshes in under half a second.</p><pre><code>Refreshing buffer ‘magit: example-repo’...\n  magit-insert-merge-log                             0.005771\n  magit-insert-rebase-sequence                       0.000118\n  magit-insert-am-sequence                           5.3e-05\n  magit-insert-sequencer-sequence                    0.0001\n  magit-insert-bisect-output                         5.5e-05\n  magit-insert-bisect-rest                           1.1e-05\n  magit-insert-bisect-log                            1.1e-05\n  magit-insert-untracked-files                       0.247723\n  magit-insert-unstaged-changes                      0.024989\n  magit-insert-staged-changes                        0.018397\n  magit-insert-stashes                               0.026055\nRefreshing buffer ‘magit: example-repo’...done &#40;0.348s&#41;\n</code></pre><p>What did I lose from the <code>magit-status</code> buffer as a result of these changes? Here is screenshot of the original buffer.</p><p><img src=\"/images/magit-speed/magit-before.png\" alt=\"Buffer before changes\" /></p><p>And here is the buffer after.</p><p><img src=\"/images/magit-speed/magit-after.png\" alt=\"Buffer after changes\" /></p><p>The difference is drastic<a href='#fn-1' id='fnref1'><sup>1</sup></a>. And so is the speed difference.</p><p>The increased speed is worth losing the additional information. I interact with <code>git</code> very often and much prefer using Magit to do so. Before these changes, I found myself regressing to using <code>git</code> at the command line and I don't find that to be nearly as enjoyable. Since I've made these changes, I'm back to doing 99% of my <code>git</code> interactions through Magit.</p><p>Don't settle for slow interactions with your computer. Aggressively shorten your feedback cycles and you'll change how you interact with the machine.</p><h4>Versions used when writing this article</h4><p>This post was written with Magit version <code>20201111.1436</code> and Emacs <code>26.3</code> on macOS <code>10.15.7</code>. I've been using these changes for a few months but do not remember or have a record of what Magit version I was using at the time I originally made these changes.</p><p><strong>edit on 2020/12/15</strong>: I recently upgraded Emacs to tryout the native-comp work and can report this still works with with Emacs <code>28.0.50</code>, Magit <code>20201212.929</code>, and Git <code>2.29.2</code> running in macOS <code>11.0.1</code>.</p><p><strong>Warning</strong>: This reduces the information Magit shows you. The status buffer will be blank if you have no changes. I find this tradeoff to be worth it. <ol class='footnotes'><li id='fn-1'>The before image is even missing some sections that would have gone missing in the after shot since I didn't want to put the effort.<a href='#fnref1'>&#8617;</a></li></ol></p>","title":"Speeding up magit","author":{"name":"Jake McCrary"},"date_published":"2020-11-14T23:59:59+00:00"},{"id":"https://jakemccrary.com/blog/2020/11/11/creating-a-custom-kindle-dictionary/index.html","url":"https://jakemccrary.com/blog/2020/11/11/creating-a-custom-kindle-dictionary/index.html","content_text":"<p>Back in April 2013, I created and published a <a href='https://gumroad.com/l/dune-dictionary'>custom Kindle dictionary</a> for the book <a href='http://www.amazon.com/gp/product/B00B7NPRY8'>Dune</a>. As far as I can tell, <a href='https://gumroad.com/l/dune-dictionary'>my Dune dictionary</a> was the very first custom Kindle dictionary for a fiction book.</p><p>I created it because I was reading Dune for the first time and there were many unfamiliar words. These words could not be looked up by my Kindle because they were not found in any of on-device dictionaries. These words were in Dune's glossary but flipping back-and-forth to that on a Kindle was a huge pain.</p><p>I initially worked around this by printing a word list from Wikipedia and carrying it with me. This was better but it was still annoying.</p><p>I was so annoyed that I took a break from reading to figure out how to create a custom Kindle dictionary. At the time, there wasn't a ton of great information online about how to do this.</p><p>Eventually, I found Amazon's <a href='https://s3.amazonaws.com/kindlegen/AmazonKindlePublishingGuidelines.pdf'>Kindle Publishing Guidelines</a> and, referencing it, managed to figure out something that worked. The link in the previous sentence is to the <strong>current</strong> documentation which is much nicer than the <a href='https://web.archive.org/web/20130408183149/http://s3.amazonaws.com/kindlegen/AmazonKindlePublishingGuidelines.pdf'>mid-2013 documentation</a>. The earlier documentation left me with questions and required quite a bit of experimentation.</p><p>Using the mid-2013 documentation, I developed some Clojure code to generate my <a href='https://gumroad.com/l/dune-dictionary'>dictionary</a>. Doing this in 2013 was annoying. The documentation was not good.</p><p>I recently read <a href='https://www.gregegan.net/DIASPORA/DIASPORA.html'>Greg Egan's Diaspora</a> and found myself wishing I had a custom dictionary. I took a break from reading and packaged up Diaspora's glossary into a dictionary. I could have stuck with my 2013 generator but I decided to update it and write this article about creating a Kindle dictionary in late 2020.</p><p>The new documentation is a bit better but it still isn't great. Here is what you need to do.</p><h2>Making a dictionary</h2><p>Below are the steps to building a dictionary.</p><ol><li>Construct your list of words and definitions.</li><li>Convert the list into the format specified by Amazon.</li><li>Create a cover page.</li><li>Create a copyright page.</li><li>Create a usage page (definitely optional).</li><li>Make an <code>.opf</code> file.</li><li>Combine the files together.</li><li>Put it onto your device.</li></ol><h3>1. Construct your list of words and definitions</h3><p>There really are no set instructions for this. Source your words and definitions and store them in some format that you'll be able to manipulate in a programming language.</p><p>I've sourced words a few different ways. I've taken them straight from a book's glossary, a Wikipedia entry, and extracted them from a programming book's <a href='/blog/2013/07/09/releasing-the-functional-javascript-companion/'>source code</a>.</p><h3>2. Convert the list into the format specified by Amazon</h3><p>Below is the basic scaffolding of the html file Amazon requires along with some inline styles that I think look decent on devices. This has some extra stuff in it and also doesn't contain everything Amazon specifies. But it works.</p><pre><code class=\"language-html\">&lt;html xmlns:math=&quot;http://exslt.org/math&quot; xmlns:svg=&quot;http://www.w3.org/2000/svg&quot;\n      xmlns:tl=&quot;https://kindlegen.s3.amazonaws.com/AmazonKindlePublishingGuidelines.pdf&quot;\n      xmlns:saxon=&quot;http://saxon.sf.net/&quot; xmlns:xs=&quot;http://www.w3.org/2001/XMLSchema&quot;\n      xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;\n      xmlns:cx=&quot;https://kindlegen.s3.amazonaws.com/AmazonKindlePublishingGuidelines.pdf&quot;\n      xmlns:dc=&quot;http://purl.org/dc/elements/1.1/&quot;\n      xmlns:mbp=&quot;https://kindlegen.s3.amazonaws.com/AmazonKindlePublishingGuidelines.pdf&quot;\n      xmlns:mmc=&quot;https://kindlegen.s3.amazonaws.com/AmazonKindlePublishingGuidelines.pdf&quot;\n      xmlns:idx=&quot;https://kindlegen.s3.amazonaws.com/AmazonKindlePublishingGuidelines.pdf&quot;&gt;\n  &lt;head&gt;\n    &lt;meta http-equiv=&quot;Content-Type&quot; content=&quot;text/html; charset=utf-8&quot;&gt;\n    &lt;style&gt;\n      h5 {\n          font-size: 1em;\n          margin: 0;\n      }\n      dt {\n          font-weight: bold;\n      }\n      dd {\n          margin: 0;\n          padding: 0 0 0.5em 0;\n          display: block\n      }\n    &lt;/style&gt;\n  &lt;/head&gt;\n  &lt;body&gt;\n    &lt;mbp:frameset&gt;\n      &#91;PUT THE WORDS HERE&#93;\n    &lt;/mbp:frameset&gt;\n  &lt;/body&gt;\n&lt;/html&gt;\n</code></pre><p>The <code>&#91;PUT THE WORDS HERE&#93;</code> part gets filled in with the markup for all of your words. The basic structure for an entry looks like the following.</p><pre><code class=\"language-html\">&lt;idx:entry name=&quot;default&quot; scriptable=&quot;yes&quot; spell=&quot;yes&quot;&gt;\n  &lt;h5&gt;&lt;dt&gt;&lt;idx:orth&gt;WORD HERE&lt;/idx:orth&gt;&lt;/dt&gt;&lt;/h5&gt;\n  &lt;dd&gt;DEFINITION&lt;/dd&gt;\n&lt;/idx:entry&gt;\n&lt;hr/&gt;\n</code></pre><p>Every word has an <code>&lt;idx:entry&gt;</code> block followed by a <code>&lt;hr&gt;</code>. These two elements together comprise a single entry.</p><p>The <code>name</code> attribute on the <code>&lt;idx:entry&gt;</code> element sets the lookup index associated with the entry. Unless you are building a dictionary with multiple indexes, you can pretty much ignore it. Whatever value is provided needs to match the value found in the <code>.opf</code> file we'll make later.</p><p>The <code>scriptable</code> attribute makes the entry available from the index and can only have the value <code>&quot;yes&quot;</code>. The <code>spell</code> can also only be <code>&quot;yes&quot;</code> and enables wildcard search and spell correction.</p><p>The markup you use inside the <code>idx:entry</code> element is mostly up to you. The only markup you need is the <code>&lt;idx:orth&gt;</code> node. Its content is the word being looked up. The rest of the markup can be whatever you want.</p><p>I wrap the term in a <code>dt</code> and the definition in <code>dd</code> because it just feels like the right thing to do and provides tags to put some CSS styles on. I wrap the <code>dt</code> element in an <code>h5</code> because I couldn't figure out what CSS styles would actually work on my Kindle voyage to put the term on its own line.</p><p>It isn't that I don't know what the styles should be but my Kindle did not respect them. Figuring out stuff like this is part of the experimentation required to produce a dictionary that you're happy with.</p><p>There is additional supported markup that provides more functionality. This includes providing alternative words that all resolve to the same entry, specifying if an exact match is required, and varying the search word from the displayed word. Most dictionaries don't need these features so I'm not going to elaborate on them.</p><h3>3. Construct a cover page.</h3><p>This is just a requirement of a Kindle. Create a html file called <code>cover.html</code> and substitute in the appropriate values.</p><pre><code class=\"language-html\">&lt;html&gt;\n  &lt;head&gt;\n    &lt;meta content=&quot;text/html&quot; http-equiv=&quot;content-type&quot;&gt;\n  &lt;/head&gt;\n  &lt;body&gt;\n    &lt;h1&gt;Dune Dictionary&lt;/h1&gt;\n    &lt;h3&gt;Created by Jake McCrary&lt;/h3&gt;\n  &lt;/body&gt;\n&lt;/html&gt;\n</code></pre><p>Amazon wants you to provide an image as well but you don't actually have to do this. You probably need to do this if you actually publish the dictionary through Amazon<a href='#fn-1' id='fnref1'><sup>1</sup></a>.</p><h3>4. Create a copyright page</h3><p>This is also a requirement of the Kindle publishing guide. There isn't any special markup for doing this.</p><p>Just make another html file and fill in some appropriate details.</p><h3>5. Create a usage page</h3><p>This isn't a requirement but I include another page that explains how to use the dictionary. Again, this is just a html document with some content in it.</p><h3>6. Make an <code>.opf</code> file.</h3><p>This is one of the poorly documented but extremely important parts of making a Kindle dictionary. This is a XML file that ties together all the previous files into an actual dictionary.</p><p>Make an opf file and name it whatever you want; in this example we'll go with <code>dict.opf</code>.</p><p>Below is the one I've used for the Diaspora dictionary. If you've created an image for a cover then lines 7 and 15 are the important and line 15 should be uncommented.</p><pre><code class=\"language-xml\">&lt;?xml version=&quot;1.0&quot;?&gt;\n&lt;package version=&quot;2.0&quot; xmlns=&quot;http://www.idpf.org/2007/opf&quot; unique-identifier=&quot;BookId&quot;&gt;\n  &lt;metadata&gt;\n    &lt;dc:title&gt;A dictionary for Diaspora by Greg Egan&lt;/dc:title&gt;\n    &lt;dc:creator opf:role=&quot;aut&quot;&gt;Jake McCrary&lt;/dc:creator&gt;\n    &lt;dc:language&gt;en-us&lt;/dc:language&gt;\n    &lt;meta name=&quot;cover&quot; content=&quot;my-cover-image&quot; /&gt;\n    &lt;x-metadata&gt;\n      &lt;DictionaryInLanguage&gt;en-us&lt;/DictionaryInLanguage&gt;\n      &lt;DictionaryOutLanguage&gt;en-us&lt;/DictionaryOutLanguage&gt;\n      &lt;DefaultLookupIndex&gt;default&lt;/DefaultLookupIndex&gt;\n    &lt;/x-metadata&gt;\n  &lt;/metadata&gt;\n  &lt;manifest&gt;\n    &lt;!-- &lt;item href=&quot;cover-image.jpg&quot; id=&quot;my-cover-image&quot; media-type=&quot;image/jpg&quot; /&gt; --&gt;\n    &lt;item id=&quot;cover&quot;\n          href=&quot;cover.html&quot;\n          media-type=&quot;application/xhtml+xml&quot; /&gt;\n    &lt;item id=&quot;usage&quot;\n          href=&quot;usage.html&quot;\n          media-type=&quot;application/xhtml+xml&quot; /&gt;\n    &lt;item id=&quot;copyright&quot;\n          href=&quot;copyright.html&quot;\n          media-type=&quot;application/xhtml+xml&quot; /&gt;\n    &lt;item id=&quot;content&quot;\n          href=&quot;content.html&quot;\n          media-type=&quot;application/xhtml+xml&quot; /&gt;\n  &lt;/manifest&gt;\n  &lt;spine&gt;\n    &lt;itemref idref=&quot;cover&quot; /&gt;\n    &lt;itemref idref=&quot;usage&quot; /&gt;\n    &lt;itemref idref=&quot;copyright&quot;/&gt;\n    &lt;itemref idref=&quot;content&quot;/&gt;\n  &lt;/spine&gt;\n  &lt;guide&gt;\n    &lt;reference type=&quot;index&quot; title=&quot;IndexName&quot; href=&quot;content.html&quot;/&gt;\n  &lt;/guide&gt;\n&lt;/package&gt;\n</code></pre><p>An import element in this file is the <code>&lt;DefaultLookupIndex&gt;</code> element. The <code>&lt;DefaultLookupIndex&gt;</code> content needs to contain the same value from the <code>name</code> attribute on your <code>&lt;idx:entry&gt;</code> elements. The <code>&lt;DictionaryInLanguage&gt;</code> and <code>&lt;DictionaryOutLanguage&gt;</code> tell the Kindle the valid languages for your dictionary.</p><p>The other elements in the <code>&lt;metadata&gt;</code> should be pretty self-explanatory.</p><p>The <code>&lt;manifest&gt;</code> gives identifiers for the various files you've made in the previous steps</p><p>The commented out <code>&lt;img&gt;</code> shows how you'd add the cover image if you opt to have one. For sideloading dictionaries onto Kindles, it is not required.</p><p>The <code>&lt;spine&gt;</code> section references the <code>&lt;item&gt;</code>s from the <code>&lt;manifest&gt;</code> and specifies the order they appear in your book.</p><p>I honestly don't remember why the <code>&lt;guide&gt;</code> section is in there or what it is doing in this example. I'm guessing that is what causes there to be an index with the word list in the dictionary but I haven't tried removing it and the documentation doesn't talk about it. I only have it there since I had it in earlier dictionaries I made.</p><h3>7. Combine the files together</h3><p>The publishing guidelines (as of October 2020) tell you to combine the previously created files together using the command line tool <code>kindlegen</code>. The problem with those instructions is that Amazon doesn't offer <code>kindlegen</code> as a download anymore. If you want to use it, you can still find it through the Internet Archive.</p><p>Instead of following the publishing guidelines, we'll use Kindle Previewer to finish making the dictionary. It is pretty straight forward.</p><ol><li>Download the <a href='https://www.amazon.com/gp/feature.html?ie=UTF8&docId=1000765261'>Kindle Previewer</a> application.</li><li>Open it up and click <code>File &gt; Open</code>.</li><li>Find your <code>dict.opf</code> file and open that.</li><li><code>File &gt; Export</code> and export it as a <code>.mobi</code> file.</li></ol><p>The conversion log will complain about a couple things such as missing cover. As long as these are just <code>Warnings</code> it doesn't matter.</p><p>I've found the preview in this app doesn't match what it looks like on your device so take it with a grain of salt.</p><h3>7. Put it onto your device</h3><p>Finally, put the dictionary onto your Kindle. You can do this by either using a USB cable or by emailing it to your Kindle's email address.</p><p>Once it is on your Kindle, open it up and double check that the formatting is correct. Next, open the book you've made it for and try looking up a word. If the lookup fails or uses another dictionary, click the dictionary name in the pop-up to change your default dictionary to yours. Now when you try to look up a word, your dictionary is searched first.</p><p>The great thing is that if a word <i>isn't</i> in your dictionary then the Kindle searches the other dictionaries<a href='#fn-2' id='fnref2'><sup>2</sup></a>. This feature is great as it lets your dictionary be very focused. Hopefully Amazon doesn't remove this feature.</p><h2>End</h2><p>It was interesting creating another dictionary so long after I made my first couple. Some of the new features, like the ability to require an exact word match, would have been useful for my <a href='/blog/2013/07/09/releasing-the-functional-javascript-companion/'>second dictionary</a>. The actual markup recommendations have changed over the years but luckily my <a href='https://gumroad.com/l/dune-dictionary'>Dune dictionary</a> still works. I'm not constantly checking that it works, so if Amazon had changed something and it broke, I probably wouldn't notice until someone reported it.</p><p>The Kindle documentation is much better now compared to 2013 but it still isn't great.</p><p>It is also a bummer that <code>kindlegen</code> is gone. It was nice to be able to convert the input files from the command line. I also think this means you can no longer make a dictionary from a Linux machine as I don't remember seeing Kindle Previewer support.</p><p>If you're ever in a situation where you think a custom dictionary would be useful, feel free to reach out.</p><p>Go forth and make dictionaries. <ol class='footnotes'><li id='fn-1'>This is actually a challenge to do due to restrictions on what Amazon allows published.<a href='#fnref1'>&#8617;</a></li><li id='fn-2'>No idea if it searches all of them in some order but I'm very glad it works this way.<a href='#fnref2'>&#8617;</a></li></ol></p>","title":"Creating a custom Kindle dictionary","author":{"name":"Jake McCrary"},"date_published":"2020-11-11T23:59:59+00:00"},{"id":"https://jakemccrary.com/blog/2020/10/03/go-create-silly-small-programs/index.html","url":"https://jakemccrary.com/blog/2020/10/03/go-create-silly-small-programs/index.html","content_text":"<p>Over the summer, I developed a couple of small, sort of silly programs. One, <a href='https://jakemccrary.com/experiments/photo-fit/'>Photo Fit</a>, is a little tool that runs in a web browser and resizes photos to fit as your phone's background. The other, <a href='https://default-equipment.herokuapp.com/'>Default Equipment</a>, runs on Heroku and automates changing the \"bike\" of my Strava-tracked e-bike rides to be my <a href='https://onewheel.com/'>onewheel</a>.</p><p>These weren't created to solve large problems in the world. There is no plan to make any money with them. As of October 2020, Default Equipment doesn't even work for other people (though it could, send me a message if you'd like to use it and I'll get around to it).</p><p>Each was created to fix a minor annoyance in my life and, because these tools can live on the Internet, they can fix the same minor annoyance in other lives.</p><p>With an increasing amount of software in the world, being able to write software is nearly sorcery<a href='#fn-1' id='fnref1'><sup>1</sup></a>. As a developer, you can identify a problem in the world and then change the world to remove that problem. And, depending on the problem, you can remove it for everyone else.</p><p>Software developers aren't alone in being able to identify problems and remove them through creation. Carpenters can build shelves for their books. Cooks can prepare food to remove hunger. You can come up with nearly an infinite number of other examples.</p><p>The difference is that a solo developer can solve problems for an unknown number of other folks. This is enabled by the Internet enabled ease of distribution. This is very powerful.</p><p>Developers can expose their solution to others through a web application. Desktop or mobile applications can be distributed through various app stores or made available as a download. Source code can be made available for others to run. Being able to distribute easily and cheaply is a game changer.</p><p>A developer's change to the world might be a minor improvement. Photo Fit might never be used by anyone besides me. But it is still out there, making the world slightly better. It is available for someone to stumble upon when they are also annoyed by the same problem.</p><p>It felt good to write these tiny, useful programs. If you scope them small enough, there is a definitive ending point<a href='#fn-2' id='fnref2'><sup>2</sup></a>. This lets you feel that finishing-a-project satisfaction quickly. The small size also allows you experiment with new techniques and tools without committing to a large and ongoing commitment.</p><p>I wrote both Photo Fit and Default Equipment in TypeScript. Before the beginning of summer, I didn't know TypeScript and had little exposure to Node.js. Now I have some experience with both and gained that while making small improvements to my life and potentially the lives of others.</p><p>If you haven't developed software to solve a small problem recently, I'd recommend doing it. Don't hesitate to remove a problem that feels silly. Removing those problems can still make your life slightly better and gives you an opportunity to learn. It feels good to remove an annoyance from your life. If you can, make that software available to others so their lives are improved as well. Take advantage of the power of easy distribution to improve the world and not just your tiny slice of it.</p><ol class='footnotes'><li id='fn-1'>This is taken to an extreme in the fantasy series <a href='https://www.goodreads.com/series/131379-magic-2-0'>Magic 2.0</a>.<a href='#fnref1'>&#8617;</a></li><li id='fn-2'>Excluding any ongoing maintenance. But if you're making something small enough you can approach near zero ongoing maintenance. One of my longest running solve-my-own-problems application, Book Robot, has been operating for nearly 7 years with minimal effort.<a href='#fnref2'>&#8617;</a></li></ol>","title":"Go create silly, small programs","author":{"name":"Jake McCrary"},"date_published":"2020-10-03T23:59:59+00:00"},{"id":"https://jakemccrary.com/blog/2020/08/31/utilities-i-like-selecta/index.html","url":"https://jakemccrary.com/blog/2020/08/31/utilities-i-like-selecta/index.html","content_text":"<p><a href='https://github.com/garybernhardt/selecta'>Selecta</a> is a command-line utility that gives you the power to fuzzy select items from a list of text. What does that mean? It means you pipe <code>selecta</code> a list of text on stdin, it helps you make a choice from items in that list, and then <code>selecta</code> prints that choice to stdout.</p><p>Here is an example of me using it to help me narrow in on what file I'd like to pass to <code>wc</code>.</p><p><video autoplay loop muted playsinline>   <source src=\"/images/selecta-search.webm\" type=\"video/webm\">   <source src=\"/images/selecta-search.mp4\" type=\"video/mp4\"> </video></p><p>In this example, I search for markdown files using <code>ripgrep</code> (<code>rg</code>), type part of a filename, hit enter to select the match, and then see the <code>wc</code> stats of that file. This isn't the greatest example of using <code>selecta</code> but it adequately shows what it does.</p><p>Some number of years ago, I wrote a script called <code>connect-db</code>. This script used <code>selecta</code>, along with <code>grep</code>, <code>sed</code>, and <code>cut</code>, to provide a very pleasant command-line experience for connecting to known databases. My coworkers and I used this script frequently.</p><p>By combining <code>selecta</code> with other stdin/stdout friendly command-line tools you can build really enjoyable, time-saving tools. <a href='https://github.com/garybernhardt/selecta'>Selecta</a> is a useful utility to add to your toolkit.</p>","title":"Utilities I like: selecta","author":{"name":"Jake McCrary"},"date_published":"2020-08-31T23:59:59+00:00"},{"id":"https://jakemccrary.com/blog/2020/07/03/introducing-photo-fit/index.html","url":"https://jakemccrary.com/blog/2020/07/03/introducing-photo-fit/index.html","content_text":"<p>Earlier this year, I wanted to use a landscape photo as my background on my phone. It wasn't the photo below but we can use it as an example.</p><p><img src=\"/images/photo-fit/keyboard-new-keycaps.jpg\" alt=\"Landscape image of my keyboard\" title=\"Landscape image of my keyboard\" /></p><p>When I made it my background, my phone<a href='#fn-1' id='fnref1'><sup>1</sup></a> zoomed in to make it fit the portrait orientation of the phone.</p><p><img src=\"/images/photo-fit/phone-background-before.jpg\" alt=\"Screenshot of phone with zoomed in keyboard photo\" title=\"Screenshot of phone with zoomed in keyboard photo\" /></p><p>This is not great. I don't want a zoomed in version that fits my vertical phone. I want to see the whole photo with black bars at the top and bottom</p><p>I tried to find a way to add these bars using my phone. I couldn't find an easy way.</p><p>At this point, a reasonable solution would have been transferring the photo to a computer, editing it, and transferring it back to my phone. I didn't do that. Instead, I wrote a little TypeScript<a href='#fn-2' id='fnref2'><sup>2</sup></a> web app that adds the bars for you. You open the website on your phone, select an image, and then download a properly sized image.</p><p><img src=\"/images/photo-fit/phone-background-after.jpg\" alt=\"Screenshot of phone with properly fitting image\" title=\"Screenshot of phone with properly fitting image\" /></p><p>The tool uses the canvas API and does all of the work in the browser itself. It was a fun, bite-sized project and it gave me an excuse to write some TypeScript and do some web programming. This was the first time I've written TypeScript since learning it and I haven't done any web programming in a while.</p><p>Making <a href='/experiments/photo-fit/'>Photo Fit</a> was not a fast approach to changing my phone's background. But, now the tool exists and anyone, including future me, can quickly resize their photo from the comfort of their own phone.</p><p><a href='/experiments/photo-fit/'>Photo Fit</a> is live and available for others to use. I've only tested it on my own phone and desktop browsers. It might not work! If you do try it and something weird happens, plese let me know.</p><ol class='footnotes'><li id='fn-1'>A Samsung S8 running Android 9<a href='#fnref1'>&#8617;</a></li><li id='fn-2'>I recently learned some TypeScript through <a href='https://www.executeprogram.com'>Execute Program</a>. Execute program is a really neat application of spaced repetition for learning programming concepts.<a href='#fnref2'>&#8617;</a></li></ol>","title":"Introducing Photo Fit","author":{"name":"Jake McCrary"},"date_published":"2020-07-03T23:59:59+00:00"},{"id":"https://jakemccrary.com/blog/2020/06/28/using-bazel-to-help-fix-flaky-tests/index.html","url":"https://jakemccrary.com/blog/2020/06/28/using-bazel-to-help-fix-flaky-tests/index.html","content_text":"<p>Flaky tests are terrible. These are tests that pass or fail without anything changing in the code. They often pass the majority of the time and fail rarely. This makes them hard to detect and cause developers to often just run the tests again.</p><p>Flaky tests erode your team's confidence in your system. They cause folks to get in the habit of not trusting the output of tests. This discourages people from writing tests as they stop seeing them as something that improves quality and instead view them as a drag on productivity.</p><p>Flaky tests are often hard to fix. If they were easy to fix, they wouldn't have been flaky in the first place. One difficulty in fixing them is that the failures are often hard to reproduce.</p><p>Often, the first step in fixing a flaky test is to write a script to run the tests multiple times in a row. If you are using <a href='https://bazel.build/'>Bazel</a> as your build tool you don't need to write this.</p><p>Here is an example <code>bazel</code><a href='#fn-1' id='fnref1'><sup>1</sup></a> command for helping you recreate flaky test failures.</p><p><code>bazel test --test&#95;strategy=exclusive --test&#95;output=errors --runs&#95;per&#95;test=50 -t- //...</code></p><p>The above command is running all the test targets in a workspace and each flag is important.</p><ul><li><code>--runs&#95;per&#95;test=50</code> is telling Bazel to run each test 50 times.</li><li><code>--test&#95;output=errors</code> is telling Bazel to only print errors to your console.</li><li><code>-t-</code> is a shortcut for <code>--nocache&#95;test&#95;results</code> (or <code>--cache&#95;test&#95;results=no</code>).This flag tells Bazel to <strong>not</strong> cache the test results.</li><li><code>--test&#95;strategy=exclusive</code> will cause tests to be run serially.Without this, Bazel could run your test targets concurrently and if your tests aren't designed for this you may run into other failures.</li></ul><p>Flaky tests are terrible and you should try not to have them. Try your best to have reliable tests. <ol class='footnotes'><li id='fn-1'>I've written this while using Bazel 3.2.0. If you are reading this far in the future the flags may have changed.<a href='#fnref1'>&#8617;</a></li></ol></p>","title":"Using Bazel to help fix flaky tests","author":{"name":"Jake McCrary"},"date_published":"2020-06-28T23:59:59+00:00"},{"id":"https://jakemccrary.com/blog/2020/05/04/how-to-be-alerted-when-a-long-running-process-finishes/index.html","url":"https://jakemccrary.com/blog/2020/05/04/how-to-be-alerted-when-a-long-running-process-finishes/index.html","content_text":"<p>Let me set the stage. I kick off the compilation of a large Scala codebase. This will take minutes to finish, so I switch to Slack and catch up on what coworkers have posted. Someone posted an interesting link and I follow it to an article. Fifteen minutes later, I notice the compilation finished twelve minutes ago. I silently grumble at myself, disappointed that I didn't start the next step twelve minutes ago.</p><p>Has some variation of the above happened to you?</p><p>It doesn't happen to me anymore because now my computer tells me when any long running process finishes. This might sound annoying but it is great. I no longer feel guilty<a href='#fn-1' id='fnref1'><sup>1</sup></a> for dropping into Slack and can immediately get back to the task at hand as soon the process finishes.</p><p>I've done this by enhancing on my setup for showing the <a href='/blog/2020/04/21/using-bash-preexec-for-monitoring-the-runtime-of-your-last-command/'>runtime of the previous command in my prompt</a>. You don't have to read that article for the rest of this one to make sense, but you should because it shows you how to add a very useful feature to your prompt.</p><p>Below is the code that causes my computer to tell me when it finishes running commands that takes longer than 30 seconds. It is found in my <code>&#126;/.bashrc</code>. An explanation follows the code snippet.</p><pre><code class=\"language-bash\"># Using https://github.com/rcaloras/bash-preexec\npreexec&#40;&#41; {\n  &#95;last&#95;command=$1\n  if &#91; &quot;UNSET&quot; == &quot;${&#95;timer}&quot; &#93;; then\n    &#95;timer=$SECONDS\n  else \n    &#95;timer=${&#95;timer:-$SECONDS}\n  fi \n}\n\n&#95;maybe&#95;speak&#40;&#41; {\n    local elapsed&#95;seconds=$1\n    if &#40;&#40; elapsed&#95;seconds &gt; 30 &#41;&#41;; then\n        local c\n        c=$&#40;echo &quot;${&#95;last&#95;command}&quot; | cut -d' ' -f1&#41;\n        &#40; say &quot;finished ${c}&quot; &amp; &#41;\n    fi\n}\n\nprecmd&#40;&#41; {\n  if &#91; &quot;UNSET&quot; == &quot;${&#95;timer}&quot; &#93;; then\n     timer&#95;show=&quot;0s&quot;\n  else \n    elapsed&#95;seconds=$&#40;&#40;SECONDS - &#95;timer&#41;&#41;\n    &#95;maybe&#95;speak ${elapsed&#95;seconds}\n    timer&#95;show=&quot;$&#40;format-duration seconds $elapsed&#95;seconds&#41;&quot;\n  fi\n  &#95;timer=&quot;UNSET&quot;\n}\n\n# put at the bottom of my .bashrc\n&#91;&#91; -f &quot;$HOME/.bash-preexec.sh&quot; &#93;&#93; &amp;&amp; source &quot;$HOME/.bash-preexec.sh&quot;\n</code></pre><p><a href='https://github.com/rcaloras/bash-preexec'>Bash-Preexec</a> triggers the <code>preexec</code>, immediately before a command is execute, and <code>precmd</code> functions, immediately before the shell prompt reappears. Those two functions are enough to figure out how much time has elapsed while a command ran. You setup Bash-Preexec by downloading <a href='https://github.com/rcaloras/bash-preexec/blob/master/bash-preexec.sh'>bash-preexec.sh</a> and sourcing it in your <code>&#126;/.bashrc</code>.</p><p><code>preexec</code> is passed the command being ran and it captures it in <code>&#95;last&#95;command</code>. It also captures the current number of seconds the shell has been running as <code>&#95;timer</code>.</p><p><code>precmd</code> uses the value in <code>&#95;timer</code> to calculate the elapsed time in seconds and then calls the function <code>&#95;maybe&#95;speak</code> with this as an argument. It also does the work required for showing the elapsed time in my prompt.</p><p>If the elapsed time is greater than 30 seconds then <code>&#95;maybe&#95;speak</code> uses <code>cut</code> to discard the arguments of captured command, leaving me with the command itself. It then uses <code>say</code> to produce an audible alert of what command just finished. I discard the arguments because otherwise the <code>say</code> command can go on for a long time.</p><p><code>say</code> is a tool that ships with macOS. I haven't gotten around to it yet but I'll need to use something else on my Linux machines.</p><p>You may have noticed that I run <code>say</code> in the background and in a subshell. Running it in the background lets me continue interacting with my shell while <code>say</code> finishes executing and running it in a subshell prevents text from appearing in my shell when the background job finishes.</p><p>With this setup, I can kick off a slow compile or test run and not feel so bad about dropping into Slack or reading Reddit. It is wonderful and I'd recommend it (though, I'd more strongly recommend not having commands that take a while to run). <ol class='footnotes'><li id='fn-1'>I still feel a little guilty as doing so will break any momentum/flow I had going on, but that flow was already broken by the slowness of the command.<a href='#fnref1'>&#8617;</a></li></ol></p>","title":"How to be automatically notified when long running processes finish","author":{"name":"Jake McCrary"},"date_published":"2020-05-04T23:59:59+00:00"},{"id":"https://jakemccrary.com/blog/2020/04/26/hanging-a-hangboard-using-a-doorway-pull-up-bar/index.html","url":"https://jakemccrary.com/blog/2020/04/26/hanging-a-hangboard-using-a-doorway-pull-up-bar/index.html","content_text":"<p>If you've browsed the <a href='/adventure'>adventure</a> section of my website you know I'm a climber. Currently, the climbing gyms in Chicago are closed due to COVID-19 concerns. This has put a damper on my training but I own a hangboard and have been able to keep training my fingers at home.</p><p>A hangboard allows you to apply stress to your fingers in a measured and controlled fashion. It is a vital tool for a climber who is serious about getting stronger. It is also a great rehab tool for coming back from injuries.</p><p>Below is my hangboard.</p><p><img src=\"/images/hangboard.png\" alt=\"Hangboard mounted using hooks and a pull-up bar\" /></p><p>As you can see from the photo, I've hung mine using a doorway pull-up bar and a bunch of hooks. This lets me easily take it down and causes no permanent damage to anything in my apartment. The towels are there to make sure the door frame isn't crushed by any of the hard pieces.</p><p>Originally, I followed <a href='https://www.youtube.com/watch?v=Cu-MrncHpJo'>this video</a> to mount it using some pipe and shoving the pipe into the pull-up bar. This setup made me uncomfortable as the forces on the pull-up bar were far away from the intended location. This resulted in a lot of flexing and I was concerned about how the pull-up bar was acting on the frame.</p><p>I searched online for other ideas and saw a setup that used hooks. This was appealing to me as it moves your weight under the bar. A quick trip to Home Depot and a bit of easy construction and now I can keep up my finger strength when stuck at home. Here are the steps to build one.</p><ol><li>Buy a 2 inch x 10 inch wood board (or some other 2 inch x N inch board that is big enough for whatever you want to attach to it).</li><li>Cut the board so it spans the width of your doorway plus a few extra inches. Home Depot can do this for you.</li><li>Mount your hangboard to the board.</li><li>Take <a href='https://www.homedepot.com/p/Everbilt-Screw-in-Steel-Bicycle-Hook-with-Vinyl-Coating-25-lbs-21407/206585761'>hooks</a>, typically used for hanging bicycles up in a garage, and screw them into the top of your 2-in x 10-in.</li><li>Hang the hooks over the pull-up bar. Adjust the hooks so each is pulling on the bar.</li><li>Find some padding, I used towels, and put the padding between the door trim and other hard surfaces.</li><li>Hang on your hangboard and get stronger.</li></ol><p>The board and hook method was much easier to construct than the other pull-up bar method and feels much more solid. The pull-up bar isn't rated for too much weight, so I'm not going to do any super heavy, two-handed hangs but it is plenty solid for other hangboard exercises.</p><p>If you're a climber and don't want to permanently mount a handboard, I'd highly recommend this. If you don't own a hangboard, I pick up something from <a href='https://www.tensionclimbing.com/hangboards/'>Tension Climbing</a>. Their wooden boards are easy on the finger tips and have all the edge sizes you'll need.</p>","title":"How to hang a hangboard using a doorway pull-up bar","author":{"name":"Jake McCrary"},"date_published":"2020-04-26T23:59:59+00:00"},{"id":"https://jakemccrary.com/blog/2020/04/21/using-bash-preexec-for-monitoring-the-runtime-of-your-last-command/index.html","url":"https://jakemccrary.com/blog/2020/04/21/using-bash-preexec-for-monitoring-the-runtime-of-your-last-command/index.html","content_text":"<p>My article on <a href='/blog/2015/05/03/put-the-last-commands-run-time-in-your-bash-prompt/'>putting the runtime of your last command into your bash prompt</a> is one of my most surfaced-by-google articles. Why is this a great to your prompt?  To quote my previous article:</p><blockquote><p> I’m fairly certain the following scenario has happened to every terminal user. You run a command and, while it is running, realize you should have prefixed it with <code>time</code>. You momentarily struggle with the thought of killing the command and rerunning it with <code>time</code>. You decide not to and the command finishes without you knowing how long it took. You debate running it again. </p></blockquote><blockquote><p> For the last year I’ve lived in a world without this problem. Upon completion, a command’s approximate run time is displayed in my prompt. It is awesome. </p></blockquote><p>I've been living without the above problem since sometime in 2014 and not having that problem is still awesome.</p><p>I have made some changes since 2014.</p><p>One change was switching to using <a href='https://github.com/rcaloras/bash-preexec'>Bash-Preexec</a> instead of directly using <code>trap</code> and <code>$PROMPT&#95;COMMAND</code> for calling functions to start and stop tracking runtime. Bash-Preexec lets you trigger a function (or multiple) right after a command has been read and right before each prompt.</p><p>The usage is pretty straight forward. In the most basic case, you source <code>bash-preexec.sh</code> and then provide functions named <code>preexec</code>, which is invoked right before a command is executed, and/or <code>precmd</code>, which is invoked just before each prompt. <code>bash-preexec.sh</code> can be downloaded from <a href='https://github.com/rcaloras/bash-preexec/'>its repo</a>.  The changes required to move to Bash-Preexec pretty <a href='https://github.com/jakemcc/dotfiles/commit/46fc3dc9d4d7d0d73152c77b7383645af42b3d5d'>pretty minimal</a>.</p><p>The other change was introducing the script, <a href='https://github.com/jakemcc/dotfiles/blob/9c8c0315f35b55df6cef7e21261e3dcbbfac86e1/home/.bin/format-duration#L3-L4'>format-duration</a> by <a href='https://twitter.com/gfredericks_'>Gary Fredericks</a>, to humanely format the time. This script converts seconds into a more readable string (example: 310 to <code>5m10s</code>)</p><p>Here is a screenshot of everything in action (with a reduced prompt, my normal one includes git and other info).</p><p><img src=\"/images/runtime-humane-example.png\" alt=\"Command line prompt showing runtimes of previous commands\" width=320 height=150></p><p>Below is a simplified snippet from my <code>.bashrc</code> that provides runtimes using both of these additions.</p><pre><code class=\"language-bash\">preexec&#40;&#41; {\n  if &#91; &quot;UNSET&quot; == &quot;${timer}&quot; &#93;; then\n    timer=$SECONDS\n  else \n    timer=${timer:-$SECONDS}\n  fi \n}\n\nprecmd&#40;&#41; {\n  if &#91; &quot;UNSET&quot; == &quot;${timer}&quot; &#93;; then\n     timer&#95;show=&quot;0s&quot;\n  else \n    the&#95;seconds=$&#40;&#40;SECONDS - timer&#41;&#41;\n    # use format-duration to make time more human readable\n    timer&#95;show=&quot;$&#40;format-duration seconds $the&#95;seconds&#41;&quot; \n  fi\n  timer=&quot;UNSET&quot;\n}\n\n# Add $last&#95;show to the prompt.\nPS1='&#91;last: ${timer&#95;show}s&#93;&#91;\\w&#93;$ '\n\n# a bunch more lines until the end of my .bashrc\n# where I include .bash-preexec.sh\n&#91;&#91; -f &quot;$HOME/.bash-preexec.sh&quot; &#93;&#93; &amp;&amp; source &quot;$HOME/.bash-preexec.sh&quot;\n</code></pre><p>No more wondering about the runtime of commands is great. Introducing <code>format-duration</code> made reading the time easier while Bash-Preexec made reading the implementation easier. I highly recommend setting up something similar for your shell.</p>","title":"Using Bash-Preexec for monitoring the runtime of your last command","author":{"name":"Jake McCrary"},"date_published":"2020-04-21T23:59:59+00:00"}]}