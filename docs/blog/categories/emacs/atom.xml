<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: emacs | Jake McCrary]]></title>
  <link href="https://jakemccrary.com/blog/categories/emacs/atom.xml" rel="self"/>
  <link href="https://jakemccrary.com/"/>
  <updated>2023-09-23T12:59:25-05:00</updated>
  <id>https://jakemccrary.com/</id>
  <author>
    <name><![CDATA[Jake McCrary]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Speeding up Magit with the native-comp branch of Emacs]]></title>
    <link href="https://jakemccrary.com/blog/2020/12/30/speeding-up-magit-with-the-native-comp-branch-of-emacs/"/>
    <updated>2020-12-30T20:08:00-06:00</updated>
    <id>https://jakemccrary.com/blog/2020/12/30/speeding-up-magit-with-the-native-comp-branch-of-emacs</id>
    <content type="html"><![CDATA[<p>In my last article, <a href="/blog/2020/11/14/speeding-up-magit/">Speeding up Magit</a>, I showed how removing elements from Magit&rsquo;s status buffer drastically reduces the time it takes to refresh this buffer when working in a large repository (from 4 seconds to around 0.348 seconds).
In a <a href="https://www.reddit.com/r/emacs/comments/k3xfa1/speeding_up_magit/ge5o0e0/?utm_source=reddit&amp;utm_medium=web2x&amp;context=3">comment on r/emacs</a>, someone wondered if the <code>native-comp</code> feature of Emacs might improve the Magit status refresh time.</p>

<p>This reddit thread was the first time I had heard of the <code>native-comp</code> feature.
This feature lives on the <code>feature/native-comp</code> branch of the Emacs repository and it compiles Elisp code into native code.
Many users have reported noticeable speed improvements using it.
The <a href="http://akrl.sdf.org/gccemacs.html">official development log</a> and <a href="https://www.emacswiki.org/emacs/GccEmacs">Emacs Wiki</a> have more information about it.</p>

<p>I&rsquo;ll provide more information about getting <code>native-comp</code> working on macOS after I answer the Magit speed question.</p>

<h2>How did it change refresh times of the Magit status buffer?</h2>

<p>The quick answer is that running Emacs with <code>native-comp</code> improved the refresh times of the Magit status buffer.
Below is a table of the various times.</p>

<pre><code>| Experiment                              | magit-status refresh time |
|-----------------------------------------+---------------------------|
| full magit-status with native-comp      | 3.152 seconds             |
| full magit-status without native-comp   | 4.003 seconds             |
| magit-status with many sections removed | 0.348 seconds             |
</code></pre>

<p>Using <code>native-comp</code>, we&rsquo;ve cut off about 0.85 seconds.
That is a pretty solid improvement.
Even still, that isn&rsquo;t fast enough for how often I use Magit so I&rsquo;ll be sticking with my <a href="/blog/2020/11/14/speeding-up-magit/">Magit setup</a> with many sections removed.</p>

<p>As a caveat, the timing with <code>native-comp</code> also includes upgrading Emacs from <code>26.3</code> to <code>28.0.50</code> (so I could have <code>native-comp</code>) and Magit from <code>20201111.1436</code> to <code>20201212.929</code>.
As a result, the comparison to <code>full magit-status without native-comp</code> isn&rsquo;t entirely fair as multiple variables have changed.
The comparison to time with sections removed is fair as I&rsquo;m still using that setup (but with native-comp) and the timing is pretty much the same.</p>

<h2>Getting <code>native-comp</code> on macOS</h2>

<p>To enable <code>native-comp</code> you need to build Emacs from source.
I&rsquo;ve done this before on Linux systems but this was the first time I&rsquo;ve done this on macOS.</p>

<p>When browsing reddit, I found the <a href="https://github.com/jimeh/build-emacs-for-macos">build-emacs-for-macos</a> project which has some helpful instructions for doing this.
I followed the instructions from the readme and picked the latest known good commit from <a href="https://github.com/jimeh/build-emacs-for-macos/issues/6">this issue</a> (at the time I did this <code>be907b0ba82c2a65e0468d50653cae8a7cf5f16b</code>).
I then updated my <a href="https://github.com/jakemcc/emacs.d/commit/72cf37a497b72b8990956395e2eaa87285ea7c81">init.el</a> based on instructions from in the <code>build-emacs-for-macos</code> project.</p>

<p>I haven&rsquo;t had any issues since switching to this very new Emacs.
I don&rsquo;t have numbers to back this up but it does feel faster.</p>

<h2>Recommendation</h2>

<p>I&rsquo;d recommend giving the <code>native-comp</code> feature of Emacs a shot.
It wasn&rsquo;t terribly challenging to get setup and it is nice to get a glimpse of what the future of Emacs might be.
That future is a bit snappier.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Speeding up magit]]></title>
    <link href="https://jakemccrary.com/blog/2020/11/14/speeding-up-magit/"/>
    <updated>2020-11-14T16:37:00-06:00</updated>
    <id>https://jakemccrary.com/blog/2020/11/14/speeding-up-magit</id>
    <content type="html"><![CDATA[<p><a href="https://github.com/magit/magit">Magit</a> is a great Emacs tool and by far my favorite way of interacting with git repositories.
I use Magit nearly every day.</p>

<p>Unfortunately, refreshing the <code>magit-status</code> buffer is sluggish when you are working in a large repository.</p>

<p>A few months ago, I became sick of waiting and investigated how to speed up refreshing the status buffer.
After doing some research, I learned about the <code>magit-refresh-verbose</code> variable.</p>

<p>Setting <code>magit-refresh-verbose</code> to true causes Magit to print some very useful output to your <code>*Messages*</code> buffer.
This output shows how many seconds each step of <code>magit-status</code> takes.</p>

<p>Here is the output for the large repo that caused me to look into this.</p>

<pre><code>Refreshing buffer ‘magit: example-repo’...
  magit-insert-error-header                          1e-06
  magit-insert-diff-filter-header                    2.3e-05
  magit-insert-head-branch-header                    0.026227
  magit-insert-upstream-branch-header                0.014285
  magit-insert-push-branch-header                    0.005662
  magit-insert-tags-header                           1.7119309999999999
  magit-insert-status-headers                        1.767466
  magit-insert-merge-log                             0.005947
  magit-insert-rebase-sequence                       0.000115
  magit-insert-am-sequence                           5.1e-05
  magit-insert-sequencer-sequence                    0.000105
  magit-insert-bisect-output                         5.3e-05
  magit-insert-bisect-rest                           1.1e-05
  magit-insert-bisect-log                            1e-05
  magit-insert-untracked-files                       0.259485
  magit-insert-unstaged-changes                      0.031528
  magit-insert-staged-changes                        0.017763
  magit-insert-stashes                               0.028514
  magit-insert-unpushed-to-pushremote                0.911193
  magit-insert-unpushed-to-upstream-or-recent        0.497709
  magit-insert-unpulled-from-pushremote              7.2e-05
  magit-insert-unpulled-from-upstream                0.446168
Refreshing buffer ‘magit: example-repo’...done (4.003s)
</code></pre>

<p>The total time is found in the last line and we can see it took four seconds.
Four seconds is an incredibly long time to wait before interacting with Magit.</p>

<p>You can change how much work Magit does by removing functions from the <code>magit-status-sections-hook</code> with <code>remove-hook</code>.
I looked at the timings and and tried removing anything I decided was slow and something I didn&rsquo;t think I&rsquo;d miss.
For me, that list includes <code>magit-insert-tags-header</code>, <code>magit-insert-status-headers</code>, <code>magit-insert-unpushed-to-pushremote</code>, <code>magit-insert-unpushed-to-upstream-or-recent</code>, and <code>magit-insert-unpulled-from-upstream</code>. I also removed <code>magit-insert-unpulled-from-pushremote</code>.</p>

<p>You remove a function from a hook by adding elisp similar to <code>(remove-hook 'magit-status-sections-hook 'magit-insert-tags-header)</code> to your Emacs configuration.</p>

<p>I use <a href="https://github.com/jwiegley/use-package">use-package</a> to configure mine and below is what my <code>magit</code> section looks like.</p>

<p>Lines 20-25 remove the hooks.
I also hard-code <code>magit-git-executable</code> to be the full path of the <code>git</code> executable on line 5 because folks said this made a difference on macOS.</p>

<pre><code class="elisp">(use-package magit
  :ensure t
  :bind ("C-c g" . magit-status)
  :custom
  (magit-git-executable "/usr/local/bin/git")
  :init
  (use-package with-editor :ensure t)

  ;; Have magit-status go full screen and quit to previous
  ;; configuration.  Taken from
  ;; http://whattheemacsd.com/setup-magit.el-01.html#comment-748135498
  ;; and http://irreal.org/blog/?p=2253
  (defadvice magit-status (around magit-fullscreen activate)
    (window-configuration-to-register :magit-fullscreen)
    ad-do-it
    (delete-other-windows))
  (defadvice magit-quit-window (after magit-restore-screen activate)
    (jump-to-register :magit-fullscreen))
  :config
  (remove-hook 'magit-status-sections-hook 'magit-insert-tags-header)
  (remove-hook 'magit-status-sections-hook 'magit-insert-status-headers)
  (remove-hook 'magit-status-sections-hook 'magit-insert-unpushed-to-pushremote)
  (remove-hook 'magit-status-sections-hook 'magit-insert-unpulled-from-pushremote)
  (remove-hook 'magit-status-sections-hook 'magit-insert-unpulled-from-upstream)
  (remove-hook 'magit-status-sections-hook 'magit-insert-unpushed-to-upstream-or-recent))
</code></pre>

<p>After this change, my <code>magit-status</code> buffer refreshes in under half a second.</p>

<pre><code>Refreshing buffer ‘magit: example-repo’...
  magit-insert-merge-log                             0.005771
  magit-insert-rebase-sequence                       0.000118
  magit-insert-am-sequence                           5.3e-05
  magit-insert-sequencer-sequence                    0.0001
  magit-insert-bisect-output                         5.5e-05
  magit-insert-bisect-rest                           1.1e-05
  magit-insert-bisect-log                            1.1e-05
  magit-insert-untracked-files                       0.247723
  magit-insert-unstaged-changes                      0.024989
  magit-insert-staged-changes                        0.018397
  magit-insert-stashes                               0.026055
Refreshing buffer ‘magit: example-repo’...done (0.348s)
</code></pre>

<p>What did I lose from the <code>magit-status</code> buffer as a result of these changes?
Here is screenshot of the original buffer.</p>

<p><img src="/images/magit-speed/magit-before.png" alt="Buffer before changes" /></p>

<p>And here is the buffer after.</p>

<p><img src="/images/magit-speed/magit-after.png" alt="Buffer after changes" /></p>

<p>The difference is drastic<sup id="fnref:1"><a href="#fn:1" rel="footnote">1</a></sup>.
And so is the speed difference.</p>

<p>The increased speed is worth losing the additional information.
I interact with <code>git</code> very often and much prefer using Magit to do so.
Before these changes, I found myself regressing to using <code>git</code> at the command line and I don&rsquo;t find that to be nearly as enjoyable.
Since I&rsquo;ve made these changes, I&rsquo;m back to doing 99% of my <code>git</code> interactions through Magit.</p>

<p>Don&rsquo;t settle for slow interactions with your computer.
Aggressively shorten your feedback cycles and you&rsquo;ll change how you interact with the machine.</p>

<h4>Versions used when writing this article</h4>

<p>This post was written with Magit version <code>20201111.1436</code> and Emacs <code>26.3</code> on macOS <code>10.15.7</code>.
I&rsquo;ve been using these changes for a few months but do not remember or have a record of what Magit version I was using at the time I originally made these changes.</p>

<p><strong>edit on 2020/12/15</strong>: I recently upgraded Emacs to tryout the native-comp work and can report this still works with with Emacs <code>28.0.50</code>, Magit <code>20201212.929</code>, and Git <code>2.29.2</code> running in macOS <code>11.0.1</code>.</p>

<p><strong>Warning</strong>: This reduces the information Magit shows you. The status buffer will be blank if you have no changes. I find this tradeoff to be worth it.</p>
<div class="footnotes">
<hr/>
<ol>
<li id="fn:1">
The before image is even missing some sections that would have gone missing in the after shot since I didn&rsquo;t want to put the effort.<a href="#fnref:1" rev="footnote">&#8617;</a></li>
</ol>
</div>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[My favorite clj-refactor features]]></title>
    <link href="https://jakemccrary.com/blog/2015/06/30/my-favorite-clj-refactor-features/"/>
    <updated>2015-06-30T08:40:00-05:00</updated>
    <id>https://jakemccrary.com/blog/2015/06/30/my-favorite-clj-refactor-features</id>
    <content type="html"><![CDATA[<p>If you write Clojure using Emacs you should check out
<a href="https://github.com/clojure-emacs/clj-refactor.el">clj-refactor</a>. It
is working better than ever and makes developing Clojure more
enjoyable.</p>

<p>I don&rsquo;t use all the features in clj-refactor. There are a lot of
features I haven&rsquo;t had the need to use and many I just can&rsquo;t remember.
Below are the features I use consistently.</p>

<h3>Favorite Features</h3>

<p>My favorite feature of clj-refactor is the
<a href="/blog/2015/06/18/emacs-automatically-require-common-namespaces/">magic requires</a>.
This feature lets you type a prefix (such as <code>(str/)</code>) and have the
namespace automatically added to your <code>ns</code> form (in this example
<code>[clojure.string :as str]</code>). It is awesome. You can also add
<a href="/blog/2015/06/18/emacs-automatically-require-common-namespaces/">your own</a>
prefix mappings.</p>

<p>My other most frequently used refactorings are
<a href="https://github.com/clojure-emacs/clj-refactor.el/wiki/cljr-introduce-let">introduce let</a>,
<a href="https://github.com/clojure-emacs/clj-refactor.el/wiki/cljr-expand-let">expand let</a>,
and
<a href="https://github.com/clojure-emacs/clj-refactor.el/wiki/cljr-move-to-let">move to let</a>.
These three are very complementary and are a quick way if introducing
named locals.</p>

<p><a href="https://github.com/clojure-emacs/clj-refactor.el/wiki/cljr-add-missing-libspec">Add missing libspec</a>
is a recent discovery of mine. Have you ever paired with a developer
who uses Intellij with Cursive and been a bit jealous of the
auto-requiring? I have. This refactoring lets you do that. Type
whatever symbol you want and clj-refactor tries to resolve it and then
require the containing namespace with correct prefix. Recently I broke
a massive namespace into a few smaller ones and this refactoring saved
me a ton of time.</p>

<p>I used to use
<a href="https://github.com/clojure-emacs/clj-refactor.el/wiki/cljr-move-form">move form</a>
when trying to reorganize namespaces but now I pretty much just cut
and paste and use
<a href="https://github.com/clojure-emacs/clj-refactor.el/wiki/cljr-add-missing-libspec">add missing libspec</a>
to fix the requires. I want to use <strong>move form</strong> but I haven&rsquo;t had a
ton of success with it. <strong>Add missing libspec</strong> plus cut and paste is
a few more steps but my success rate has been much higher.</p>

<p><a href="https://github.com/clojure-emacs/clj-refactor.el/wiki/cljr-sort-ns">Sort ns</a>
does exactly what it says, it sorts your <code>ns</code> form. Once you get used
to keeping your <code>ns</code> forms sorted you won&rsquo;t go back.</p>

<p><a href="https://github.com/clojure-emacs/clj-refactor.el/wiki/cljr-extract-function">Extract function</a>
is another refactoring I recently stumbled upon. I&rsquo;ve used it a few
times since then and when it works it is pretty awesome. I&rsquo;ve had
unexpected behavior a couple of times but it was unclear if that was
my fault or it not handling macros well. If you&rsquo;re extracting a
function you might as well give it a shot.</p>

<p>The final feature is the
<a href="https://github.com/clojure-emacs/clj-refactor.el/wiki#automatic-insertion-of-namespace-declaration">automatic insertion of namespace declarations</a>
when you create a new Clojure file. I nearly forgot to highlight this
feature because it requires no action on my side and it is amazing. If
I never have to type a namespace symbol again I&rsquo;ll be happy.</p>

<h3>Customization</h3>

<p>Below is my entire clj-refactor setup from my Emacs init.el. It
doesn&rsquo;t take much to get it to a state I like.</p>

<pre><code class="elisp">(require 'clj-refactor)

;; Add custom magic requires.
(dolist (mapping '(("maps" . "outpace.util.maps")
                   ("seqs" . "outpace.util.seqs")
                   ("times" . "outpace.util.times")
                   ("repl" . "outpace.util.repl")
                   ("time" . "clj-time.core")
                   ("string" . "clojure.string")))
  (add-to-list 'cljr-magic-require-namespaces mapping t))

(setq cljr-favor-prefix-notation nil)

(add-hook 'clojure-mode-hook (lambda ()
                               (clj-refactor-mode 1)
                               (yas/minor-mode 1)
                               (cljr-add-keybindings-with-prefix "C-c C-x")))
</code></pre>

<p>If you use Emacs and write Clojure you should check out clj-refactor.
There are enough features that consistently work and help keep you in
the flow that it is worth using.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Emacs: automatically require common namespaces]]></title>
    <link href="https://jakemccrary.com/blog/2015/06/18/emacs-automatically-require-common-namespaces/"/>
    <updated>2015-06-18T12:52:00-05:00</updated>
    <id>https://jakemccrary.com/blog/2015/06/18/emacs-automatically-require-common-namespaces</id>
    <content type="html"><![CDATA[<p>If you&rsquo;re writing Clojure in Emacs you should check out
<a href="https://github.com/clojure-emacs/clj-refactor.el">clj-refactor</a>. It
provides some neat functionality. Some examples include the ability to
extract functions, introduce <code>let</code> forms, and inline symbols. It also
has a feature called &ldquo;magic requires&rdquo; that automatically requires
common namespaces when you type their short form.</p>

<p>Out of the box five short forms are supported. They are <code>io</code> for
<code>clojure.java.io</code>, <code>set</code> for <code>clojure.set</code>, <code>str</code> for
<code>clojure.string</code>, <code>walk</code> for <code>clojure.walk</code>, and <code>zip</code> for
<code>clojure.zip</code>. If you type <code>(str/</code> then <code>(:require
[clojure.string :as str])</code> will be added to your <code>ns</code> form. It is
pretty awesome. This feature is on by default but you can turn it off
by adding <code>(setq cljr-magic-requires nil)</code> to your Emacs
configuration.</p>

<p>This feature is also extensible. You can add your own mappings of
short form to namespace. The following snippet of elisp adds mappings
for <code>maps</code>, <code>seqs</code>, and <code>string</code>.</p>

<pre><code>(dolist (mapping '(("maps" . "outpace.util.maps")
                   ("seqs" . "outpace.util.seqs")
                   ("string" . "clojure.string")))
  (add-to-list 'cljr-magic-require-namespaces mapping t))
</code></pre>

<p>It doesn&rsquo;t take a lot of code but having it is awesome. If there are
namespaces you frequently require I highly recommend setting this up.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Using Emacs to Explore an HTTP API]]></title>
    <link href="https://jakemccrary.com/blog/2014/07/04/using-emacs-to-explore-an-http-api/"/>
    <updated>2014-07-04T13:05:00-05:00</updated>
    <id>https://jakemccrary.com/blog/2014/07/04/using-emacs-to-explore-an-http-api</id>
    <content type="html"><![CDATA[<p>Recently I rediscovered an Emacs package that allows you to interact
with HTTP endpoints from the comfort of an Emacs buffer.
<a href="https://github.com/pashky/restclient.el">restclient.el</a> provides
<code>restclient-mode</code>. This mode allows you to write and execute HTTP
requests in an Emacs buffer. This package can be found in
<a href="http://melpa.milkbox.net/#/restclient">MELPA</a>.</p>

<p>Below is an example buffer that touches the GitHub API.</p>

<pre><code class="ruby">:github = https://api.github.com

# get users orgs

GET :github/users/jakemcc/orgs

# rendor markdown

POST :github/markdown

{
  "text" : "## Title"
}

# rendor markdown raw

POST :github/markdown/raw
Content-Type: text/plain

Title
-----
</code></pre>

<p>The example above has a few interesting snippets. <code>:github</code> is an
example of a variable. Lines 8-14 show an example of posting json to
an endpoint. You put the data you want to send below the query. The
last POST shows how to set headers for a request.</p>

<p>The location of your cursor decides what query to execute. Comments
start with <code>#</code> and break your document into sections. The query in the
same section as your cursor is the one that is executed. If the cursor
is anywhere on lines 3-6 and I hit <code>C-c C-c</code> then Emacs queries GitHub
for my organizations. Below is what pops up in a buffer.</p>

<pre><code class="javascript">
[
    {
        "avatar_url": "https:\/\/avatars.githubusercontent.com\/u\/1826953?",
        "public_members_url": "https:\/\/api.github.com\/orgs\/speakerconf\/public_members{\/member}",
        "members_url": "https:\/\/api.github.com\/orgs\/speakerconf\/members{\/member}",
        "events_url": "https:\/\/api.github.com\/orgs\/speakerconf\/events",
        "repos_url": "https:\/\/api.github.com\/orgs\/speakerconf\/repos",
        "url": "https:\/\/api.github.com\/orgs\/speakerconf",
        "id": 1826953,
        "login": "speakerconf"
    },
    {
        "avatar_url": "https:\/\/avatars.githubusercontent.com\/u\/4711436?",
        "public_members_url": "https:\/\/api.github.com\/orgs\/outpace\/public_members{\/member}",
        "members_url": "https:\/\/api.github.com\/orgs\/outpace\/members{\/member}",
        "events_url": "https:\/\/api.github.com\/orgs\/outpace\/events",
        "repos_url": "https:\/\/api.github.com\/orgs\/outpace\/repos",
        "url": "https:\/\/api.github.com\/orgs\/outpace",
        "id": 4711436,
        "login": "outpace"
    }
]
// HTTP/1.1 200 OK
// Server: GitHub.com
// Date: Fri, 04 Jul 2014 17:34:26 GMT
// Content-Type: application/json; charset=utf-8
// other headers removed for space consideration on blog
</code></pre>

<p><code>C-c C-c</code> triggers <code>restclient-http-send-current</code> which runs a query
and pretty prints the result. I could have used <code>C-c C-r</code> to trigger
<code>restclient-http-send-current-raw</code> which executes a query and shows
the raw result.</p>

<p>It isn&rsquo;t a perfect mode. One issue I&rsquo;ve come across is that queries
targeting <code>localhost</code> fail. The solution is to query <code>127.0.0.1</code>.</p>

<p><code>restclient-mode</code> makes Emacs a useful tool for exploring and
testing HTTP APIs. Since it operates on a simple text
format it allows you to easily share executable documentation with
others. I highly recommend <strong>restclient.el</strong>.</p>
]]></content>
  </entry>
  
</feed>
