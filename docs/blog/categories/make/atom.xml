<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: make | Jake McCrary]]></title>
  <link href="https://jakemccrary.com/blog/categories/make/atom.xml" rel="self"/>
  <link href="https://jakemccrary.com/"/>
  <updated>2020-08-31T22:24:48-05:00</updated>
  <id>https://jakemccrary.com/</id>
  <author>
    <name><![CDATA[Jake McCrary]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[A more helpful makefile]]></title>
    <link href="https://jakemccrary.com/blog/2018/12/27/a-more-helpful-makefile/"/>
    <updated>2018-12-27T21:21:00-06:00</updated>
    <id>https://jakemccrary.com/blog/2018/12/27/a-more-helpful-makefile</id>
    <content type="html"><![CDATA[<p>In an <a href="/blog/2016/11/30/unify-your-project-interfaces/">older article</a> of mine I extolled the virtues of having unified interfaces for interacting with your projects. I recently started working at Coinbase and the group I&rsquo;m working with is mostly using makefiles as that common interface. We still have some more work to do to unify the makefile targets of the various projects but I&rsquo;ve picked up one tip that makes switching between projects easier.</p>

<p>That tip is to have the default target of your makefile be one that prints out a helpful message. This looks like the following.</p>

<pre><code>.PHONY: help
help:
    @grep -E '^[0-9a-zA-Z_-]+:.*?## .*$$' $(MAKEFILE_LIST) | \
     sort | \
     awk 'BEGIN {FS = ":.*?## "}; {printf "\033[36m%-30s\033[0m %s\n", $$1, $$2}'
</code></pre>

<p>There is a lot going on there but it basically looks through your makefile targets and finds the ones that have a comment starting with <code>##</code> after the target dependencies. Those targets are printed to the console along with the comment.</p>

<p>As an example, the makefile for my website looks similar to the below file.</p>

<pre><code>.PHONY: help
help:
    @grep -E '^[0-9a-zA-Z_-]+:.*?## .*$$' $(MAKEFILE_LIST) | \
     sort | \
     awk 'BEGIN {FS = ":.*?## "}; {printf "\033[36m%-30s\033[0m %s\n", $$1, $$2}'

.PHONY: watch
watch: ## Watch for changes and serve preview of site with drafts
    bundle exec rake clean
    bundle exec rake preview

.PHONY: develop
develop: ## Serve a preview of the site without drafts and refresh changes
    bundle exec rake clean
    bundle exec rake develop

.PHONY: new_adventure
new_adventure: ## Start a new adventure post
    bundle exec rake new_adventure

.PHONY: new_post
new_post: ## Start a new post
    bundle exec rake new_post 

.PHONY: deploy
deploy: ## deploy
    ./deploy.sh
</code></pre>

<p>When this file, when I run <code>make</code> in this websites source, I get the following output.</p>

<pre><code>0 [last: 0s] 21:11:50 ~/src/jakemcc/blog (master)
$ make
deploy                         deploy
develop                        Serve a preview of the site without drafts and refresh changes
new_adventure                  Start a new adventure post
new_post                       Start a new post
watch                          Watch for changes and serve preview of site with drafts
</code></pre>

<p>This is super useful when you&rsquo;re starting doing work in a new project. With this feature you can get a quick list of useful targets and a description. It allows you to quickly see what can be done in a project.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Unify your project interfaces]]></title>
    <link href="https://jakemccrary.com/blog/2016/11/30/unify-your-project-interfaces/"/>
    <updated>2016-11-30T17:51:00-06:00</updated>
    <id>https://jakemccrary.com/blog/2016/11/30/unify-your-project-interfaces</id>
    <content type="html"><![CDATA[<p>Jeff Ramnani wrote an <a href="https://jefframnani.com/project-build-protocol/">article</a> about unifying your command line interactions across programming projects. I recommend that you read it. The basic gist is that we often find ourselves working on multiple projects at a time. Frequently these projects are in different languages and use different build tools. Remembering the necessary incantations to interact with the various projects is difficult and we&rsquo;re lazy. We can do better by standardizing an interface to our projects.</p>

<p>This interface can take many forms. One option is to have a <code>bin</code> or <code>scripts</code> directory in each project and then consistently name the scripts you put in there (examples: <code>run</code>, <code>test</code>, and <code>build</code>). Another option is to use Makefiles with consistently named targets. Either way, your projects now have a standard way of interacting with them. This frees you from having to remember all the various commands and makes onboarding new developers easier.</p>

<p>I&rsquo;ve been using a similar approach to Jeff Ramnani for years and highly recommend it. I&rsquo;m a fan of the Makefile approach but either approach works. The unified targets I use across projects are the following:</p>

<ul>
<li><code>up</code> - Brings the system up</li>
<li><code>status</code> - Is the system up and running?</li>
<li><code>logs</code> - Show me the logs</li>
<li><code>local-db</code> - Connect to my local database</li>
<li><code>build</code> - Build the project</li>
<li><code>test</code> - Run the tests</li>
</ul>


<p>If you haven&rsquo;t created a common interface for your projects I recommend that you do it. It definitely makes moving between projects easier.</p>
]]></content>
  </entry>
  
</feed>
