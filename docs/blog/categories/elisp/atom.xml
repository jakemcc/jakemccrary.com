<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: elisp | Jake McCrary]]></title>
  <link href="https://jakemccrary.com/blog/categories/elisp/atom.xml" rel="self"/>
  <link href="https://jakemccrary.com/"/>
  <updated>2020-07-03T18:38:55-05:00</updated>
  <id>https://jakemccrary.com/</id>
  <author>
    <name><![CDATA[Jake McCrary]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Emacs: Generating project shortcuts]]></title>
    <link href="https://jakemccrary.com/blog/2014/04/27/emacs-generating-project-shortcuts/"/>
    <updated>2014-04-27T16:38:00-05:00</updated>
    <id>https://jakemccrary.com/blog/2014/04/27/emacs-generating-project-shortcuts</id>
    <content type="html"><![CDATA[<p>I&rsquo;m now writing Clojure nearly 100% of my time and as a result am spending more
time in Emacs. I&rsquo;m working in a few different projects and
wanted a quicker way to jump between them. My first attempt at this
ended with me defining many functions that looked like the following.</p>

<pre><code class="cl">(defun b/test-refresh ()
  (interactive)
  (find-file "~/src/jakemcc/lein-test-refresh/test-refresh/project.clj"))
</code></pre>

<p>After writing a couple of these I decided the computer could do this
better than I could and decided to write some code to automate it. A
sample of my directory structure is shown below.</p>

<pre><code class="bash">jakemcc/
├── bookrobot
│   └── project.clj
└── lein-autoexpect
    └── project.clj
</code></pre>

<p>Taking advantage of this structure I wrote some Emacs lisp to walk a
directory and define functions that open up any found project.clj
files.</p>

<pre><code class="cl">;; -*- lexical-binding: t -*-

(defun open-file-fn (file) 
  (lambda ()
    (interactive)
    (find-file file)))

(defun create-project-shortcuts (prefix base)
  (dolist (elt (directory-files base))
    (let ((project (concat base "/" elt "/project.clj")))
      (when (file-exists-p project)
        (fset (intern (concat prefix elt)) (open-file-fn project))))))
</code></pre>

<p><code>open-file-fn</code> creates an anonymous interactive function (meaning the function
can be called interactively) that opens <code>file</code>. It takes advantage of
the feature in Emacs 24 that enables lexical scoping by adding <code>;; -*-
lexical-binding: t -*-</code> to the top of your Emacs lisp file. This lets
the anonymous function capture <code>file</code>.</p>

<p><code>create-project-shortcuts</code> takes in a <code>prefix</code> and a <code>base</code> directory.
It searches <code>base</code> for directories that contain a
project.clj file. For each found project.clj file a function is
created (using <code>fset</code>) with the name of the containing directory
prefixed by <code>prefix</code>.</p>

<p>With those two functions defined all that is left is to call
<code>create-project-shortcuts</code>.</p>

<pre><code class="cl">(create-project-shortcuts "b/" "~/src/jakemcc")
</code></pre>

<p>Now <code>b/bookrobot</code> and <code>b/lein-autoexpect</code> are available after hitting
<code>M-x</code>.</p>

<p>I&rsquo;ve used this code to create quick
shortcuts to all of my work and non-work projects. It has been
immensely useful for jumping around projects.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Emacs: Capture shell command output in temporary buffer]]></title>
    <link href="https://jakemccrary.com/blog/2013/08/10/emacs-capture-shell-command-output-in-temporary-buffer/"/>
    <updated>2013-08-10T14:33:00-05:00</updated>
    <id>https://jakemccrary.com/blog/2013/08/10/emacs-capture-shell-command-output-in-temporary-buffer</id>
    <content type="html"><![CDATA[<p>My text editor of choice is Emacs. Its extensibility is a major
contributor to this preference. The ease of adding additional
functionality means you can customize it to your liking. You should
not go overboard and change too much of the default behavior but you
should feel free to add additional features.</p>

<p>I recently found myself often editing a file in emacs and then
switching to a terminal and running a bash script to see how the
output changed. This is part of my work flow for shutting down or
starting new server processes. Since this is something I&rsquo;ll be doing
quite frequently in the future, I wrote some Emacs Lisp to run the
shell script and display the output in a temporary buffer. With this
function in place I no longer have to toggle to a terminal and run a
command.</p>

<p>I&rsquo;m picky and I wanted this output buffer to have the same behavior as
the help buffer. That is, I wanted to be able to close the buffer by
just hitting the letter <code>q</code>. It took me a while to figure out how to
do this so I thought I would share it here in hopes it might benefit others.</p>

<p>First I&rsquo;ll show the code and then I&rsquo;ll explain what it is doing.</p>

<pre><code class="cl">(defun blog-example ()
  (interactive)
  (with-output-to-temp-buffer "*blog-example*"
    (shell-command "echo This is an example"
                   "*blog-example*"
                   "*Messages*")
    (pop-to-buffer "*blog-example*")))
</code></pre>

<p>The above snippet defines a function named <code>blog-example</code>. It takes no
arguments and is interactive (as indicated by the second line calling
<code>interactive</code>). This call to <code>interactive</code> makes <code>blog-example</code>
available to be called interactively, meaning you can call it after
triggering <code>M-x</code>. This is probably a simplification of what is
actually does, so if you care the documentation is available
<a href="http://www.gnu.org/software/emacs/manual/html_node/elisp/Using-Interactive.html">here</a>.</p>

<p>After the call to <code>interactive</code> we hit the core of this function, the
call to <code>with-output-to-temp-buffer</code>. This function a buffer name as a first argument
and additional forms. The output of those forms is put into the named
buffer.</p>

<p>The form I&rsquo;m passing to <code>with-output-to-temp-buffer</code> is a call to
<code>shell-command</code>. <code>shell-command</code> will run <code>echo This is an example</code>
synchronously and redirect stdout to <code>*blog-example*</code> and stderr to
<code>*Messages*</code>.</p>

<p>The final line opens the buffer and switches focus to it. Now you can
look at the output and when you are ready to return just hit <code>q</code>.</p>

<p>This is a simplified example but it shows how easy it is to extend
Emacs functionality. Doing something similar to this made a task I do
frequently more pleasant.</p>

<p>My use case is a bit more complicated and involves saving the buffer
I&rsquo;m currently editing and then running a command against the saved
file. Below is some sample code that does something similar.</p>

<pre><code class="cl">(defun example2 ()
  (interactive)
  (when (and (buffer-modified-p)
             (y-or-n-p (format "Save file %s? " (buffer-file-name))))
    (save-buffer))
  (with-output-to-temp-buffer "*blog-example*"
    (shell-command (concat "wc -l"
                           " "
                           (expand-file-name (buffer-file-name)))
                   "*blog-example*"
                   "*Messages*")
    (pop-to-buffer "*blog-example*")))
</code></pre>
]]></content>
  </entry>
  
</feed>
